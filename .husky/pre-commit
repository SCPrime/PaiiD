#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# ====================================
# PAIID PRE-COMMIT VALIDATION PIPELINE
# ====================================
# This hook validates code quality AND protects reference files
# It runs automatically before every git commit

echo "üîç Running pre-commit validation..."

# ====================================
# PHASE 1: LOCKED FINAL FILE PROTECTION
# ====================================

echo "üîí Phase 1: Checking for LOCKED FINAL file modifications..."

# Check if any LOCKED FINAL files are staged for commit
LOCKED_FILES=$(git diff --cached --name-only | grep -E "LOCKED FINAL|Locked\\.tsx|Locked\\.svg|CompletePaiiDLogo|PaiiDChatBoxLocked|iPi-Symbol-Locked" || true)

if [ -n "$LOCKED_FILES" ]; then
  echo ""
  echo "‚ùå ==================== COMMIT BLOCKED ===================="
  echo "üîí **ERROR:** You are attempting to commit PROTECTED REFERENCE FILES"
  echo ""
  echo "üìÅ Protected files detected:"
  echo "$LOCKED_FILES" | sed 's/^/   /'
  echo ""
  echo "üö´ **RULES - NO EXCEPTIONS:**"
  echo "   1. These files are READ-ONLY REFERENCES"
  echo "   2. DO NOT MODIFY, REFACTOR, or \"IMPROVE\""
  echo "   3. COPY ONLY - Never edit the original"
  echo "   4. NO REFORMATTING - Keep exact spacing/styling"
  echo ""
  echo "üí° **To proceed (NOT recommended):**"
  echo "   git commit --no-verify -m \"your message\""
  echo ""
  echo "‚úÖ **Recommended action:**"
  echo "   1. Unstage the protected files: git reset HEAD <file>"
  echo "   2. Revert changes: git checkout -- <file>"
  echo "   3. Copy the file to a new location instead"
  echo ""
  echo "**Status:** IMMUTABLE | **Approved By:** Dr. SC Prime ‚úÖ"
  echo "========================================================"
  echo ""
  exit 1
fi

echo "‚úÖ No LOCKED FINAL files modified."

# ====================================
# PHASE 2: FRONTEND VALIDATION
# ====================================

echo "üì¶ Phase 2: Frontend validation..."
cd frontend && npx lint-staged
if [ $? -ne 0 ]; then
  echo "‚ùå Frontend lint-staged failed!"
  exit 1
fi

echo "üîß Frontend: Type checking..."
npm run type-check
if [ $? -ne 0 ]; then
  echo "‚ùå Frontend type-check failed! Fix TypeScript errors before committing."
  exit 1
fi

# ====================================
# PHASE 3: BACKEND VALIDATION
# ====================================

cd ..

if git diff --cached --name-only | grep -q "^backend/"; then
  echo "üêç Phase 3: Backend validation..."
  cd backend
  ruff check . --fix
  if [ $? -ne 0 ]; then
    echo "‚ùå Backend Ruff linting failed! Fix Python errors before committing."
    exit 1
  fi

  echo "üé® Backend: Running Ruff formatter..."
  ruff format .
  if [ $? -ne 0 ]; then
    echo "‚ùå Backend Ruff formatting failed!"
    exit 1
  fi
  cd ..
else
  echo "‚Ü™Ô∏è No backend changes detected. Skipping backend validation."
fi

# ====================================
# SUCCESS
# ====================================

echo "‚úÖ All pre-commit checks passed!"
exit 0
