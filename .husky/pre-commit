
# ====================================
# PAIID PRE-COMMIT VALIDATION PIPELINE
# ====================================
# This hook validates code quality AND protects reference files
# It runs automatically before every git commit

echo "üîç Running pre-commit validation..."

# ====================================
# PHASE 1: LOCKED FINAL FILE PROTECTION
# ====================================

echo "üîí Phase 1: Checking for LOCKED FINAL file modifications..."

# Check if any LOCKED FINAL files are staged for commit
LOCKED_FILES=$(git diff --cached --name-only | grep -E "LOCKED FINAL|Locked\.tsx|Locked\.svg|CompletePaiiDLogo|PaiiDChatBoxLocked|iPi-Symbol-Locked" || true)

if [ -n "$LOCKED_FILES" ]; then
  echo ""
  echo "‚ùå ==================== COMMIT BLOCKED ===================="
  echo "üîí **ERROR:** You are attempting to commit PROTECTED REFERENCE FILES"
  echo ""
  echo "üìÅ Protected files detected:"
  echo "$LOCKED_FILES" | sed 's/^/   /'
  echo ""
  echo "üö´ **RULES - NO EXCEPTIONS:**"
  echo "   1. These files are READ-ONLY REFERENCES"
  echo "   2. DO NOT MODIFY, REFACTOR, or \"IMPROVE\""
  echo "   3. COPY ONLY - Never edit the original"
  echo "   4. NO REFORMATTING - Keep exact spacing/styling"
  echo ""
  echo "üí° **To proceed (NOT recommended):**"
  echo "   git commit --no-verify -m \"your message\""
  echo ""
  echo "‚úÖ **Recommended action:**"
  echo "   1. Unstage the protected files: git reset HEAD <file>"
  echo "   2. Revert changes: git checkout -- <file>"
  echo "   3. Copy the file to a new location instead"
  echo ""
  echo "**Status:** IMMUTABLE | **Approved By:** Dr. SC Prime ‚úÖ"
  echo "========================================================"
  echo ""
  exit 1
fi

echo "‚úÖ No LOCKED FINAL files modified."

# ====================================
# PHASE 2: FRONTEND VALIDATION
# ====================================

echo "üì¶ Phase 2: Frontend validation..."
(
  cd frontend || exit 1
  npx lint-staged || exit 1
  echo "üîß Frontend: Type checking..."
  npm run type-check || exit 1
)

# ====================================
# PHASE 3: BACKEND VALIDATION
# ====================================

echo "üêç Phase 3: Backend validation..."
PY_FILES=$(git diff --cached --name-only -- 'backend/**/*.py' '*.py')
if [ -n "$PY_FILES" ]; then
  echo "‚ÑπÔ∏è Ruff linting skipped due to known repository-wide violations."
  echo "   Staged Python files:" $PY_FILES
else
  echo "‚ÑπÔ∏è No Python files staged; skipping backend lint/format."
fi

# ====================================
# SUCCESS
# ====================================

echo "‚úÖ All pre-commit checks passed!"
exit 0
