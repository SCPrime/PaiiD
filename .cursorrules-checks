# üéØ Critical Code Patterns - Cursor AI Checks

**Purpose**: Focused checklist of critical stability/security patterns for Cursor to check  
**Source**: Extracted from `.github/CLAUDE.md` and GitHub Claude learnings  
**Usage**: Copy these patterns into Cursor commands or search codebase

---

## 1. üö® API Endpoint Errors (500 Responses)

### Pattern: Missing Error Handling
**Search for:**
```python
# Backend routers without try/except
@router\.(get|post|put|delete)\(
.*
(?!try:)
.*external_api
```

**Example Bad Code:**
```python
@router.get("/api/data")
async def get_data():
    data = tradier_client.get_quotes(symbol)  # ‚ùå No error handling
    return data
```

**Example Good Code:**
```python
@router.get("/api/data")
async def get_data():
    try:
        data = tradier_client.get_quotes(symbol)
        return data
    except TradierAPIError as e:
        logger.error(f"Tradier API error: {e}")
        raise HTTPException(status_code=503, detail="Market data unavailable")
```

**Cursor Command:**
```
Find all API endpoints without try/except error handling
```

---

## 2. üí∞ Financial Precision (Decimal vs Float)

### Pattern: Float Usage in Money Calculations
**Search for:**
```python
# Variable names suggesting money + float operations
(price|cost|total|amount|value).*=.*\d+\.\d+
(price|cost|total|amount|value).*\*.*
```

**Example Bad Code:**
```python
price = 123.45  # ‚ùå float
quantity = 100
total = price * quantity  # ‚ùå Precision loss
```

**Example Good Code:**
```python
from decimal import Decimal

price = Decimal("123.45")  # ‚úÖ Decimal
quantity = 100
total = price * quantity  # ‚úÖ Exact precision
```

**Cursor Command:**
```
Check all financial calculations for float vs Decimal usage
```

---

## 3. üîí SQL Injection Vulnerabilities

### Pattern: String Interpolation in SQL
**Search for:**
```python
# f-strings or % formatting in SQL queries
f["']SELECT.*{.*}
.*%.*SELECT
db\.execute\(f["']
```

**Example Bad Code:**
```python
# ‚ùå SQL injection vulnerability
query = f"SELECT * FROM users WHERE id = {user_id}"
result = db.execute(query)
```

**Example Good Code:**
```python
# ‚úÖ Parameterized query
query = "SELECT * FROM users WHERE id = :user_id"
result = db.execute(query, {"user_id": user_id})
```

**Cursor Command:**
```
Scan for SQL injection risks in database queries
```

---

## 4. üîë Exposed Secrets/API Keys

### Pattern: Hardcoded Credentials
**Search for:**
```python
# API keys, passwords, secrets in source code
(API_KEY|SECRET|PASSWORD|TOKEN).*=.*["'][^{]
bearer.*=.*["']sk-
```

**Example Bad Code:**
```python
# ‚ùå Hardcoded secret
API_KEY = "sk-ant-api03-abc123..."
TRADIER_KEY = "1234567890abcdef"
```

**Example Good Code:**
```python
# ‚úÖ Environment variables
from .config import settings

API_KEY = settings.ANTHROPIC_API_KEY
TRADIER_KEY = settings.TRADIER_API_KEY
```

**Cursor Command:**
```
Find any hardcoded API keys or secrets
```

---

## 5. ‚ö° External API Calls Without Timeouts

### Pattern: Missing Timeout Parameters
**Search for:**
```python
# HTTP requests without timeout
requests\.(get|post)\([^)]*\)(?!.*timeout)
httpx\.AsyncClient\((?!.*timeout)
```

**Example Bad Code:**
```python
# ‚ùå No timeout (hangs forever if API is down)
response = requests.get("https://api.tradier.com/v1/quotes")
```

**Example Good Code:**
```python
# ‚úÖ With timeout
response = requests.get(
    "https://api.tradier.com/v1/quotes",
    timeout=30
)
```

**Cursor Command:**
```
Check all external API calls have timeout parameters
```

---

## 6. üîÑ Options Endpoint Routing Issues

### Pattern: Known Problematic Pattern
**Context**: We had a bug where `/api/options/expirations/{symbol}` returned 404

**Search for:**
```python
# Options routes that might have similar issues
@router\.(get|post)\(.*/options/.*{.*}
```

**Check for:**
1. Is the symbol parameter validated?
2. Does it handle empty results?
3. Is the authentication correct?
4. Does it return proper error status codes?

**Example Pattern Check:**
```python
@router.get("/api/options/chain/{symbol}")
async def get_chain(symbol: str, current_user: User = Depends(get_current_user)):
    if not symbol or len(symbol) > 10:  # ‚úÖ Validation
        raise HTTPException(400, "Invalid symbol")
    
    try:
        chain = await tradier.get_option_chain(symbol)
        if not chain:  # ‚úÖ Handle empty
            return {"error": "No options available"}
        return chain
    except Exception as e:  # ‚úÖ Error handling
        logger.error(f"Options chain error: {e}")
        raise HTTPException(500, "Failed to fetch options")
```

**Cursor Command:**
```
Review all options endpoint routes for the known 404 pattern
```

---

## 7. üîÄ Race Conditions in Async Code

### Pattern: Shared State Without Locks
**Search for:**
```python
# Global variables modified in async functions
^[A-Z_]+ = .*  # Global variable
.*async def.*  # Async function
.*\1 =.*  # Modifying global
```

**Example Bad Code:**
```python
# ‚ùå Race condition
ACTIVE_CONNECTIONS = []

async def handle_websocket(websocket):
    ACTIVE_CONNECTIONS.append(websocket)  # ‚ùå Not thread-safe
```

**Example Good Code:**
```python
# ‚úÖ Thread-safe
import asyncio

class ConnectionManager:
    def __init__(self):
        self.active_connections = []
        self._lock = asyncio.Lock()
    
    async def connect(self, websocket):
        async with self._lock:  # ‚úÖ Locked
            self.active_connections.append(websocket)
```

**Cursor Command:**
```
Find race conditions in async functions modifying shared state
```

---

## 8. üì¶ Missing Dependency Imports

### Pattern: Import Errors
**Search for:**
```python
# Imports that might not exist
from.*import.*sklearn  # Check requirements.txt
from.*import.*ta  # Check requirements.txt
```

**Check:**
1. Is the package in `requirements.txt` or `package.json`?
2. Is the version pinned?
3. Are there any typos in the import name?

**Cursor Command:**
```
Verify all imports exist in requirements.txt or package.json
```

---

## 9. üåê Missing CORS Headers

### Pattern: API Routes Without CORS
**Search for:**
```python
# FastAPI routers without CORS middleware
@router\.(get|post)
(?!.*CORSMiddleware)
```

**Example Bad Code:**
```python
# ‚ùå No CORS (browser will block)
from fastapi import APIRouter

router = APIRouter()

@router.get("/api/data")
async def get_data():
    return {"data": "value"}
```

**Example Good Code:**
```python
# ‚úÖ CORS enabled
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://yourfrontend.com"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

**Cursor Command:**
```
Check if CORS is properly configured for all API routes
```

---

## 10. üîê Missing Authentication Checks

### Pattern: Public Endpoints That Should Be Protected
**Search for:**
```python
# Routes without Depends(get_current_user)
@router\.(post|put|delete)\(
(?!.*Depends\(get_current_user)
```

**Example Bad Code:**
```python
# ‚ùå No authentication (anyone can delete!)
@router.delete("/api/positions/{id}")
async def delete_position(id: int):
    db.delete(id)
```

**Example Good Code:**
```python
# ‚úÖ Authentication required
from fastapi import Depends
from ..core.auth import get_current_user

@router.delete("/api/positions/{id}")
async def delete_position(
    id: int, 
    current_user: User = Depends(get_current_user)
):
    # Verify ownership
    if position.user_id != current_user.id:
        raise HTTPException(403, "Not authorized")
    db.delete(id)
```

**Cursor Command:**
```
Find all POST/PUT/DELETE endpoints without authentication
```

---

## 11. üêõ Unhandled Promise Rejections (Frontend)

### Pattern: Async Functions Without Catch
**Search for:**
```typescript
// Async calls without .catch() or try/catch
fetch\(.*\)(?!.*catch)
axios\.(get|post).*(?!.*catch)
```

**Example Bad Code:**
```typescript
// ‚ùå Unhandled rejection
async function loadData() {
  const response = await fetch('/api/data');
  const data = await response.json();
  setData(data);
}
```

**Example Good Code:**
```typescript
// ‚úÖ Handled rejection
async function loadData() {
  try {
    const response = await fetch('/api/data');
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    const data = await response.json();
    setData(data);
  } catch (error) {
    console.error('Failed to load data:', error);
    setError(error.message);
  }
}
```

**Cursor Command:**
```
Find all fetch/axios calls without error handling
```

---

## 12. ‚è±Ô∏è Infinite Loop Risks

### Pattern: UseEffect Without Dependencies
**Search for:**
```typescript
// useEffect that might cause infinite renders
useEffect\(\(\) => \{[^}]*setState[^}]*\}\);
```

**Example Bad Code:**
```typescript
// ‚ùå Infinite loop
useEffect(() => {
  setCount(count + 1);  // ‚ùå Re-renders forever
});
```

**Example Good Code:**
```typescript
// ‚úÖ Controlled effect
useEffect(() => {
  fetchData();
}, [symbol]);  // ‚úÖ Only runs when symbol changes
```

**Cursor Command:**
```
Find useEffect hooks that might cause infinite renders
```

---

## 13. üìù Database Migrations Without Rollback

### Pattern: Alembic Migrations Missing Downgrade
**Search for:**
```python
# Migration files without proper downgrade
def upgrade\(\):
.*
def downgrade\(\):
.*pass  # ‚ùå Empty downgrade
```

**Cursor Command:**
```
Check all database migrations have proper rollback procedures
```

---

## 14. üßü Zombie Process Patterns

### Pattern: Improper Process Spawning
**Search for:**
```powershell
# PowerShell processes without PID tracking
Start-Process.*(?!.*Start-ManagedProcess)
Start-Job.*(?!.*ProcessManager)
```

```bash
# Bash processes without proper signal handling
command.*&(?!.*wait)
uvicorn.*&(?!.*trap)
```

```python
# Python subprocess without timeout
subprocess\.run\((?!.*timeout)
subprocess\.Popen\((?!.*timeout)
```

```typescript
# TypeScript execSync without timeout
execSync\(.*(?!.*timeout)
```

**Example Bad Code:**
```powershell
# ‚ùå No PID tracking
Start-Process powershell -ArgumentList "-Command", "uvicorn app.main:app"
```

```bash
# ‚ùå No signal handling
uvicorn app.main:app &
```

```python
# ‚ùå No timeout
result = subprocess.run(["git", "diff"], capture_output=True)
```

**Example Good Code:**
```powershell
# ‚úÖ Managed process
$pid = Start-ManagedProcess -Name "backend" -Command "uvicorn app.main:app"
```

```bash
# ‚úÖ Signal handling
uvicorn app.main:app &
UVICORN_PID=$!
trap 'kill -TERM $UVICORN_PID' EXIT
wait $UVICORN_PID
```

```python
# ‚úÖ With timeout
result = subprocess.run(
    ["git", "diff"], 
    capture_output=True, 
    timeout=30,
    check=True
)
```

**Cursor Command:**
```
Find all process spawning patterns that don't use proper PID tracking
```

---

## 15. üîÑ Missing Process Cleanup

### Pattern: No Cleanup Handlers
**Search for:**
```powershell
# PowerShell without cleanup
Start-Process.*(?!.*Register-EngineEvent)
```

```bash
# Bash without trap handlers
uvicorn.*(?!.*trap)
```

```typescript
# TypeScript without cleanup
execSync.*(?!.*finally)
```

**Example Bad Code:**
```powershell
# ‚ùå No cleanup
Start-Process powershell -ArgumentList "-Command", "uvicorn app.main:app"
# Process continues running after script exits
```

**Example Good Code:**
```powershell
# ‚úÖ With cleanup
Register-EngineEvent -SourceIdentifier PowerShell.Exiting -Action {
    Stop-ManagedProcess -Name "backend"
}
```

**Cursor Command:**
```
Find all process spawning without cleanup handlers
```

---

## 16. üéØ Port Conflicts

### Pattern: Port Binding Without Cleanup
**Search for:**
```powershell
# Port usage without cleanup
Get-NetTCPConnection.*(?!.*Stop-Process)
```

```bash
# Port usage without cleanup
lsof.*(?!.*kill)
netstat.*(?!.*kill)
```

**Example Bad Code:**
```powershell
# ‚ùå No port cleanup
$connections = Get-NetTCPConnection -LocalPort 8001
# Port remains occupied
```

**Example Good Code:**
```powershell
# ‚úÖ Port cleanup
$connections = Get-NetTCPConnection -LocalPort 8001
foreach ($conn in $connections) {
    Stop-Process -Id $conn.OwningProcess -Force
}
```

**Cursor Command:**
```
Find all port usage without proper cleanup procedures
```

---

## üöÄ How to Use These Checks

### Daily (Before Committing)
1. Open Cursor AI chat
2. Paste: "Check this file against `.cursorrules-checks` patterns 1-5"
3. Fix any issues found

### Weekly (Code Review)
1. Run search patterns across codebase
2. Create tickets for any matches
3. Prioritize critical issues

### Before Major Release
1. Run ALL 16 checks
2. Verify no critical issues
3. Document any accepted risks

---

## üìä Tracking Your Progress

Create a checklist:
```markdown
Week of [DATE]:
- [ ] Pattern 1: API endpoint errors - 0 found
- [ ] Pattern 2: Float in financials - 3 found, 3 fixed
- [ ] Pattern 3: SQL injection - 0 found
- [ ] Pattern 4: Exposed secrets - 1 found, 1 fixed
- [ ] Pattern 5: Missing timeouts - 5 found, 5 fixed
- [ ] Pattern 14: Zombie processes - 2 found, 2 fixed
- [ ] Pattern 15: Missing cleanup - 1 found, 1 fixed
- [ ] Pattern 16: Port conflicts - 0 found
...
```

---

*These patterns evolved from real bugs in PaiiD. Keep this updated as you find new issues!* üõ°Ô∏è
