name: 🧪 Comprehensive Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - backend
          - frontend
          - integration
          - security

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'

jobs:
  # Backend Testing
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'backend' || github.event.inputs.test_type == '' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_paiid
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📥 Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: 🔧 Set Environment Variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_paiid" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "API_TOKEN=test-token-123" >> $GITHUB_ENV
          echo "ANTHROPIC_API_KEY=test-key" >> $GITHUB_ENV
          echo "TRADIER_API_KEY=test-key" >> $GITHUB_ENV
          echo "TRADIER_ACCOUNT_ID=test-account" >> $GITHUB_ENV

      - name: 🗄️ Initialize Database
        working-directory: ./backend
        run: |
          python -c "
          from app.db.session import engine
          from app.models.database import Base
          Base.metadata.create_all(bind=engine)
          print('Database initialized successfully')
          "

      - name: 🧪 Run Backend Tests
        working-directory: ./backend
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: 📋 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/test-results.xml
            backend/htmlcov/

  # Frontend Testing
  frontend-tests:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'frontend' || github.event.inputs.test_type == '' }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Lint Check
        working-directory: ./frontend
        run: npm run lint

      - name: 🧪 Run Unit Tests
        working-directory: ./frontend
        run: npm run test:ci

      - name: 🎭 Run Playwright Tests
        working-directory: ./frontend
        run: |
          npx playwright install --with-deps
          npm run playwright:test:ci

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/playwright-report/

  # Integration Testing
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == '' }}
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_paiid
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Backend Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📦 Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔧 Set Environment Variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_paiid" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "API_TOKEN=test-token-123" >> $GITHUB_ENV

      - name: 🗄️ Initialize Database
        working-directory: ./backend
        run: |
          python -c "
          from app.db.session import engine
          from app.models.database import Base
          Base.metadata.create_all(bind=engine)
          print('Database initialized successfully')
          "

      - name: 🚀 Start Backend
        working-directory: ./backend
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          curl -f http://localhost:8000/api/health || exit 1

      - name: 🏗️ Build Frontend
        working-directory: ./frontend
        run: npm run build

      - name: 🚀 Start Frontend
        working-directory: ./frontend
        run: |
          npm start &
          sleep 15
          curl -f http://localhost:3000 || exit 1

      - name: 🧪 Run Integration Tests
        run: |
          # Test API endpoints
          curl -f http://localhost:8000/api/health
          curl -f http://localhost:8000/api/ready
          
          # Test frontend-backend connection
          curl -f http://localhost:3000/api/proxy/api/health
          
          # Test authentication flow
          curl -X POST http://localhost:8000/api/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email": "test@example.com", "password": "TestPass123", "full_name": "Test User"}'

  # Security Testing
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security' || github.event.inputs.test_type == '' }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔒 Run Security Scan
        run: |
          pip install bandit safety
          bandit -r backend/ -f json -o security-report.json || true
          safety check --json --output security-report.json || true

      - name: 📊 Upload Security Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: security-report.json

  # Performance Testing
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == '' }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: 🚀 Start Backend
        working-directory: ./backend
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: ⚡ Run Load Tests
        run: |
          # Create simple load test
          cat > load_test.py << 'EOF'
          from locust import HttpUser, task, between
          
          class PaiiDUser(HttpUser):
              wait_time = between(1, 3)
              
              @task
              def health_check(self):
                  self.client.get("/api/health")
              
              @task
              def ready_check(self):
                  self.client.get("/api/ready")
          EOF
          
          locust -f load_test.py --headless -u 10 -r 2 -t 30s --html performance-report.html

      - name: 📊 Upload Performance Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report
          path: performance-report.html

  # Test Summary
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-tests, performance-tests]
    if: always()
    
    steps:
      - name: 📊 Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./test-results

      - name: 📋 Generate Test Summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Backend coverage available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend coverage available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Security & Performance" >> $GITHUB_STEP_SUMMARY
          echo "- Security scan results available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Performance test results available in artifacts" >> $GITHUB_STEP_SUMMARY
