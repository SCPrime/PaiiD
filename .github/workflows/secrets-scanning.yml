name: Secrets Scanning

# ====================================
# SECRETS SCANNING WORKFLOW
# ====================================
# Automated detection of hardcoded secrets in codebase
# Runs on every push and pull request to prevent secret leaks
#
# Tools Used:
#   - detect-secrets (Yelp) - Scans for hardcoded API keys, passwords, tokens
#   - Baseline file (.secrets.baseline) - Tracks known false positives
#
# Failure Scenarios:
#   - New secrets detected (not in baseline)
#   - Secrets in commit messages or file names
#   - High entropy strings that appear to be secrets
#
# How to Update Baseline:
#   1. Review detected secrets locally
#   2. If false positives, update baseline: detect-secrets scan --baseline .secrets.baseline
#   3. Commit updated baseline in separate PR
#   4. Document why secrets are false positives

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  # Allow manual trigger for re-scanning
  workflow_dispatch:

jobs:
  detect-secrets:
    name: Scan for Hardcoded Secrets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better secret detection
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install detect-secrets
        run: |
          pip install --upgrade pip
          pip install detect-secrets==1.4.0

      - name: Verify baseline file exists
        run: |
          if [ ! -f .secrets.baseline ]; then
            echo "ERROR: .secrets.baseline file not found!"
            echo "Generate it with: detect-secrets scan > .secrets.baseline"
            exit 1
          fi
          echo "Baseline file found: .secrets.baseline"

      - name: Run detect-secrets scan
        run: |
          echo "Scanning repository for hardcoded secrets..."
          detect-secrets scan --baseline .secrets.baseline

      - name: Audit baseline results
        run: |
          echo "Auditing baseline against current scan..."
          detect-secrets audit .secrets.baseline
        continue-on-error: true

      - name: Check for new secrets
        run: |
          echo "Checking for secrets not in baseline..."
          # Scan without baseline to find new secrets
          NEW_SECRETS=$(detect-secrets scan 2>&1)

          # Compare with baseline
          BASELINE_COUNT=$(jq '.results | length' .secrets.baseline)
          echo "Baseline contains $BASELINE_COUNT file(s) with known false positives"

          # Exit with error if new secrets found (will need manual review)
          if detect-secrets scan --baseline .secrets.baseline | grep -q "potential secret"; then
            echo "ERROR: New secrets detected! Review and update baseline if false positives."
            exit 1
          fi

          echo "No new secrets detected - all clear!"

      - name: Security Report
        if: always()
        run: |
          echo "==================================="
          echo "SECRETS SCANNING SECURITY REPORT"
          echo "==================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo ""
          echo "Scan completed at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "Baseline statistics:"
          jq -r '.results | to_entries | .[] | "\(.key): \(.value | length) potential secret(s)"' .secrets.baseline
          echo ""
          echo "For false positives, update baseline:"
          echo "  detect-secrets scan --baseline .secrets.baseline"
          echo "==================================="

  # Additional check: Scan commit messages for secrets
  commit-message-scan:
    name: Scan Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Check commit messages for secrets
        run: |
          echo "Scanning last 10 commit messages for potential secrets..."

          # Common secret patterns in commit messages
          PATTERNS=(
            "password"
            "api[_-]?key"
            "secret"
            "token"
            "credentials"
            "auth"
          )

          FOUND=0
          for pattern in "${PATTERNS[@]}"; do
            if git log -10 --pretty=format:"%H %s %b" | grep -iE "$pattern"; then
              echo "WARNING: Commit message contains '$pattern' - review for exposed secrets"
              FOUND=1
            fi
          done

          if [ $FOUND -eq 1 ]; then
            echo ""
            echo "SECURITY WARNING: Commit messages may contain sensitive information."
            echo "Review recent commits and rotate any exposed secrets immediately."
            echo "Consider using git filter-branch to rewrite history if secrets were exposed."
            exit 1
          fi

          echo "Commit messages appear clean."

  # Check for common secret file patterns
  secret-files-check:
    name: Check for Secret Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for unignored secret files
        run: |
          echo "Checking for secret files that should be gitignored..."

          # Files that should NEVER be committed
          DANGEROUS_FILES=(
            ".env"
            "*.env.production"
            "*.env.local"
            "credentials.json"
            "secrets.json"
            "*.key"
            "*.pem"
            "*.p12"
            "*.pfx"
          )

          FOUND=0
          for pattern in "${DANGEROUS_FILES[@]}"; do
            if find . -name "$pattern" -not -path "*/node_modules/*" -not -path "*/.git/*" | grep -q .; then
              echo "ERROR: Found secret file matching: $pattern"
              find . -name "$pattern" -not -path "*/node_modules/*" -not -path "*/.git/*"
              FOUND=1
            fi
          done

          if [ $FOUND -eq 1 ]; then
            echo ""
            echo "CRITICAL SECURITY ERROR: Secret files found in repository!"
            echo "These files should be in .gitignore and removed from git history."
            echo ""
            echo "Immediate actions:"
            echo "1. Add files to .gitignore"
            echo "2. Rotate all exposed secrets"
            echo "3. Use 'git filter-branch' or BFG Repo-Cleaner to remove from history"
            echo "4. Force push to remote (coordinate with team)"
            exit 1
          fi

          echo "No secret files found - good!"

      - name: Verify .gitignore includes secret patterns
        run: |
          echo "Verifying .gitignore contains secret patterns..."

          REQUIRED_PATTERNS=(
            ".env"
            ".env.local"
            "*.key"
            "*.pem"
            "secrets.json"
            "credentials.json"
          )

          MISSING=0
          for pattern in "${REQUIRED_PATTERNS[@]}"; do
            if ! grep -q "$pattern" .gitignore; then
              echo "WARNING: .gitignore missing pattern: $pattern"
              MISSING=1
            fi
          done

          if [ $MISSING -eq 1 ]; then
            echo ""
            echo "Update .gitignore to include all secret patterns."
          else
            echo ".gitignore properly configured for secrets."
          fi
