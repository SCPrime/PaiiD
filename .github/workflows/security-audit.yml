name: Security Audit

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  pip-audit:
    name: Python Dependency Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Populate internal mirror
        run: |
          cd backend/pypi-mirror
          chmod +x scripts/download-packages.sh
          ./scripts/download-packages.sh

      - name: Start internal mirror server
        run: |
          cd backend/pypi-mirror
          python scripts/serve-mirror.py --port 8080 --host 127.0.0.1 &
          echo $! > /tmp/mirror-server.pid
          sleep 5

      - name: Verify mirror is accessible
        run: |
          curl -f http://localhost:8080/ || {
            echo "❌ Mirror server is not accessible"
            exit 1
          }
          echo "✅ Mirror server is running"

      - name: Configure pip to use internal mirror
        run: |
          # Set environment variables for pip
          echo "PIP_INDEX_URL=http://localhost:8080/" >> $GITHUB_ENV
          echo "PIP_TRUSTED_HOST=localhost" >> $GITHUB_ENV
          echo "PIP_EXTRA_INDEX_URL=https://pypi.org/simple" >> $GITHUB_ENV
          echo "PIP_DISABLE_PIP_VERSION_CHECK=1" >> $GITHUB_ENV

      - name: Install pip-audit from mirror
        run: |
          pip install -v pip-audit
          pip-audit --version

      - name: Run pip-audit on backend dependencies
        id: audit
        continue-on-error: true
        run: |
          cd backend
          pip-audit -r requirements.txt \
            --format json \
            --output pip-audit-report.json

      - name: Display audit results
        if: always()
        run: |
          cd backend
          if [ -f pip-audit-report.json ]; then
            echo "📊 Audit Results:"
            pip-audit -r requirements.txt || true
          else
            echo "⚠️ No audit report generated"
          fi

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: backend/pip-audit-report.json
          retention-days: 30

      - name: Stop mirror server
        if: always()
        run: |
          if [ -f /tmp/mirror-server.pid ]; then
            kill $(cat /tmp/mirror-server.pid) || true
          fi

      - name: Comment on PR (if vulnerabilities found)
        if: |
          github.event_name == 'pull_request' &&
          steps.audit.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'backend/pip-audit-report.json';

            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

              let comment = '## 🔒 Security Audit Results\n\n';
              comment += '⚠️ **Vulnerabilities detected in Python dependencies**\n\n';

              // Add summary
              if (report.vulnerabilities) {
                comment += `Found ${report.vulnerabilities.length} vulnerabilities\n\n`;
                comment += '### Details\n\n';

                for (const vuln of report.vulnerabilities.slice(0, 5)) {
                  comment += `- **${vuln.name}** ${vuln.version}\n`;
                  comment += `  - ${vuln.description || 'No description'}\n`;
                  comment += `  - Fix: Upgrade to ${vuln.fix_versions?.[0] || 'latest'}\n\n`;
                }

                if (report.vulnerabilities.length > 5) {
                  comment += `... and ${report.vulnerabilities.length - 5} more\n\n`;
                }
              }

              comment += '\n---\n';
              comment += '🤖 Generated by pip-audit via internal mirror\n';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  verify-mirror:
    name: Verify Internal Mirror Setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Populate mirror
        run: |
          cd backend/pypi-mirror
          chmod +x scripts/download-packages.sh
          ./scripts/download-packages.sh

      - name: Run mirror verification
        run: |
          cd backend/pypi-mirror
          chmod +x scripts/verify-mirror.sh
          ./scripts/verify-mirror.sh

      - name: Upload verification logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mirror-verification
          path: /tmp/pip-*.log
          retention-days: 7
