name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linter
        run: |
          cd frontend
          npm run lint || true

      - name: Run type check
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Run tests
        run: |
          cd frontend
          npm run test:ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_TOKEN: ${{ secrets.NEXT_PUBLIC_API_TOKEN }}
          NEXT_PUBLIC_BACKEND_API_BASE_URL: https://paiid-backend.onrender.com

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run ruff linter
        run: |
          cd backend
          pip install ruff
          ruff check . || true

      - name: Run type check
        run: |
          cd backend
          pip install mypy
          mypy app || true

      - name: Run tests
        run: |
          cd backend
          pip install pytest pytest-cov pytest-asyncio
          pytest tests/ --cov=app --cov-report=xml || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [frontend-test, backend-test]

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Render (Preview)
        run: |
          echo "üöÄ Preview deployment would trigger here"
          echo "PR #${{ github.event.pull_request.number }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [frontend-test, backend-test, security-scan]

    steps:
      - uses: actions/checkout@v4

      - name: Trigger Render Deploy (Frontend)
        run: |
          curl -X POST ${{ secrets.RENDER_FRONTEND_DEPLOY_HOOK }}

      - name: Trigger Render Deploy (Backend)
        run: |
          curl -X POST ${{ secrets.RENDER_BACKEND_DEPLOY_HOOK }}

      - name: Wait for deployment
        run: sleep 60

      - name: Health check (Frontend)
        run: |
          curl -f https://paiid-frontend.onrender.com || exit 1

      - name: Health check (Backend)
        run: |
          curl -f https://paiid-backend.onrender.com/api/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "Frontend: https://paiid-frontend.onrender.com"
          echo "Backend: https://paiid-backend.onrender.com"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          exit 1

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://paiid-frontend.onrender.com
          uploadArtifacts: true
          temporaryPublicStorage: true
