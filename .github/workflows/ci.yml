name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones disabled for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Verify Python package structure
      run: |
        echo "üîç Checking Python package structure..."

        # Check for missing __init__.py files
        missing_init=()
        for dir in backend/app/*/; do
          if [ -d "$dir" ] && [ ! -f "$dir/__init__.py" ]; then
            # Skip __pycache__ directories
            if [[ $(basename "$dir") != __* ]]; then
              # Check if directory contains .py files
              py_count=$(find "$dir" -maxdepth 1 -name "*.py" 2>/dev/null | wc -l)
              if [ "$py_count" -gt 0 ]; then
                missing_init+=("$dir")
              fi
            fi
          fi
        done

        if [ ${#missing_init[@]} -gt 0 ]; then
          echo "‚ùå ERROR: Missing __init__.py files in:"
          printf '  %s\n' "${missing_init[@]}"
          echo ""
          echo "Python requires __init__.py files to treat directories as packages."
          exit 1
        fi

        echo "‚úÖ All Python packages have __init__.py files"

    - name: Run import verification tests
      run: |
        cd backend
        echo "üß™ Running import verification tests..."
        python -m pytest tests/test_imports.py -v --tb=short
        echo "‚úÖ All critical imports verified"

    - name: Run backend tests with coverage
      run: |
        cd backend
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

    - name: Lint backend code
      continue-on-error: true
      run: |
        cd backend
        pip install flake8
        flake8 app/ --max-line-length=100

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage.xml

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones disabled for better analysis

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests with coverage
      run: |
        cd frontend
        npm run test:ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_BACKEND_API_BASE_URL: https://paiid-backend.onrender.com
        NEXT_PUBLIC_API_TOKEN: ${{ secrets.API_TOKEN }}

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/lcov.info

  sonar-backend:
    runs-on: ubuntu-latest
    needs: test-backend
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for blame information

    - name: Download coverage artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage
        path: backend/

    - name: SonarCloud Scan - Backend
      uses: SonarSource/sonarqube-scan-action@v6
      with:
        projectBaseDir: backend
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io

  sonar-frontend:
    runs-on: ubuntu-latest
    needs: test-frontend
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for blame information

    - name: Download coverage artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

    - name: SonarCloud Scan - Frontend
      uses: SonarSource/sonarqube-scan-action@v6
      with:
        projectBaseDir: frontend
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io