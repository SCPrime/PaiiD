name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  prelaunch-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run pre-launch validation
        run: |
          cd backend
          python -m app.core.prelaunch --check-only

  uvicorn-smoke-test:
    runs-on: ubuntu-latest
    needs: prelaunch-validation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Start uvicorn
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8001 &
          sleep 10

      - name: Test health endpoint
        run: curl -f http://localhost:8001/api/health

  playwright-tests:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          cd frontend
          npm run playwright:test:ci

  render-config-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Validate Render configs
        run: |
          python infra/render/validate.py backend/render.yaml infra/render/backend.json
          python infra/render/validate.py render.yaml

  test-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Verify Python package structure
        run: |
          echo "🔍 Checking Python package structure..."

          # Check for missing __init__.py files
          missing_init=()
          for dir in backend/app/*/; do
            if [ -d "$dir" ] && [ ! -f "$dir/__init__.py" ]; then
              # Skip __pycache__ directories
              if [[ $(basename "$dir") != __* ]]; then
                # Check if directory contains .py files
                py_count=$(find "$dir" -maxdepth 1 -name "*.py" 2>/dev/null | wc -l)
                if [ "$py_count" -gt 0 ]; then
                  missing_init+=("$dir")
                fi
              fi
            fi
          done

          if [ ${#missing_init[@]} -gt 0 ]; then
            echo "❌ ERROR: Missing __init__.py files in:"
            printf '  %s\n' "${missing_init[@]}"
            echo ""
            echo "Python requires __init__.py files to treat directories as packages."
            exit 1
          fi

          echo "✅ All Python packages have __init__.py files"

      - name: Run import verification tests
        run: |
          cd backend
          echo "🧪 Running import verification tests..."
          python -m pytest tests/test_imports.py -v --tb=short
          echo "✅ All critical imports verified"

      - name: Run backend tests with coverage
        run: |
          cd backend
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Install code quality tools
        run: |
          cd backend
          pip install black isort mypy pylint bandit flake8

      - name: Check code formatting with Black
        run: |
          cd backend
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          cd backend
          isort --check-only --diff .

      - name: Type check with mypy
        continue-on-error: true
        run: |
          cd backend
          mypy app/ || echo "mypy found type issues (non-blocking)"

      - name: Lint with pylint
        continue-on-error: true
        run: |
          cd backend
          pylint app/ --max-line-length=100 || echo "pylint found issues (non-blocking)"

      - name: Security scan with bandit
        run: |
          cd backend
          bandit -r app/ -c .bandit

      - name: Lint with flake8
        continue-on-error: true
        run: |
          cd backend
          flake8 app/ --max-line-length=100

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.xml

  security-audit-dependencies:
    name: Security Audit - Python Dependencies (pip-audit)
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Populate internal mirror
        run: |
          cd backend/pypi-mirror
          chmod +x scripts/download-packages.sh
          ./scripts/download-packages.sh

      - name: Start internal mirror server
        run: |
          cd backend/pypi-mirror
          python scripts/serve-mirror.py --port 8080 --host 127.0.0.1 &
          echo $! > /tmp/mirror-server.pid
          sleep 5

      - name: Verify mirror is accessible
        run: |
          curl -f http://localhost:8080/ || {
            echo "❌ Mirror server is not accessible"
            exit 1
          }
          echo "✅ Mirror server is running"

      - name: Configure pip to use internal mirror
        run: |
          echo "PIP_INDEX_URL=http://localhost:8080/" >> $GITHUB_ENV
          echo "PIP_TRUSTED_HOST=localhost" >> $GITHUB_ENV
          echo "PIP_EXTRA_INDEX_URL=https://pypi.org/simple" >> $GITHUB_ENV
          echo "PIP_DISABLE_PIP_VERSION_CHECK=1" >> $GITHUB_ENV

      - name: Install pip-audit from mirror
        run: |
          pip install -v pip-audit
          pip-audit --version

      - name: Run pip-audit on backend dependencies
        id: audit
        continue-on-error: true
        run: |
          cd backend
          pip-audit -r requirements.txt \
            --format json \
            --output pip-audit-report.json

      - name: Display audit results
        if: always()
        run: |
          cd backend
          if [ -f pip-audit-report.json ]; then
            echo "📊 Audit Results:"
            pip-audit -r requirements.txt || true
          else
            echo "⚠️ No audit report generated"
          fi

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: backend/pip-audit-report.json
          retention-days: 90

      - name: Stop mirror server
        if: always()
        run: |
          if [ -f /tmp/mirror-server.pid ]; then
            kill $(cat /tmp/mirror-server.pid) || true
          fi

      - name: Comment on PR (if vulnerabilities found)
        if: |
          github.event_name == 'pull_request' &&
          steps.audit.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'backend/pip-audit-report.json';

            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

              let comment = '## 🔒 Security Audit Results\n\n';
              comment += '⚠️ **Vulnerabilities detected in Python dependencies**\n\n';

              if (report.dependencies) {
                const vulnDeps = report.dependencies.filter(d => d.vulns && d.vulns.length > 0);
                comment += `Found vulnerabilities in ${vulnDeps.length} package(s)\n\n`;
                comment += '### Details\n\n';

                for (const dep of vulnDeps.slice(0, 5)) {
                  comment += `#### ${dep.name} ${dep.version}\n`;
                  for (const vuln of dep.vulns) {
                    comment += `- **${vuln.id}** ${vuln.aliases ? vuln.aliases.join(', ') : ''}\n`;
                    comment += `  - ${vuln.description || 'No description'}\n`;
                    if (vuln.fix_versions && vuln.fix_versions.length > 0) {
                      comment += `  - Fix: Upgrade to ${vuln.fix_versions.join(', ')}\n`;
                    }
                    comment += '\n';
                  }
                }

                if (vulnDeps.length > 5) {
                  comment += `... and ${vulnDeps.length - 5} more package(s) with vulnerabilities\n\n`;
                }
              }

              comment += '\n---\n';
              comment += '🤖 Generated by pip-audit via internal mirror\n';
              comment += '📥 Download full report from workflow artifacts\n';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones disabled for better analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint frontend code with ESLint
        run: |
          cd frontend
          npm run lint

      - name: Check code formatting with Prettier
        run: |
          cd frontend
          npm run format:check

      - name: Run frontend tests with coverage
        run: |
          cd frontend
          npm run test:ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_BACKEND_API_BASE_URL: https://paiid-backend.onrender.com
          NEXT_PUBLIC_API_TOKEN: ${{ secrets.API_TOKEN }}

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/lcov.info

  sonar-backend:
    runs-on: ubuntu-latest
    needs: test-backend
    continue-on-error: true # Don't fail CI if SonarCloud is misconfigured
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for blame information

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: backend/

      - name: SonarCloud Scan - Backend
        uses: SonarSource/sonarqube-scan-action@v6
        with:
          projectBaseDir: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  sonar-frontend:
    runs-on: ubuntu-latest
    needs: test-frontend
    continue-on-error: true # Don't fail CI if SonarCloud is misconfigured
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for blame information

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

  deployment-verification:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, playwright-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_BACKEND_API_BASE_URL: https://paiid-backend.onrender.com
          NEXT_PUBLIC_API_TOKEN: ${{ secrets.API_TOKEN }}

      - name: Start backend
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8001 &
          sleep 15

      - name: Start frontend
        run: |
          cd frontend
          npm run start &
          sleep 10

      - name: Run deployment verification
        run: |
          chmod +x scripts/verify-deployment.sh
          ./scripts/verify-deployment.sh \
            --backend-url "http://localhost:8001" \
            --frontend-url "http://localhost:3000" \
            --verbose

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-verification-report
          path: |
            deployment-report-*.md
            verification-*.log

      - name: SonarCloud Scan - Frontend
        uses: SonarSource/sonarqube-scan-action@v6
        with:
          projectBaseDir: frontend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
