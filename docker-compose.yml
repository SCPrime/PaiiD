version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: paiid-postgres
    environment:
      POSTGRES_USER: paiid_user
      POSTGRES_PASSWORD: paiid_dev_password_123
      POSTGRES_DB: paiid_trading
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U paiid_user -d paiid_trading"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - paiid-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: paiid-backend
    environment:
      - DATABASE_URL=postgresql://paiid_user:paiid_dev_password_123@postgres:5432/paiid_trading
      - API_TOKEN=${API_TOKEN}
      - ALPACA_PAPER_API_KEY=${ALPACA_PAPER_API_KEY}
      - ALPACA_PAPER_SECRET_KEY=${ALPACA_PAPER_SECRET_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ALLOW_ORIGIN=http://localhost:3000
    ports:
      - "4000:8001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/__pycache__
    networks:
      - paiid-network
    command: bash -lc "python -m app.core.prelaunch && uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: paiid-frontend
    environment:
      - NEXT_PUBLIC_API_TOKEN=${API_TOKEN}
      - NEXT_PUBLIC_BACKEND_API_BASE_URL=http://backend:8001
      - NEXT_PUBLIC_ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - paiid-network
    command: npm run dev

networks:
  paiid-network:
    driver: bridge

volumes:
  postgres_data:
