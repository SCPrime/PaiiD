[{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\__tests__\\services\\telemetry.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\app\\monitor\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\AIAnalysisModal.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAnalysis'. Either include it or remove the dependency array.","line":99,"column":6,"nodeType":"ArrayExpression","endLine":99,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAnalysis, isOpen, symbol]","fix":{"range":[2511,2527],"text":"[fetchAnalysis, isOpen, symbol]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\AIChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\AIChatBot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\AIChatInterface.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":170,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5522,5554],"text":"Hi! I&apos;m your PaiiD AI assistant."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5522,5554],"text":"Hi! I&lsquo;m your PaiiD AI assistant."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5522,5554],"text":"Hi! I&#39;m your PaiiD AI assistant."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5522,5554],"text":"Hi! I&rsquo;m your PaiiD AI assistant."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useWebSocket } from \"../hooks/useWebSocket\";\r\nimport EnhancedCard from \"./ui/EnhancedCard\";\r\nimport StatusIndicator from \"./ui/StatusIndicator\";\r\n\r\ninterface AIChatInterfaceProps {\r\n  userId: string;\r\n  className?: string;\r\n  isOpen?: boolean;\r\n  onClose?: () => void;\r\n}\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  type: \"user\" | \"ai\";\r\n  message: string;\r\n  timestamp: string;\r\n  confidence?: number;\r\n  suggested_actions?: string[];\r\n}\r\n\r\nconst AIChatInterface: React.FC<AIChatInterfaceProps> = ({\r\n  userId,\r\n  className,\r\n  isOpen = true,\r\n  onClose,\r\n}) => {\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const { isConnected: wsConnected, sendMessage: _sendMessage } = useWebSocket({\r\n    url: process.env.NEXT_PUBLIC_WS_URL || \"ws://localhost:8000/ws\",\r\n    userId,\r\n    autoConnect: true,\r\n  });\r\n\r\n  // Scroll to bottom when new messages arrive\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  // Update connection status\r\n  useEffect(() => {\r\n    setIsConnected(wsConnected);\r\n  }, [wsConnected]);\r\n\r\n  const sendChatMessage = async (message: string) => {\r\n    if (!message.trim() || isLoading) return;\r\n\r\n    const userMessage: ChatMessage = {\r\n      id: Date.now().toString(),\r\n      type: \"user\",\r\n      message: message.trim(),\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setInputMessage(\"\");\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Send message to AI service\r\n      const response = await fetch(\"/api/ai/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          user_id: userId,\r\n          message: message.trim(),\r\n          context: {\r\n            user_id: userId,\r\n            timestamp: new Date().toISOString(),\r\n            market_status: \"open\",\r\n          },\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const aiMessage: ChatMessage = {\r\n          id: (Date.now() + 1).toString(),\r\n          type: \"ai\",\r\n          message: data.ai_response || \"I'm sorry, I couldn't process that request.\",\r\n          timestamp: data.timestamp,\r\n          confidence: data.confidence,\r\n          suggested_actions: data.suggested_actions,\r\n        };\r\n\r\n        setMessages((prev) => [...prev, aiMessage]);\r\n      } else {\r\n        throw new Error(\"Failed to get AI response\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error sending chat message:\", error);\r\n      const errorMessage: ChatMessage = {\r\n        id: (Date.now() + 1).toString(),\r\n        type: \"ai\",\r\n        message: \"I'm sorry, I encountered an error. Please try again.\",\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n      setMessages((prev) => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    sendChatMessage(inputMessage);\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendChatMessage(inputMessage);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={`fixed inset-0 z-50 flex items-center justify-center ${className}`}>\r\n      <div className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\" onClick={onClose} />\r\n\r\n      <EnhancedCard\r\n        variant=\"glass\"\r\n        size=\"xl\"\r\n        className=\"relative w-full max-w-4xl h-[80vh] flex flex-col\"\r\n      >\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-4 border-b border-slate-700/50\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\r\n              <span className=\"text-white font-bold text-sm\">AI</span>\r\n            </div>\r\n            <div>\r\n              <h2 className=\"text-white font-bold text-lg\">PaiiD AI Assistant</h2>\r\n              <div className=\"flex items-center gap-2\">\r\n                <StatusIndicator status={isConnected ? \"online\" : \"offline\"} size=\"sm\" />\r\n                <span className=\"text-xs text-slate-400\">\r\n                  {isConnected ? \"Connected\" : \"Disconnected\"}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <button onClick={onClose} className=\"text-slate-400 hover:text-white transition-colors\">\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Messages */}\r\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\r\n          {messages.length === 0 ? (\r\n            <div className=\"text-center text-slate-400 py-8\">\r\n              <div className=\"text-4xl mb-4\">≡ƒñû</div>\r\n              <p className=\"text-lg font-medium\">Hi! I'm your PaiiD AI assistant.</p>\r\n              <p className=\"text-sm mt-2\">\r\n                Ask me about market conditions, trading strategies, or portfolio analysis.\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            messages.map((message) => (\r\n              <div\r\n                key={message.id}\r\n                className={`flex ${message.type === \"user\" ? \"justify-end\" : \"justify-start\"}`}\r\n              >\r\n                <div\r\n                  className={`max-w-[80%] rounded-lg p-3 ${\r\n                    message.type === \"user\"\r\n                      ? \"bg-blue-500 text-white\"\r\n                      : \"bg-slate-700 text-slate-200\"\r\n                  }`}\r\n                >\r\n                  <div className=\"flex items-start gap-2\">\r\n                    {message.type === \"ai\" && (\r\n                      <div className=\"w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\r\n                        <span className=\"text-white text-xs font-bold\">AI</span>\r\n                      </div>\r\n                    )}\r\n                    <div className=\"flex-1\">\r\n                      <p className=\"text-sm\">{message.message}</p>\r\n                      {message.confidence && (\r\n                        <div className=\"text-xs text-slate-400 mt-1\">\r\n                          Confidence: {message.confidence}%\r\n                        </div>\r\n                      )}\r\n                      {message.suggested_actions && message.suggested_actions.length > 0 && (\r\n                        <div className=\"mt-2\">\r\n                          <p className=\"text-xs text-slate-400 mb-1\">Suggested actions:</p>\r\n                          <div className=\"flex flex-wrap gap-1\">\r\n                            {message.suggested_actions.map((action, index) => (\r\n                              <span\r\n                                key={index}\r\n                                className=\"text-xs bg-slate-600 text-slate-300 px-2 py-1 rounded\"\r\n                              >\r\n                                {action}\r\n                              </span>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n\r\n          {isLoading && (\r\n            <div className=\"flex justify-start\">\r\n              <div className=\"bg-slate-700 text-slate-200 rounded-lg p-3\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\r\n                    <span className=\"text-white text-xs font-bold\">AI</span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-bounce\" />\r\n                    <div\r\n                      className=\"w-2 h-2 bg-slate-400 rounded-full animate-bounce\"\r\n                      style={{ animationDelay: \"0.1s\" }}\r\n                    />\r\n                    <div\r\n                      className=\"w-2 h-2 bg-slate-400 rounded-full animate-bounce\"\r\n                      style={{ animationDelay: \"0.2s\" }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* Input */}\r\n        <div className=\"p-4 border-t border-slate-700/50\">\r\n          <form onSubmit={handleSubmit} className=\"flex gap-2\">\r\n            <input\r\n              type=\"text\"\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              placeholder=\"Ask me about the market...\"\r\n              className=\"flex-1 bg-slate-800 text-white placeholder-slate-400 border border-slate-600 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              disabled={isLoading}\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              disabled={!inputMessage.trim() || isLoading}\r\n              className=\"bg-blue-500 hover:bg-blue-600 disabled:bg-slate-600 disabled:cursor-not-allowed text-white px-4 py-2 rounded-lg transition-colors\"\r\n            >\r\n              {isLoading ? \"...\" : \"Send\"}\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </EnhancedCard>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIChatInterface;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\AIRecommendations.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRecommendations'. Either include it or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":88,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRecommendations, userId]","fix":{"range":[2505,2532],"text":"[fetchRecommendations, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":88,"column":15,"nodeType":"CallExpression","endLine":88,"endColumn":32},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRecommendations'. Either include it or remove the dependency array.","line":96,"column":6,"nodeType":"ArrayExpression","endLine":96,"endColumn":63,"suggestions":[{"desc":"Update the dependencies array to be: [autoRefresh, fetchRecommendations, refreshInterval, userId]","fix":{"range":[2733,2790],"text":"[autoRefresh, fetchRecommendations, refreshInterval, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":96,"column":45,"nodeType":"CallExpression","endLine":96,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { useWebSocket } from \"../hooks/useWebSocket\";\r\nimport AnimatedCounter from \"./ui/AnimatedCounter\";\r\nimport EnhancedCard from \"./ui/EnhancedCard\";\r\nimport StatusIndicator from \"./ui/StatusIndicator\";\r\n\r\ninterface AIRecommendationsProps {\r\n  userId: string;\r\n  className?: string;\r\n  symbols?: string[];\r\n  autoRefresh?: boolean;\r\n  refreshInterval?: number;\r\n}\r\n\r\ninterface Recommendation {\r\n  symbol: string;\r\n  action: \"buy\" | \"sell\" | \"hold\";\r\n  confidence: number;\r\n  reasoning: string;\r\n  price_target?: number;\r\n  time_horizon: string;\r\n  risk_level: \"low\" | \"medium\" | \"high\";\r\n}\r\n\r\ninterface RecommendationsData {\r\n  user_id: string;\r\n  buy_recommendations: Recommendation[];\r\n  sell_recommendations: Recommendation[];\r\n  hold_recommendations: Recommendation[];\r\n  overall_risk: string;\r\n  market_outlook: string;\r\n  timestamp: string;\r\n}\r\n\r\nconst AIRecommendations: React.FC<AIRecommendationsProps> = ({\r\n  userId,\r\n  className,\r\n  symbols = [\"AAPL\", \"MSFT\", \"GOOGL\", \"TSLA\"],\r\n  autoRefresh = true,\r\n  refreshInterval = 300000, // 5 minutes\r\n}) => {\r\n  const [recommendations, setRecommendations] = useState<RecommendationsData | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n\r\n  const { isConnected } = useWebSocket({\r\n    url: process.env.NEXT_PUBLIC_WS_URL || \"ws://localhost:8000/ws\",\r\n    userId,\r\n    autoConnect: true,\r\n  });\r\n\r\n  const fetchRecommendations = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(\"/api/ai/recommendations\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          user_id: userId,\r\n          symbols: symbols,\r\n          risk_tolerance: \"medium\",\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setRecommendations(data);\r\n        setLastUpdated(new Date());\r\n      } else {\r\n        throw new Error(\"Failed to fetch recommendations\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error fetching AI recommendations:\", err);\r\n      setError(\"Failed to load AI recommendations\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch recommendations on mount\r\n  useEffect(() => {\r\n    fetchRecommendations();\r\n  }, [userId, symbols.join(\",\")]);\r\n\r\n  // Auto-refresh\r\n  useEffect(() => {\r\n    if (!autoRefresh) return;\r\n\r\n    const interval = setInterval(fetchRecommendations, refreshInterval);\r\n    return () => clearInterval(interval);\r\n  }, [autoRefresh, refreshInterval, userId, symbols.join(\",\")]);\r\n\r\n  const getActionColor = (action: string) => {\r\n    switch (action) {\r\n      case \"buy\":\r\n        return \"text-green-400\";\r\n      case \"sell\":\r\n        return \"text-red-400\";\r\n      case \"hold\":\r\n        return \"text-yellow-400\";\r\n      default:\r\n        return \"text-slate-400\";\r\n    }\r\n  };\r\n\r\n  const getRiskColor = (risk: string) => {\r\n    switch (risk) {\r\n      case \"low\":\r\n        return \"text-green-400\";\r\n      case \"medium\":\r\n        return \"text-yellow-400\";\r\n      case \"high\":\r\n        return \"text-red-400\";\r\n      default:\r\n        return \"text-slate-400\";\r\n    }\r\n  };\r\n\r\n  const getConfidenceColor = (confidence: number) => {\r\n    if (confidence >= 80) return \"text-green-400\";\r\n    if (confidence >= 60) return \"text-yellow-400\";\r\n    return \"text-red-400\";\r\n  };\r\n\r\n  const RecommendationCard: React.FC<{ recommendation: Recommendation }> = ({ recommendation }) => (\r\n    <EnhancedCard variant=\"glass\" size=\"sm\" className=\"hover:scale-105 transition-transform\">\r\n      <div className=\"space-y-3\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <span className=\"font-mono font-bold text-white text-lg\">{recommendation.symbol}</span>\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className={`text-sm font-semibold ${getActionColor(recommendation.action)}`}>\r\n              {recommendation.action.toUpperCase()}\r\n            </span>\r\n            <StatusIndicator\r\n              status={recommendation.confidence >= 70 ? \"online\" : \"warning\"}\r\n              size=\"sm\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <span className=\"text-slate-400 text-sm\">Confidence</span>\r\n            <span\r\n              className={`text-sm font-semibold ${getConfidenceColor(recommendation.confidence)}`}\r\n            >\r\n              {recommendation.confidence}%\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <span className=\"text-slate-400 text-sm\">Risk Level</span>\r\n            <span className={`text-sm font-semibold ${getRiskColor(recommendation.risk_level)}`}>\r\n              {recommendation.risk_level.toUpperCase()}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <span className=\"text-slate-400 text-sm\">Time Horizon</span>\r\n            <span className=\"text-white text-sm\">{recommendation.time_horizon}</span>\r\n          </div>\r\n\r\n          {recommendation.price_target && (\r\n            <div className=\"flex items-center justify-between\">\r\n              <span className=\"text-slate-400 text-sm\">Price Target</span>\r\n              <AnimatedCounter\r\n                value={recommendation.price_target}\r\n                prefix=\"$\"\r\n                decimals={2}\r\n                color=\"neutral\"\r\n                className=\"text-sm font-semibold\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"pt-2 border-t border-slate-700/50\">\r\n          <p className=\"text-slate-300 text-sm leading-relaxed\">{recommendation.reasoning}</p>\r\n        </div>\r\n      </div>\r\n    </EnhancedCard>\r\n  );\r\n\r\n  if (error) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center text-red-400\">\r\n          <StatusIndicator status=\"error\" size=\"sm\" />\r\n          <p className=\"mt-2\">Error: {error}</p>\r\n          <button\r\n            onClick={fetchRecommendations}\r\n            className=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors\"\r\n          >\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  if (isLoading && !recommendations) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center\">\r\n          <StatusIndicator status=\"loading\" size=\"sm\" />\r\n          <p className=\"mt-2 text-slate-400\">Loading AI recommendations...</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  if (!recommendations) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center text-slate-400\">\r\n          <StatusIndicator status=\"offline\" size=\"sm\" />\r\n          <p className=\"mt-2\">No recommendations available</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  const allRecommendations = [\r\n    ...recommendations.buy_recommendations,\r\n    ...recommendations.sell_recommendations,\r\n    ...recommendations.hold_recommendations,\r\n  ];\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <h3 className=\"text-white font-bold text-xl\">AI Trading Recommendations</h3>\r\n          <StatusIndicator status={isConnected ? \"online\" : \"offline\"} size=\"sm\" />\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-4\">\r\n          {lastUpdated && (\r\n            <span className=\"text-xs text-slate-400\">\r\n              Updated: {lastUpdated.toLocaleTimeString()}\r\n            </span>\r\n          )}\r\n          <button\r\n            onClick={fetchRecommendations}\r\n            disabled={isLoading}\r\n            className=\"bg-blue-500 hover:bg-blue-600 disabled:bg-slate-600 text-white px-3 py-1 rounded-lg text-sm transition-colors\"\r\n          >\r\n            {isLoading ? \"...\" : \"Refresh\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Market Outlook */}\r\n      <EnhancedCard variant=\"gradient\" size=\"md\" className=\"text-center\">\r\n        <div className=\"space-y-2\">\r\n          <h4 className=\"text-white font-semibold\">Market Outlook</h4>\r\n          <p className=\"text-slate-300 capitalize\">{recommendations.market_outlook}</p>\r\n          <div className=\"flex items-center justify-center gap-2\">\r\n            <span className=\"text-slate-400 text-sm\">Overall Risk:</span>\r\n            <span className={`text-sm font-semibold ${getRiskColor(recommendations.overall_risk)}`}>\r\n              {recommendations.overall_risk.toUpperCase()}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </EnhancedCard>\r\n\r\n      {/* Recommendations */}\r\n      {allRecommendations.length > 0 ? (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n          {allRecommendations.map((recommendation, index) => (\r\n            <RecommendationCard\r\n              key={`${recommendation.symbol}-${index}`}\r\n              recommendation={recommendation}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <EnhancedCard variant=\"default\" className=\"text-center\">\r\n          <div className=\"text-slate-400\">\r\n            <StatusIndicator status=\"offline\" size=\"sm\" />\r\n            <p className=\"mt-2\">No recommendations available for the selected symbols</p>\r\n          </div>\r\n        </EnhancedCard>\r\n      )}\r\n\r\n      {/* Loading indicator */}\r\n      {isLoading && (\r\n        <div className=\"text-center\">\r\n          <StatusIndicator status=\"loading\" size=\"sm\" />\r\n          <p className=\"mt-2 text-slate-400\">Updating recommendations...</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIRecommendations;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ActivePositions.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPositions'. Either include it or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPositions]","fix":{"range":[2886,2888],"text":"[loadPositions]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\Analytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":790,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":790,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24771,24774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24771,24774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":810,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":810,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25469,25472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25469,25472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":812,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":812,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25574,25577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25574,25577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":817,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":817,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25758,25761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25758,25761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":833,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":833,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26390,26393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26390,26393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":859,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":859,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27240,27243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27240,27243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":901,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":901,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28581,28584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28581,28584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":922,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":922,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29347,29350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29347,29350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":940,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":940,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29925,29928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29925,29928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":960,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":960,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30653,30656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30653,30656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalytics'. Either include it or remove the dependency array.","line":419,"column":6,"nodeType":"ArrayExpression","endLine":419,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadAnalytics, timeframe]","fix":{"range":[12826,12837],"text":"[loadAnalytics, timeframe]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport html2canvas from \"html2canvas\";\r\nimport {\r\n  Award,\r\n  BarChart3,\r\n  DollarSign,\r\n  Download,\r\n  Loader2,\r\n  Percent,\r\n  Target,\r\n  TrendingDown,\r\n} from \"lucide-react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\r\nimport { theme } from \"../styles/theme\";\r\nimport TradingViewChart from \"./TradingViewChart\";\r\nimport { Button, Card } from \"./ui\";\r\n\r\ninterface PerformanceMetrics {\r\n  totalReturn: number;\r\n  totalReturnPercent: number;\r\n  winRate: number;\r\n  profitFactor: number;\r\n  sharpeRatio: number;\r\n  maxDrawdown: number;\r\n  avgWin: number;\r\n  avgLoss: number;\r\n  totalTrades: number;\r\n  winningTrades: number;\r\n  losingTrades: number;\r\n}\r\n\r\ninterface DailyPerformance {\r\n  date: string;\r\n  pnl: number;\r\n  portfolioValue: number;\r\n  trades: number;\r\n}\r\n\r\ninterface MonthlyStats {\r\n  month: string;\r\n  profit: number;\r\n  trades: number;\r\n  winRate: number;\r\n}\r\n\r\ninterface PortfolioSummary {\r\n  total_value: number;\r\n  cash: number;\r\n  buying_power: number;\r\n  total_pl: number;\r\n  total_pl_percent: number;\r\n  day_pl: number;\r\n  day_pl_percent: number;\r\n  num_positions: number;\r\n  num_winning: number;\r\n  num_losing: number;\r\n  largest_winner?: { symbol: string; pl: number; pl_percent: number };\r\n  largest_loser?: { symbol: string; pl: number; pl_percent: number };\r\n}\r\n\r\nfunction PortfolioSummaryCard() {\r\n  const isMobile = useIsMobile();\r\n  const [summary, setSummary] = useState<PortfolioSummary | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    loadSummary();\r\n    // Refresh every 30 seconds\r\n    const interval = setInterval(loadSummary, 30000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const loadSummary = async () => {\r\n    try {\r\n      const response = await fetch(\"/api/proxy/portfolio/summary\");\r\n      const data = await response.json();\r\n      setSummary(data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Failed to load portfolio summary:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading || !summary) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card style={{ marginBottom: theme.spacing.lg }} glow=\"teal\">\r\n      <h3\r\n        style={{ margin: `0 0 ${theme.spacing.md} 0`, color: theme.colors.text, fontSize: \"18px\" }}\r\n      >\r\n        Portfolio Summary\r\n      </h3>\r\n\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\r\n          gap: theme.spacing.md,\r\n        }}\r\n      >\r\n        {/* Total Value */}\r\n        <div>\r\n          <p\r\n            style={{\r\n              fontSize: \"12px\",\r\n              color: theme.colors.textMuted,\r\n              margin: `0 0 ${theme.spacing.xs} 0`,\r\n            }}\r\n          >\r\n            Total Value\r\n          </p>\r\n          <p style={{ fontSize: \"24px\", fontWeight: \"bold\", color: theme.colors.text, margin: 0 }}>\r\n            ${summary.total_value.toLocaleString(\"en-US\", { minimumFractionDigits: 2 })}\r\n          </p>\r\n        </div>\r\n\r\n        {/* Total P&L */}\r\n        <div>\r\n          <p\r\n            style={{\r\n              fontSize: \"12px\",\r\n              color: theme.colors.textMuted,\r\n              margin: `0 0 ${theme.spacing.xs} 0`,\r\n            }}\r\n          >\r\n            Total P&L\r\n          </p>\r\n          <p\r\n            style={{\r\n              fontSize: \"24px\",\r\n              fontWeight: \"bold\",\r\n              color: summary.total_pl >= 0 ? theme.colors.primary : theme.colors.danger,\r\n              margin: 0,\r\n            }}\r\n          >\r\n            {summary.total_pl >= 0 ? \"+\" : \"\"}$\r\n            {summary.total_pl.toLocaleString(\"en-US\", { minimumFractionDigits: 2 })}\r\n            <span style={{ fontSize: \"16px\", marginLeft: theme.spacing.xs }}>\r\n              ({summary.total_pl_percent >= 0 ? \"+\" : \"\"}\r\n              {summary.total_pl_percent.toFixed(2)}%)\r\n            </span>\r\n          </p>\r\n        </div>\r\n\r\n        {/* Day P&L */}\r\n        <div>\r\n          <p\r\n            style={{\r\n              fontSize: \"12px\",\r\n              color: theme.colors.textMuted,\r\n              margin: `0 0 ${theme.spacing.xs} 0`,\r\n            }}\r\n          >\r\n            Today&apos;s P&L\r\n          </p>\r\n          <p\r\n            style={{\r\n              fontSize: \"24px\",\r\n              fontWeight: \"bold\",\r\n              color: summary.day_pl >= 0 ? theme.colors.primary : theme.colors.danger,\r\n              margin: 0,\r\n            }}\r\n          >\r\n            {summary.day_pl >= 0 ? \"+\" : \"\"}$\r\n            {summary.day_pl.toLocaleString(\"en-US\", { minimumFractionDigits: 2 })}\r\n            <span style={{ fontSize: \"16px\", marginLeft: theme.spacing.xs }}>\r\n              ({summary.day_pl_percent >= 0 ? \"+\" : \"\"}\r\n              {summary.day_pl_percent.toFixed(2)}%)\r\n            </span>\r\n          </p>\r\n        </div>\r\n\r\n        {/* Positions */}\r\n        <div>\r\n          <p\r\n            style={{\r\n              fontSize: \"12px\",\r\n              color: theme.colors.textMuted,\r\n              margin: `0 0 ${theme.spacing.xs} 0`,\r\n            }}\r\n          >\r\n            Positions\r\n          </p>\r\n          <p style={{ fontSize: \"24px\", fontWeight: \"bold\", color: theme.colors.text, margin: 0 }}>\r\n            {summary.num_positions}\r\n            <span\r\n              style={{\r\n                fontSize: \"16px\",\r\n                marginLeft: theme.spacing.xs,\r\n                color: theme.colors.textMuted,\r\n              }}\r\n            >\r\n              ({summary.num_winning}W / {summary.num_losing}L)\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Largest Winner/Loser */}\r\n      {(summary.largest_winner || summary.largest_loser) && (\r\n        <div\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: isMobile ? \"1fr\" : \"1fr 1fr\",\r\n            gap: theme.spacing.md,\r\n            marginTop: theme.spacing.md,\r\n            paddingTop: theme.spacing.md,\r\n            borderTop: `1px solid ${theme.colors.border}`,\r\n          }}\r\n        >\r\n          {summary.largest_winner && (\r\n            <div>\r\n              <p\r\n                style={{\r\n                  fontSize: \"12px\",\r\n                  color: theme.colors.textMuted,\r\n                  margin: `0 0 ${theme.spacing.xs} 0`,\r\n                }}\r\n              >\r\n                Largest Winner\r\n              </p>\r\n              <p\r\n                style={{\r\n                  fontSize: \"18px\",\r\n                  fontWeight: \"bold\",\r\n                  color: theme.colors.text,\r\n                  margin: 0,\r\n                }}\r\n              >\r\n                {summary.largest_winner.symbol}\r\n              </p>\r\n              <p\r\n                style={{\r\n                  fontSize: \"16px\",\r\n                  color: theme.colors.primary,\r\n                  margin: `${theme.spacing.xs} 0 0 0`,\r\n                }}\r\n              >\r\n                +${summary.largest_winner.pl.toFixed(2)} (+\r\n                {summary.largest_winner.pl_percent.toFixed(2)}%)\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {summary.largest_loser && (\r\n            <div>\r\n              <p\r\n                style={{\r\n                  fontSize: \"12px\",\r\n                  color: theme.colors.textMuted,\r\n                  margin: `0 0 ${theme.spacing.xs} 0`,\r\n                }}\r\n              >\r\n                Largest Loser\r\n              </p>\r\n              <p\r\n                style={{\r\n                  fontSize: \"18px\",\r\n                  fontWeight: \"bold\",\r\n                  color: theme.colors.text,\r\n                  margin: 0,\r\n                }}\r\n              >\r\n                {summary.largest_loser.symbol}\r\n              </p>\r\n              <p\r\n                style={{\r\n                  fontSize: \"16px\",\r\n                  color: theme.colors.danger,\r\n                  margin: `${theme.spacing.xs} 0 0 0`,\r\n                }}\r\n              >\r\n                ${summary.largest_loser.pl.toFixed(2)} (\r\n                {summary.largest_loser.pl_percent.toFixed(2)}%)\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default function Analytics() {\r\n  const [timeframe, setTimeframe] = useState<\"1W\" | \"1M\" | \"3M\" | \"1Y\" | \"ALL\">(\"1M\");\r\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\r\n  const [dailyPerformance, setDailyPerformance] = useState<DailyPerformance[]>([]);\r\n  const [monthlyStats, setMonthlyStats] = useState<MonthlyStats[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isDemoMode, setIsDemoMode] = useState(false);\r\n\r\n  // AI Portfolio Analysis state\r\n  const [aiAnalysis, setAiAnalysis] = useState<{\r\n    summary: string;\r\n    recommendations: string[];\r\n    riskAssessment: string;\r\n    performanceInsights: string;\r\n  } | null>(null);\r\n  const [aiLoading, setAiLoading] = useState(false);\r\n  const [aiError, setAiError] = useState<string | null>(null);\r\n  const [showAiPanel, setShowAiPanel] = useState(false);\r\n\r\n  // Mobile responsiveness\r\n  const isMobile = useIsMobile();\r\n\r\n  // Chart refs for export functionality\r\n  const equityChartRef = useRef<HTMLDivElement>(null);\r\n  const pnlChartRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Export loading state (per chart)\r\n  const [exportingChart, setExportingChart] = useState<string | null>(null);\r\n\r\n  // Export chart as PNG with mobile optimizations\r\n  const exportChartAsPNG = async (chartRef: React.RefObject<HTMLDivElement>, chartName: string) => {\r\n    if (!chartRef.current) {\r\n      toast.error(\"Chart not ready for export\");\r\n      return;\r\n    }\r\n\r\n    // Prevent multiple simultaneous exports\r\n    if (exportingChart) {\r\n      toast.error(\"Please wait for current export to complete\");\r\n      return;\r\n    }\r\n\r\n    setExportingChart(chartName);\r\n    const toastId = toast.loading(\"Preparing chart export...\");\r\n\r\n    try {\r\n      // Mobile-optimized canvas settings\r\n      const canvas = await html2canvas(chartRef.current, {\r\n        backgroundColor: theme.background.card,\r\n        scale: isMobile ? 1.5 : 2, // Reduced scale on mobile to prevent memory issues\r\n        useCORS: true, // Enable cross-origin images\r\n        allowTaint: false, // Prevent tainted canvas (iOS Safari compatibility)\r\n        logging: false, // Disable console logs\r\n        windowWidth: chartRef.current.scrollWidth,\r\n        windowHeight: chartRef.current.scrollHeight,\r\n      });\r\n\r\n      // Convert to blob for better mobile compatibility\r\n      canvas.toBlob(\r\n        (blob) => {\r\n          if (!blob) {\r\n            throw new Error(\"Failed to create image blob\");\r\n          }\r\n\r\n          // Create download link\r\n          const url = URL.createObjectURL(blob);\r\n          const link = document.createElement(\"a\");\r\n          link.download = `PaiiD_${chartName}_${new Date().toISOString().split(\"T\")[0]}.png`;\r\n          link.href = url;\r\n\r\n          // Trigger download\r\n          link.click();\r\n\r\n          // Cleanup\r\n          setTimeout(() => URL.revokeObjectURL(url), 100);\r\n\r\n          // Success notification\r\n          toast.success(\"Chart exported successfully! ≡ƒôè\", { id: toastId });\r\n        },\r\n        \"image/png\",\r\n        0.95 // Quality setting\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Failed to export chart:\", error);\r\n\r\n      // User-friendly error messages\r\n      const errorMessage =\r\n        error instanceof Error && error.message.includes(\"memory\")\r\n          ? \"Chart too large for mobile export. Try a smaller timeframe.\"\r\n          : error instanceof Error && error.message.includes(\"tainted\")\r\n            ? \"Export blocked by browser security. Try again.\"\r\n            : \"Failed to export chart. Please try again.\";\r\n\r\n      toast.error(errorMessage, { id: toastId });\r\n    } finally {\r\n      setExportingChart(null);\r\n    }\r\n  };\r\n\r\n  // Fetch AI Portfolio Analysis\r\n  const fetchAIPortfolioAnalysis = async () => {\r\n    setAiLoading(true);\r\n    setAiError(null);\r\n\r\n    try {\r\n      const response = await fetch(\"/api/proxy/api/ai/analyze-portfolio\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setAiAnalysis(data);\r\n      setShowAiPanel(true);\r\n    } catch (error: unknown) {\r\n      console.error(\"AI Portfolio Analysis error:\", error);\r\n      setAiError(error instanceof Error ? error.message : \"Failed to fetch AI analysis\");\r\n    } finally {\r\n      setAiLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadAnalytics();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [timeframe]);\r\n\r\n  const loadAnalytics = async () => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Fetch performance metrics from new analytics backend\r\n      const perfResponse = await fetch(`/api/proxy/analytics/performance?period=${timeframe}`);\r\n      const perfData = await perfResponse.json();\r\n\r\n      // Fetch portfolio history\r\n      const historyResponse = await fetch(`/api/proxy/portfolio/history?period=${timeframe}`);\r\n      const historyData = await historyResponse.json();\r\n\r\n      // Transform backend data to match component interface\r\n      const metricsData: PerformanceMetrics = {\r\n        totalReturn: perfData.total_return,\r\n        totalReturnPercent: perfData.total_return_percent,\r\n        winRate: perfData.win_rate,\r\n        profitFactor: perfData.profit_factor,\r\n        sharpeRatio: perfData.sharpe_ratio,\r\n        maxDrawdown: perfData.max_drawdown_percent,\r\n        avgWin: perfData.avg_win,\r\n        avgLoss: Math.abs(perfData.avg_loss),\r\n        totalTrades: perfData.num_trades,\r\n        winningTrades: perfData.num_wins,\r\n        losingTrades: perfData.num_losses,\r\n      };\r\n\r\n      // Transform equity history to daily performance format\r\n      const dailyPerf: DailyPerformance[] = historyData.data.map(\r\n        (point: { timestamp: string; equity: number }) => ({\r\n          date: point.timestamp.split(\"T\")[0],\r\n          pnl: 0, // Calculate from equity changes\r\n          portfolioValue: point.equity,\r\n          trades: 0,\r\n        })\r\n      );\r\n\r\n      // Calculate daily P&L from equity changes\r\n      for (let i = 1; i < dailyPerf.length; i++) {\r\n        dailyPerf[i].pnl = dailyPerf[i].portfolioValue - dailyPerf[i - 1].portfolioValue;\r\n      }\r\n\r\n      const monthlyData = generateMonthlyStats(); // Keep this for now\r\n\r\n      setMetrics(metricsData);\r\n      setDailyPerformance(dailyPerf);\r\n      setMonthlyStats(monthlyData);\r\n    } catch (error) {\r\n      console.error(\"Failed to load analytics:\", error);\r\n\r\n      // Fallback to generating DEMO data if API fails\r\n      setIsDemoMode(true);\r\n\r\n      const mockMetrics: PerformanceMetrics = {\r\n        totalReturn: 2500,\r\n        totalReturnPercent: 2.5,\r\n        winRate: 58.5,\r\n        profitFactor: 2.13,\r\n        sharpeRatio: 1.42,\r\n        maxDrawdown: -12.3,\r\n        avgWin: 142.5,\r\n        avgLoss: 87.3,\r\n        totalTrades: 47,\r\n        winningTrades: 27,\r\n        losingTrades: 20,\r\n      };\r\n\r\n      const mockDaily = generateDailyPerformance(timeframe);\r\n      const mockMonthly = generateMonthlyStats();\r\n\r\n      setMetrics(mockMetrics);\r\n      setDailyPerformance(mockDaily);\r\n      setMonthlyStats(mockMonthly);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateDailyPerformance = (tf: string): DailyPerformance[] => {\r\n    const days = tf === \"1W\" ? 7 : tf === \"1M\" ? 30 : tf === \"3M\" ? 90 : tf === \"1Y\" ? 365 : 365;\r\n    const data: DailyPerformance[] = [];\r\n    let portfolioValue = 100000;\r\n\r\n    for (let i = days - 1; i >= 0; i--) {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() - i);\r\n      const pnl = (Math.random() - 0.45) * 500;\r\n      portfolioValue += pnl;\r\n      data.push({\r\n        date: date.toISOString().split(\"T\")[0],\r\n        pnl,\r\n        portfolioValue,\r\n        trades: Math.floor(Math.random() * 5),\r\n      });\r\n    }\r\n    return data;\r\n  };\r\n\r\n  const generateMonthlyStats = (): MonthlyStats[] => {\r\n    const months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    const currentMonth = new Date().getMonth();\r\n    const stats: MonthlyStats[] = [];\r\n\r\n    for (let i = 0; i < 6; i++) {\r\n      const monthIndex = (currentMonth - i + 12) % 12;\r\n      stats.unshift({\r\n        month: months[monthIndex],\r\n        profit: (Math.random() - 0.3) * 5000,\r\n        trades: Math.floor(Math.random() * 50) + 20,\r\n        winRate: 50 + Math.random() * 20,\r\n      });\r\n    }\r\n    return stats;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div style={{ padding: theme.spacing.lg }}>\r\n        <Card>\r\n          <div\r\n            style={{\r\n              textAlign: \"center\",\r\n              padding: theme.spacing.xl,\r\n              color: theme.colors.textMuted,\r\n            }}\r\n          >\r\n            Loading analytics...\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: isMobile ? theme.spacing.md : theme.spacing.lg }}>\r\n      {/* DEMO MODE Banner */}\r\n      {isDemoMode && (\r\n        <div\r\n          style={{\r\n            background: \"rgba(251, 191, 36, 0.1)\",\r\n            border: \"2px solid rgba(251, 191, 36, 0.5)\",\r\n            borderRadius: theme.borderRadius.lg,\r\n            padding: theme.spacing.md,\r\n            marginBottom: theme.spacing.lg,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            gap: theme.spacing.md,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"rgba(251, 191, 36, 0.2)\",\r\n              borderRadius: \"50%\",\r\n              padding: theme.spacing.sm,\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <span style={{ fontSize: \"24px\" }}>ΓÜá∩╕Å</span>\r\n          </div>\r\n          <div>\r\n            <h3\r\n              style={{\r\n                margin: 0,\r\n                color: \"#fbbf24\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n              }}\r\n            >\r\n              DEMO MODE\r\n            </h3>\r\n            <p\r\n              style={{\r\n                margin: `${theme.spacing.xs} 0 0 0`,\r\n                color: theme.colors.textMuted,\r\n                fontSize: \"14px\",\r\n              }}\r\n            >\r\n              Using sample data - API unavailable. This is demonstration data only.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Header with PaiiD Logo */}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: isMobile ? \"flex-start\" : \"center\",\r\n          justifyContent: \"space-between\",\r\n          marginBottom: theme.spacing.lg,\r\n          flexDirection: isMobile ? \"column\" : \"row\",\r\n          gap: isMobile ? theme.spacing.md : \"0\",\r\n        }}\r\n      >\r\n        <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.md }}>\r\n          {/* PaiiD Logo */}\r\n          <div style={{ fontSize: isMobile ? \"28px\" : \"42px\", fontWeight: \"900\", lineHeight: \"1\" }}>\r\n            <span\r\n              style={{\r\n                background: \"linear-gradient(135deg, #1a7560 0%, #0d5a4a 100%)\",\r\n                WebkitBackgroundClip: \"text\",\r\n                WebkitTextFillColor: \"transparent\",\r\n                filter: \"drop-shadow(0 3px 8px rgba(26, 117, 96, 0.4))\",\r\n              }}\r\n            >\r\n              P\r\n            </span>\r\n            <span\r\n              style={{\r\n                background: \"linear-gradient(135deg, #1a7560 0%, #0d5a4a 100%)\",\r\n                WebkitBackgroundClip: \"text\",\r\n                WebkitTextFillColor: \"transparent\",\r\n                textShadow: \"0 0 18px rgba(69, 240, 192, 0.8), 0 0 36px rgba(69, 240, 192, 0.4)\",\r\n                animation: \"glow-ai 3s ease-in-out infinite\",\r\n              }}\r\n            >\r\n              aii\r\n            </span>\r\n            <span\r\n              style={{\r\n                background: \"linear-gradient(135deg, #1a7560 0%, #0d5a4a 100%)\",\r\n                WebkitBackgroundClip: \"text\",\r\n                WebkitTextFillColor: \"transparent\",\r\n                filter: \"drop-shadow(0 3px 8px rgba(26, 117, 96, 0.4))\",\r\n              }}\r\n            >\r\n              D\r\n            </span>\r\n          </div>\r\n\r\n          <BarChart3 size={isMobile ? 24 : 32} color={theme.colors.info} />\r\n          <h1\r\n            style={{\r\n              margin: 0,\r\n              fontSize: isMobile ? \"24px\" : \"32px\",\r\n              fontWeight: \"700\",\r\n              color: theme.colors.text,\r\n              textShadow: `0 0 20px ${theme.colors.info}40`,\r\n            }}\r\n          >\r\n            Analytics Dashboard\r\n          </h1>\r\n        </div>\r\n\r\n        {/* Timeframe Selector */}\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            gap: theme.spacing.xs,\r\n            flexWrap: \"wrap\",\r\n            width: isMobile ? \"100%\" : \"auto\",\r\n          }}\r\n        >\r\n          {([\"1W\", \"1M\", \"3M\", \"1Y\", \"ALL\"] as const).map((tf) => (\r\n            <Button\r\n              key={tf}\r\n              variant={timeframe === tf ? \"primary\" : \"secondary\"}\r\n              size=\"sm\"\r\n              onClick={() => setTimeframe(tf)}\r\n              style={{ flex: isMobile ? \"1\" : \"none\", minWidth: isMobile ? \"0\" : \"auto\" }}\r\n            >\r\n              {tf}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Portfolio Summary Card */}\r\n      <PortfolioSummaryCard />\r\n\r\n      {/* AI Portfolio Health Check Button */}\r\n      <div style={{ marginBottom: theme.spacing.lg }}>\r\n        <button\r\n          onClick={fetchAIPortfolioAnalysis}\r\n          disabled={aiLoading}\r\n          style={{\r\n            padding: \"12px 24px\",\r\n            backgroundColor: aiLoading ? \"#4B5563\" : \"#8B5CF6\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            borderRadius: \"8px\",\r\n            cursor: aiLoading ? \"not-allowed\" : \"pointer\",\r\n            fontSize: \"16px\",\r\n            fontWeight: \"600\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            gap: \"8px\",\r\n            transition: \"all 0.2s\",\r\n          }}\r\n        >\r\n          <span style={{ fontSize: \"20px\" }}>≡ƒñû</span>\r\n          {aiLoading ? \"Analyzing Portfolio...\" : \"AI Portfolio Health Check\"}\r\n        </button>\r\n\r\n        {/* AI Analysis Panel */}\r\n        {showAiPanel && aiAnalysis && (\r\n          <div\r\n            style={{\r\n              marginTop: \"24px\",\r\n              padding: \"24px\",\r\n              background:\r\n                \"linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(59, 130, 246, 0.1))\",\r\n              border: \"1px solid rgba(139, 92, 246, 0.3)\",\r\n              borderRadius: \"12px\",\r\n              backdropFilter: \"blur(10px)\",\r\n            }}\r\n          >\r\n            {/* Header */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                marginBottom: \"20px\",\r\n              }}\r\n            >\r\n              <h3 style={{ fontSize: \"24px\", fontWeight: \"bold\", color: \"#E2E8F0\" }}>\r\n                ≡ƒñû AI Portfolio Health Analysis\r\n              </h3>\r\n              <button\r\n                onClick={() => setShowAiPanel(false)}\r\n                style={{\r\n                  background: \"none\",\r\n                  border: \"none\",\r\n                  color: \"#94A3B8\",\r\n                  cursor: \"pointer\",\r\n                  fontSize: \"24px\",\r\n                }}\r\n              >\r\n                ├ù\r\n              </button>\r\n            </div>\r\n\r\n            {/* Health Score */}\r\n            <div\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\r\n                gap: \"16px\",\r\n                marginBottom: \"24px\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  padding: \"16px\",\r\n                  background: \"rgba(15, 23, 42, 0.6)\",\r\n                  borderRadius: \"8px\",\r\n                  border: \"1px solid rgba(148, 163, 184, 0.2)\",\r\n                }}\r\n              >\r\n                <div style={{ fontSize: \"14px\", color: \"#94A3B8\", marginBottom: \"8px\" }}>\r\n                  Health Score\r\n                </div>\r\n                <div style={{ fontSize: \"32px\", fontWeight: \"bold\", color: \"#10B981\" }}>\r\n                  {(aiAnalysis as any).health_score || 85}/100\r\n                </div>\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  padding: \"16px\",\r\n                  background: \"rgba(15, 23, 42, 0.6)\",\r\n                  borderRadius: \"8px\",\r\n                  border: \"1px solid rgba(148, 163, 184, 0.2)\",\r\n                }}\r\n              >\r\n                <div style={{ fontSize: \"14px\", color: \"#94A3B8\", marginBottom: \"8px\" }}>\r\n                  Risk Level\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"24px\",\r\n                    fontWeight: \"bold\",\r\n                    color:\r\n                      (aiAnalysis as any).risk_level === \"Low\"\r\n                        ? \"#10B981\"\r\n                        : (aiAnalysis as any).risk_level === \"Medium\"\r\n                          ? \"#F59E0B\"\r\n                          : \"#EF4444\",\r\n                  }}\r\n                >\r\n                  {(aiAnalysis as any).risk_level || \"Medium\"}\r\n                </div>\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  padding: \"16px\",\r\n                  background: \"rgba(15, 23, 42, 0.6)\",\r\n                  borderRadius: \"8px\",\r\n                  border: \"1px solid rgba(148, 163, 184, 0.2)\",\r\n                }}\r\n              >\r\n                <div style={{ fontSize: \"14px\", color: \"#94A3B8\", marginBottom: \"8px\" }}>\r\n                  Diversification\r\n                </div>\r\n                <div style={{ fontSize: \"32px\", fontWeight: \"bold\", color: \"#3B82F6\" }}>\r\n                  {(aiAnalysis as any).diversification_score || 75}/100\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* AI Summary */}\r\n            <div\r\n              style={{\r\n                padding: \"16px\",\r\n                background: \"rgba(15, 23, 42, 0.6)\",\r\n                borderRadius: \"8px\",\r\n                border: \"1px solid rgba(148, 163, 184, 0.2)\",\r\n                marginBottom: \"16px\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  fontSize: \"16px\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"#E2E8F0\",\r\n                  marginBottom: \"8px\",\r\n                }}\r\n              >\r\n                ≡ƒôè AI Summary\r\n              </div>\r\n              <div style={{ fontSize: \"14px\", color: \"#CBD5E1\", lineHeight: \"1.6\" }}>\r\n                {(aiAnalysis as any).ai_summary || aiAnalysis.summary}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Recommendations */}\r\n            <div\r\n              style={{\r\n                padding: \"16px\",\r\n                background: \"rgba(15, 23, 42, 0.6)\",\r\n                borderRadius: \"8px\",\r\n                border: \"1px solid rgba(148, 163, 184, 0.2)\",\r\n                marginBottom: \"16px\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  fontSize: \"16px\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"#E2E8F0\",\r\n                  marginBottom: \"12px\",\r\n                }}\r\n              >\r\n                ≡ƒÆí AI Recommendations\r\n              </div>\r\n              <ul style={{ margin: 0, paddingLeft: \"20px\" }}>\r\n                {aiAnalysis.recommendations.map((rec: string, idx: number) => (\r\n                  <li\r\n                    key={idx}\r\n                    style={{\r\n                      fontSize: \"14px\",\r\n                      color: \"#CBD5E1\",\r\n                      marginBottom: \"8px\",\r\n                      lineHeight: \"1.6\",\r\n                    }}\r\n                  >\r\n                    {rec}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n\r\n            {/* Risk Factors */}\r\n            {(aiAnalysis as any).risk_factors?.length > 0 && (\r\n              <div\r\n                style={{\r\n                  padding: \"16px\",\r\n                  background: \"rgba(15, 23, 42, 0.6)\",\r\n                  borderRadius: \"8px\",\r\n                  border: \"1px solid rgba(239, 68, 68, 0.3)\",\r\n                  marginBottom: \"16px\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontSize: \"16px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"#EF4444\",\r\n                    marginBottom: \"12px\",\r\n                  }}\r\n                >\r\n                  ΓÜá∩╕Å Risk Factors\r\n                </div>\r\n                <ul style={{ margin: 0, paddingLeft: \"20px\" }}>\r\n                  {(aiAnalysis as any).risk_factors?.map((risk: string, idx: number) => (\r\n                    <li\r\n                      key={idx}\r\n                      style={{\r\n                        fontSize: \"14px\",\r\n                        color: \"#FCA5A5\",\r\n                        marginBottom: \"8px\",\r\n                        lineHeight: \"1.6\",\r\n                      }}\r\n                    >\r\n                      {risk}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n\r\n            {/* Opportunities */}\r\n            {(aiAnalysis as any).opportunities?.length > 0 && (\r\n              <div\r\n                style={{\r\n                  padding: \"16px\",\r\n                  background: \"rgba(15, 23, 42, 0.6)\",\r\n                  borderRadius: \"8px\",\r\n                  border: \"1px solid rgba(16, 185, 129, 0.3)\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontSize: \"16px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"#10B981\",\r\n                    marginBottom: \"12px\",\r\n                  }}\r\n                >\r\n                  ≡ƒÄ» Opportunities\r\n                </div>\r\n                <ul style={{ margin: 0, paddingLeft: \"20px\" }}>\r\n                  {(aiAnalysis as any).opportunities?.map((opp: string, idx: number) => (\r\n                    <li\r\n                      key={idx}\r\n                      style={{\r\n                        fontSize: \"14px\",\r\n                        color: \"#6EE7B7\",\r\n                        marginBottom: \"8px\",\r\n                        lineHeight: \"1.6\",\r\n                      }}\r\n                    >\r\n                      {opp}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Error Display */}\r\n        {aiError && (\r\n          <div\r\n            style={{\r\n              marginTop: \"16px\",\r\n              padding: \"16px\",\r\n              background: \"rgba(239, 68, 68, 0.1)\",\r\n              border: \"1px solid rgba(239, 68, 68, 0.3)\",\r\n              borderRadius: \"8px\",\r\n              color: \"#FCA5A5\",\r\n            }}\r\n          >\r\n            ΓÜá∩╕Å {aiError}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Performance Metrics */}\r\n      {metrics && (\r\n        <>\r\n          <div\r\n            style={{\r\n              display: \"grid\",\r\n              gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\r\n              gap: theme.spacing.md,\r\n              marginBottom: theme.spacing.lg,\r\n            }}\r\n          >\r\n            <MetricCard\r\n              icon={\r\n                <DollarSign\r\n                  size={20}\r\n                  color={metrics.totalReturn >= 0 ? theme.colors.primary : theme.colors.danger}\r\n                />\r\n              }\r\n              label=\"Total Return\"\r\n              value={`$${Math.abs(metrics.totalReturn).toLocaleString(\"en-US\", { minimumFractionDigits: 2 })}`}\r\n              subValue={`${metrics.totalReturnPercent >= 0 ? \"+\" : \"\"}${metrics.totalReturnPercent.toFixed(2)}%`}\r\n              valueColor={metrics.totalReturn >= 0 ? theme.colors.primary : theme.colors.danger}\r\n            />\r\n            <MetricCard\r\n              icon={<Percent size={20} color={theme.colors.secondary} />}\r\n              label=\"Win Rate\"\r\n              value={`${metrics.winRate.toFixed(1)}%`}\r\n              subValue={`${metrics.winningTrades}W / ${metrics.losingTrades}L`}\r\n            />\r\n            <MetricCard\r\n              icon={<Target size={20} color={theme.colors.primary} />}\r\n              label=\"Profit Factor\"\r\n              value={metrics.profitFactor.toFixed(2)}\r\n              valueColor={metrics.profitFactor > 1 ? theme.colors.primary : theme.colors.danger}\r\n            />\r\n            <MetricCard\r\n              icon={<Award size={20} color={theme.colors.info} />}\r\n              label=\"Sharpe Ratio\"\r\n              value={metrics.sharpeRatio.toFixed(2)}\r\n              valueColor={metrics.sharpeRatio > 1 ? theme.colors.primary : theme.colors.warning}\r\n            />\r\n            <MetricCard\r\n              icon={<TrendingDown size={20} color={theme.colors.danger} />}\r\n              label=\"Max Drawdown\"\r\n              value={`${metrics.maxDrawdown.toFixed(2)}%`}\r\n              valueColor={theme.colors.danger}\r\n            />\r\n            <MetricCard\r\n              icon={<BarChart3 size={20} color={theme.colors.secondary} />}\r\n              label=\"Total Trades\"\r\n              value={metrics.totalTrades.toString()}\r\n            />\r\n          </div>\r\n\r\n          {/* Equity Curve */}\r\n          <Card style={{ marginBottom: theme.spacing.lg }} glow=\"teal\">\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                marginBottom: theme.spacing.md,\r\n              }}\r\n            >\r\n              <h3 style={{ margin: 0, color: theme.colors.text, fontSize: \"18px\" }}>\r\n                Portfolio Value Over Time\r\n              </h3>\r\n              <Button\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                onClick={() => exportChartAsPNG(equityChartRef, \"Equity_Curve\")}\r\n                disabled={exportingChart !== null}\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  gap: theme.spacing.xs,\r\n                  minWidth: isMobile ? \"44px\" : \"auto\", // iOS touch target standard\r\n                  minHeight: \"44px\", // iOS touch target standard\r\n                }}\r\n              >\r\n                {exportingChart === \"Equity_Curve\" ? (\r\n                  <Loader2 size={16} style={{ animation: \"spin 1s linear infinite\" }} />\r\n                ) : (\r\n                  <Download size={16} />\r\n                )}\r\n                {!isMobile && (exportingChart === \"Equity_Curve\" ? \"Exporting...\" : \"Export\")}\r\n              </Button>\r\n            </div>\r\n            <div\r\n              ref={equityChartRef}\r\n              style={{\r\n                height: isMobile ? \"200px\" : \"300px\",\r\n                display: \"flex\",\r\n                alignItems: \"flex-end\",\r\n                gap: \"2px\",\r\n                padding: theme.spacing.md,\r\n                background: theme.background.input,\r\n                borderRadius: theme.borderRadius.sm,\r\n              }}\r\n            >\r\n              {dailyPerformance\r\n                .filter((_, i) => {\r\n                  // Sample data based on timeframe\r\n                  const sampleRate =\r\n                    timeframe === \"1W\" ? 1 : timeframe === \"1M\" ? 1 : timeframe === \"3M\" ? 3 : 7;\r\n                  return i % sampleRate === 0;\r\n                })\r\n                .map((point, index) => {\r\n                  const minValue = Math.min(...dailyPerformance.map((d) => d.portfolioValue));\r\n                  const maxValue = Math.max(...dailyPerformance.map((d) => d.portfolioValue));\r\n                  const range = maxValue - minValue;\r\n                  const height = range > 0 ? ((point.portfolioValue - minValue) / range) * 100 : 50;\r\n\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      style={{\r\n                        flex: 1,\r\n                        height: `${Math.max(height, 5)}%`,\r\n                        background:\r\n                          point.portfolioValue > 100000\r\n                            ? theme.colors.primary\r\n                            : theme.colors.danger,\r\n                        borderRadius: \"2px 2px 0 0\",\r\n                        transition: theme.transitions.fast,\r\n                      }}\r\n                      title={`${point.date}: $${point.portfolioValue.toFixed(2)}`}\r\n                    />\r\n                  );\r\n                })}\r\n            </div>\r\n          </Card>\r\n\r\n          {/* Daily P&L Chart */}\r\n          <Card style={{ marginBottom: theme.spacing.lg }}>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                marginBottom: theme.spacing.md,\r\n              }}\r\n            >\r\n              <h3 style={{ margin: 0, color: theme.colors.text, fontSize: \"18px\" }}>Daily P&L</h3>\r\n              <Button\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                onClick={() => exportChartAsPNG(pnlChartRef, \"Daily_PnL\")}\r\n                disabled={exportingChart !== null}\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  gap: theme.spacing.xs,\r\n                  minWidth: isMobile ? \"44px\" : \"auto\", // iOS touch target standard\r\n                  minHeight: \"44px\", // iOS touch target standard\r\n                }}\r\n              >\r\n                {exportingChart === \"Daily_PnL\" ? (\r\n                  <Loader2 size={16} style={{ animation: \"spin 1s linear infinite\" }} />\r\n                ) : (\r\n                  <Download size={16} />\r\n                )}\r\n                {!isMobile && (exportingChart === \"Daily_PnL\" ? \"Exporting...\" : \"Export\")}\r\n              </Button>\r\n            </div>\r\n            <div\r\n              ref={pnlChartRef}\r\n              style={{\r\n                height: isMobile ? \"150px\" : \"200px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                gap: \"2px\",\r\n                padding: theme.spacing.md,\r\n                background: theme.background.input,\r\n                borderRadius: theme.borderRadius.sm,\r\n              }}\r\n            >\r\n              {dailyPerformance\r\n                .filter((_, i) => {\r\n                  const sampleRate =\r\n                    timeframe === \"1W\" ? 1 : timeframe === \"1M\" ? 1 : timeframe === \"3M\" ? 3 : 7;\r\n                  return i % sampleRate === 0;\r\n                })\r\n                .map((point, index) => {\r\n                  const maxPnl = Math.max(...dailyPerformance.map((d) => Math.abs(d.pnl)));\r\n                  const height = maxPnl > 0 ? (Math.abs(point.pnl) / maxPnl) * 90 : 10;\r\n\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      style={{\r\n                        flex: 1,\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: point.pnl >= 0 ? \"flex-end\" : \"flex-start\",\r\n                        height: \"100%\",\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          width: \"100%\",\r\n                          height: `${height}%`,\r\n                          background: point.pnl >= 0 ? theme.colors.primary : theme.colors.danger,\r\n                          borderRadius: \"2px\",\r\n                          transition: theme.transitions.fast,\r\n                        }}\r\n                        title={`${point.date}: ${point.pnl >= 0 ? \"+\" : \"\"}$${point.pnl.toFixed(2)}`}\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          </Card>\r\n\r\n          {/* Monthly Performance */}\r\n          <Card style={{ marginBottom: theme.spacing.lg }}>\r\n            <h3\r\n              style={{\r\n                margin: `0 0 ${theme.spacing.md} 0`,\r\n                color: theme.colors.text,\r\n                fontSize: \"18px\",\r\n              }}\r\n            >\r\n              Monthly Performance\r\n            </h3>\r\n            <div\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: \"repeat(auto-fit, minmax(150px, 1fr))\",\r\n                gap: theme.spacing.md,\r\n              }}\r\n            >\r\n              {monthlyStats.map((stat, index) => (\r\n                <div\r\n                  key={index}\r\n                  style={{\r\n                    padding: theme.spacing.md,\r\n                    background: theme.background.input,\r\n                    borderRadius: theme.borderRadius.md,\r\n                    borderLeft: `4px solid ${stat.profit >= 0 ? theme.colors.primary : theme.colors.danger}`,\r\n                  }}\r\n                >\r\n                  <p style={{ margin: 0, fontSize: \"12px\", color: theme.colors.textMuted }}>\r\n                    {stat.month}\r\n                  </p>\r\n                  <p\r\n                    style={{\r\n                      margin: `${theme.spacing.xs} 0`,\r\n                      fontSize: \"20px\",\r\n                      fontWeight: \"700\",\r\n                      color: stat.profit >= 0 ? theme.colors.primary : theme.colors.danger,\r\n                    }}\r\n                  >\r\n                    {stat.profit >= 0 ? \"+\" : \"\"}${stat.profit.toFixed(0)}\r\n                  </p>\r\n                  <p style={{ margin: 0, fontSize: \"12px\", color: theme.colors.textMuted }}>\r\n                    {stat.trades} trades ┬╖ {stat.winRate.toFixed(0)}% win\r\n                  </p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Card>\r\n\r\n          {/* TradingView Chart */}\r\n          <div style={{ marginBottom: theme.spacing.lg }}>\r\n            <TradingViewChart symbol=\"$DJI.IX\" height={isMobile ? 400 : 600} />\r\n          </div>\r\n\r\n          {/* Trade Statistics */}\r\n          <div\r\n            style={{\r\n              display: \"grid\",\r\n              gridTemplateColumns: \"repeat(auto-fit, minmax(250px, 1fr))\",\r\n              gap: theme.spacing.md,\r\n            }}\r\n          >\r\n            <Card>\r\n              <h3\r\n                style={{\r\n                  margin: `0 0 ${theme.spacing.md} 0`,\r\n                  color: theme.colors.text,\r\n                  fontSize: \"18px\",\r\n                }}\r\n              >\r\n                Win/Loss Analysis\r\n              </h3>\r\n              <div style={{ display: \"flex\", flexDirection: \"column\", gap: theme.spacing.sm }}>\r\n                <StatRow\r\n                  label=\"Average Win\"\r\n                  value={`$${metrics.avgWin.toFixed(2)}`}\r\n                  color={theme.colors.primary}\r\n                />\r\n                <StatRow\r\n                  label=\"Average Loss\"\r\n                  value={`$${Math.abs(metrics.avgLoss).toFixed(2)}`}\r\n                  color={theme.colors.danger}\r\n                />\r\n                <StatRow\r\n                  label=\"Win/Loss Ratio\"\r\n                  value={(metrics.avgWin / Math.abs(metrics.avgLoss)).toFixed(2)}\r\n                />\r\n              </div>\r\n            </Card>\r\n\r\n            <Card>\r\n              <h3\r\n                style={{\r\n                  margin: `0 0 ${theme.spacing.md} 0`,\r\n                  color: theme.colors.text,\r\n                  fontSize: \"18px\",\r\n                }}\r\n              >\r\n                Risk Metrics\r\n              </h3>\r\n              <div style={{ display: \"flex\", flexDirection: \"column\", gap: theme.spacing.sm }}>\r\n                <StatRow label=\"Sharpe Ratio\" value={metrics.sharpeRatio.toFixed(2)} />\r\n                <StatRow label=\"Profit Factor\" value={metrics.profitFactor.toFixed(2)} />\r\n                <StatRow\r\n                  label=\"Max Drawdown\"\r\n                  value={`${metrics.maxDrawdown.toFixed(2)}%`}\r\n                  color={theme.colors.danger}\r\n                />\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MetricCard({\r\n  icon,\r\n  label,\r\n  value,\r\n  subValue,\r\n  valueColor,\r\n}: {\r\n  icon: React.ReactNode;\r\n  label: string;\r\n  value: string;\r\n  subValue?: string;\r\n  valueColor?: string;\r\n}) {\r\n  return (\r\n    <Card>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          gap: theme.spacing.xs,\r\n          marginBottom: theme.spacing.xs,\r\n        }}\r\n      >\r\n        {icon}\r\n        <p style={{ fontSize: \"14px\", color: theme.colors.textMuted, margin: 0 }}>{label}</p>\r\n      </div>\r\n      <p\r\n        style={{\r\n          fontSize: \"24px\",\r\n          fontWeight: \"bold\",\r\n          color: valueColor || theme.colors.text,\r\n          margin: 0,\r\n        }}\r\n      >\r\n        {value}\r\n      </p>\r\n      {subValue && (\r\n        <p\r\n          style={{\r\n            fontSize: \"14px\",\r\n            color: theme.colors.textMuted,\r\n            margin: `${theme.spacing.xs} 0 0 0`,\r\n          }}\r\n        >\r\n          {subValue}\r\n        </p>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction StatRow({ label, value, color }: { label: string; value: string; color?: string }) {\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n      <span style={{ fontSize: \"14px\", color: theme.colors.textMuted }}>{label}</span>\r\n      <span style={{ fontSize: \"16px\", fontWeight: \"600\", color: color || theme.colors.text }}>\r\n        {value}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ApprovalQueue.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\Backtesting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ChatContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ClaudeAIChat.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3546,3549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3546,3549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3609,3612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3609,3612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":120,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":123,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3634,3637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3634,3637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":187,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":190,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3701,3704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3701,3704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":234,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":237,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3748,3751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3748,3751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5347,5350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5347,5350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5411,5414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5411,5414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { Bot, Loader, Send, Sparkles, User } from \"lucide-react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\r\nimport { showError } from \"../lib/toast\";\r\nimport { theme } from \"../styles/theme\";\r\nimport { Button, Card } from \"./ui\";\r\n\r\ninterface Message {\r\n  id: string;\r\n  role: \"user\" | \"assistant\";\r\n  content: string;\r\n  timestamp: Date;\r\n}\r\n\r\nexport default function ClaudeAIChat() {\r\n  const isMobile = useIsMobile();\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: \"welcome\",\r\n      role: \"assistant\",\r\n      content:\r\n        \"≡ƒæï Hi! I'm your AI trading assistant powered by Claude. Ask me anything about:\\n\\nΓÇó Market regime analysis\\nΓÇó Chart patterns\\nΓÇó Strategy recommendations\\nΓÇó Technical indicators\\nΓÇó Trading concepts\\n\\nTry asking: \\\"What's the current market regime for AAPL?\\\"\",\r\n      timestamp: new Date(),\r\n    },\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim() || isLoading) return;\r\n\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      role: \"user\",\r\n      content: input,\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setInput(\"\");\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Check if query is about market regime\r\n      if (\r\n        input.toLowerCase().includes(\"market regime\") ||\r\n        input.toLowerCase().includes(\"regime for\")\r\n      ) {\r\n        const symbolMatch = input.match(/\\b([A-Z]{1,5})\\b/);\r\n        const symbol = symbolMatch ? symbolMatch[1] : \"SPY\";\r\n\r\n        // Fetch ML market regime\r\n        const res = await fetch(`/api/proxy/api/ml/market-regime?symbol=${symbol}`);\r\n        if (res.ok) {\r\n          const data = await res.json();\r\n          const assistantMessage: Message = {\r\n            id: (Date.now() + 1).toString(),\r\n            role: \"assistant\",\r\n            content: `≡ƒôè **Market Regime for ${data.symbol}:**\\n\\n**${data.regime.replace(/_/g, \" \").toUpperCase()}** (${(data.confidence * 100).toFixed(0)}% confidence)\\n\\n**Key Metrics:**\\nΓÇó RSI: ${data.features.rsi.toFixed(1)}\\nΓÇó Volatility: ${(data.features.volatility * 100).toFixed(1)}%\\nΓÇó Trend Strength: ${data.features.trend_strength.toFixed(1)}\\n\\n**Recommended Strategies:**\\n${data.recommended_strategies.map((s: string) => `ΓÇó ${s.replace(/-/g, \" \")}`).join(\"\\n\")}`,\r\n            timestamp: new Date(),\r\n          };\r\n          setMessages((prev) => [...prev, assistantMessage]);\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Check if query is about patterns\r\n      if (input.toLowerCase().includes(\"pattern\") || input.toLowerCase().includes(\"chart\")) {\r\n        const symbolMatch = input.match(/\\b([A-Z]{1,5})\\b/);\r\n        const symbol = symbolMatch ? symbolMatch[1] : \"SPY\";\r\n\r\n        const res = await fetch(\r\n          `/api/proxy/api/ml/detect-patterns?symbol=${symbol}&min_confidence=0.7`\r\n        );\r\n        if (res.ok) {\r\n          const data = await res.json();\r\n          if (data.patterns.length > 0) {\r\n            const patternList = data.patterns\r\n              .map(\r\n                (p: unknown) =>\r\n                  `ΓÇó **${(p as any).pattern_type.replace(/_/g, \" \").toUpperCase()}** (${(p as any).signal}) - ${((p as any).confidence * 100).toFixed(0)}% confidence\\n  Target: $${(p as any).target_price.toFixed(2)} | Stop: $${(p as any).stop_loss.toFixed(2)}`\r\n              )\r\n              .join(\"\\n\\n\");\r\n            const assistantMessage: Message = {\r\n              id: (Date.now() + 1).toString(),\r\n              role: \"assistant\",\r\n              content: `≡ƒôè **Patterns Detected for ${data.symbol}:**\\n\\n${patternList}`,\r\n              timestamp: new Date(),\r\n            };\r\n            setMessages((prev) => [...prev, assistantMessage]);\r\n            setIsLoading(false);\r\n            return;\r\n          } else {\r\n            const assistantMessage: Message = {\r\n              id: (Date.now() + 1).toString(),\r\n              role: \"assistant\",\r\n              content: `No high-confidence patterns detected for ${symbol} at the moment. Try asking about a different symbol or lower the confidence threshold.`,\r\n              timestamp: new Date(),\r\n            };\r\n            setMessages((prev) => [...prev, assistantMessage]);\r\n            setIsLoading(false);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Check if query is about strategy recommendations\r\n      if (input.toLowerCase().includes(\"strategy\") || input.toLowerCase().includes(\"recommend\")) {\r\n        const symbolMatch = input.match(/\\b([A-Z]{1,5})\\b/);\r\n        const symbol = symbolMatch ? symbolMatch[1] : \"SPY\";\r\n\r\n        const res = await fetch(`/api/proxy/api/ml/recommend-strategy?symbol=${symbol}&top_n=3`);\r\n        if (res.ok) {\r\n          const data = await res.json();\r\n          const strategyList = data.recommendations\r\n            .map(\r\n              (r: unknown, idx: number) =>\r\n                `${idx + 1}. **${(r as any).strategy_id.replace(/-/g, \" \").toUpperCase()}** - ${((r as any).probability * 100).toFixed(0)}% probability`\r\n            )\r\n            .join(\"\\n\");\r\n          const assistantMessage: Message = {\r\n            id: (Date.now() + 1).toString(),\r\n            role: \"assistant\",\r\n            content: `≡ƒÄ» **Strategy Recommendations for ${data.symbol}:**\\n\\nMarket is currently **${data.market_regime.replace(/_/g, \" \").toUpperCase()}** (${(data.regime_confidence * 100).toFixed(0)}% confidence)\\n\\n**Top Strategies:**\\n${strategyList}`,\r\n            timestamp: new Date(),\r\n          };\r\n          setMessages((prev) => [...prev, assistantMessage]);\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Fallback: Use Claude API directly\r\n      const res = await fetch(\"/api/proxy/api/claude/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          messages: [\r\n            {\r\n              role: \"system\",\r\n              content:\r\n                \"You are an expert trading assistant. Help users with market analysis, strategy recommendations, and trading concepts. Keep responses concise and actionable. When users ask about specific stocks, guide them to use the ML features: market regime detection, pattern recognition, and strategy recommendations.\",\r\n            },\r\n            { role: \"user\", content: input },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        throw new Error(\"AI response failed\");\r\n      }\r\n\r\n      const data = await res.json();\r\n      const assistantMessage: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        role: \"assistant\",\r\n        content:\r\n          data.response ||\r\n          data.content ||\r\n          \"I'm having trouble responding right now. Please try asking about market regime, patterns, or strategy recommendations for specific symbols (e.g., 'What's the market regime for AAPL?')\",\r\n        timestamp: new Date(),\r\n      };\r\n\r\n      setMessages((prev) => [...prev, assistantMessage]);\r\n    } catch (err: unknown) {\r\n      showError(\"Failed to get AI response\");\r\n      const errorMessage: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        role: \"assistant\",\r\n        content:\r\n          \"Sorry, I encountered an error. Try asking about:\\nΓÇó Market regime for a symbol\\nΓÇó Patterns in a stock\\nΓÇó Strategy recommendations\\n\\nExample: 'What patterns do you see in AAPL?'\",\r\n        timestamp: new Date(),\r\n      };\r\n      setMessages((prev) => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const quickQuestions = [\r\n    \"What's the market regime for SPY?\",\r\n    \"Show me patterns in AAPL\",\r\n    \"Recommend strategies for TSLA\",\r\n    \"What does RSI mean?\",\r\n  ];\r\n\r\n  return (\r\n    <div style={{ padding: isMobile ? theme.spacing.md : theme.spacing.lg }}>\r\n      {/* Header */}\r\n      <div style={{ marginBottom: theme.spacing.lg }}>\r\n        <h2\r\n          style={{\r\n            margin: 0,\r\n            fontSize: isMobile ? \"24px\" : \"32px\",\r\n            fontWeight: \"700\",\r\n            color: theme.colors.text,\r\n            textShadow: theme.glow.cyan,\r\n            marginBottom: theme.spacing.xs,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            gap: theme.spacing.sm,\r\n          }}\r\n        >\r\n          <Sparkles size={32} color={theme.colors.secondary} />\r\n          Claude AI Trading Assistant\r\n        </h2>\r\n        <p\r\n          style={{\r\n            margin: 0,\r\n            fontSize: \"14px\",\r\n            color: theme.colors.textMuted,\r\n          }}\r\n        >\r\n          Ask questions in natural language - powered by Claude AI\r\n        </p>\r\n      </div>\r\n\r\n      {/* Chat Container */}\r\n      <Card glow=\"cyan\" style={{ marginBottom: theme.spacing.lg }}>\r\n        {/* Messages */}\r\n        <div\r\n          style={{\r\n            height: isMobile ? \"400px\" : \"500px\",\r\n            overflowY: \"auto\",\r\n            padding: theme.spacing.md,\r\n            marginBottom: theme.spacing.lg,\r\n          }}\r\n        >\r\n          {messages.map((msg) => (\r\n            <div\r\n              key={msg.id}\r\n              style={{\r\n                display: \"flex\",\r\n                gap: theme.spacing.md,\r\n                marginBottom: theme.spacing.lg,\r\n                alignItems: \"flex-start\",\r\n              }}\r\n            >\r\n              {/* Avatar */}\r\n              <div\r\n                style={{\r\n                  flexShrink: 0,\r\n                  width: \"40px\",\r\n                  height: \"40px\",\r\n                  borderRadius: \"50%\",\r\n                  background:\r\n                    msg.role === \"assistant\"\r\n                      ? `linear-gradient(135deg, ${theme.colors.secondary}, ${theme.colors.primary})`\r\n                      : `linear-gradient(135deg, ${theme.colors.primary}, ${theme.colors.secondary})`,\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                  boxShadow: msg.role === \"assistant\" ? theme.glow.cyan : theme.glow.green,\r\n                }}\r\n              >\r\n                {msg.role === \"assistant\" ? (\r\n                  <Bot size={20} color=\"white\" />\r\n                ) : (\r\n                  <User size={20} color=\"white\" />\r\n                )}\r\n              </div>\r\n\r\n              {/* Message Content */}\r\n              <div style={{ flex: 1 }}>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.xs,\r\n                  }}\r\n                >\r\n                  {msg.role === \"assistant\" ? \"Claude AI\" : \"You\"} ΓÇó{\" \"}\r\n                  {msg.timestamp.toLocaleTimeString()}\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"14px\",\r\n                    color: theme.colors.text,\r\n                    lineHeight: \"1.6\",\r\n                    whiteSpace: \"pre-wrap\",\r\n                    wordBreak: \"break-word\",\r\n                  }}\r\n                >\r\n                  {msg.content}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          {isLoading && (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                gap: theme.spacing.md,\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  width: \"40px\",\r\n                  height: \"40px\",\r\n                  borderRadius: \"50%\",\r\n                  background: `linear-gradient(135deg, ${theme.colors.secondary}, ${theme.colors.primary})`,\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                  boxShadow: theme.glow.cyan,\r\n                }}\r\n              >\r\n                <Loader size={20} color=\"white\" className=\"animate-spin\" />\r\n              </div>\r\n              <div style={{ fontSize: \"14px\", color: theme.colors.textMuted }}>\r\n                Claude is thinking...\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* Quick Questions */}\r\n        {messages.length === 1 && (\r\n          <div style={{ marginBottom: theme.spacing.lg }}>\r\n            <div\r\n              style={{\r\n                fontSize: \"12px\",\r\n                color: theme.colors.textMuted,\r\n                marginBottom: theme.spacing.sm,\r\n                textTransform: \"uppercase\",\r\n                letterSpacing: \"0.5px\",\r\n              }}\r\n            >\r\n              Quick Questions:\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(2, 1fr)\",\r\n                gap: theme.spacing.sm,\r\n              }}\r\n            >\r\n              {quickQuestions.map((q, idx) => (\r\n                <button\r\n                  key={idx}\r\n                  onClick={() => setInput(q)}\r\n                  style={{\r\n                    padding: theme.spacing.sm,\r\n                    background: \"rgba(6, 182, 212, 0.1)\",\r\n                    border: `1px solid ${theme.colors.secondary}`,\r\n                    borderRadius: theme.borderRadius.md,\r\n                    color: theme.colors.text,\r\n                    fontSize: \"13px\",\r\n                    cursor: \"pointer\",\r\n                    textAlign: \"left\",\r\n                    transition: \"all 0.2s\",\r\n                  }}\r\n                  onMouseEnter={(e) => {\r\n                    e.currentTarget.style.background = \"rgba(6, 182, 212, 0.2)\";\r\n                    e.currentTarget.style.borderColor = theme.colors.secondary;\r\n                  }}\r\n                  onMouseLeave={(e) => {\r\n                    e.currentTarget.style.background = \"rgba(6, 182, 212, 0.1)\";\r\n                    e.currentTarget.style.borderColor = theme.colors.secondary;\r\n                  }}\r\n                >\r\n                  {q}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Input Area */}\r\n        <div style={{ display: \"flex\", gap: theme.spacing.sm }}>\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            disabled={isLoading}\r\n            placeholder=\"Ask about market regime, patterns, strategies...\"\r\n            style={{\r\n              flex: 1,\r\n              padding: \"12px 16px\",\r\n              background: \"rgba(15, 23, 42, 0.5)\",\r\n              border: `1px solid ${theme.colors.border}`,\r\n              borderRadius: theme.borderRadius.md,\r\n              color: theme.colors.text,\r\n              fontSize: \"14px\",\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={sendMessage}\r\n            loading={isLoading}\r\n            disabled={!input.trim() || isLoading}\r\n            variant=\"primary\"\r\n          >\r\n            <Send size={18} />\r\n          </Button>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\CommandPalette.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\CompanyHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\CompletePaiiDLogo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\EnhancedDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\EnhancedRadialMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ExecuteTradeForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\GlassmorphicComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\HelpPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\HelpTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\IndicatorPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\KeyboardShortcuts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\KillSwitchToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\LiveTicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MLAnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MLModelManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MLTrainingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MarketScanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MobileDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MonitorDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MorningRoutineAI.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\NewsArticleList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\NewsReview.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchNews' and 'searchSymbol'. Either include them or remove the dependency array.","line":156,"column":6,"nodeType":"ArrayExpression","endLine":156,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchNews, searchSymbol]","fix":{"range":[4947,4949],"text":"[fetchNews, searchSymbol]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":654,"column":21,"nodeType":"JSXOpeningElement","endLine":667,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\OptionsGreeksDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\OrderHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\PatternBacktestDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\PerformanceOptimizer.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":173,"column":9,"nodeType":"JSXOpeningElement","endLine":181,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\PortfolioOptimizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\PortfolioTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\PositionsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\RadialMenu.ORIGINAL.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'centerContentSpacing'. Either exclude it or remove the dependency array.","line":877,"column":6,"nodeType":"ArrayExpression","endLine":889,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [menuSize, fontSizes, onWorkflowSelect, onWorkflowHover, isMarketDataLoading, marketData.dow.value, marketData.dow.change, marketData.nasdaq.value, marketData.nasdaq.change, forceFieldConfidence]","fix":{"range":[29390,29668],"text":"[menuSize, fontSizes, onWorkflowSelect, onWorkflowHover, isMarketDataLoading, marketData.dow.value, marketData.dow.change, marketData.nasdaq.value, marketData.nasdaq.change, forceFieldConfidence]"}}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":194,"column":34,"nodeType":"Identifier","endLine":194,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[8287,8353],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":300,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":300,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[10389,10462],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable no-console */\r\nimport * as d3 from \"d3\";\r\nimport { throttle } from \"lodash\";\r\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { useIsMobile, useWindowDimensions } from \"../hooks/useBreakpoint\";\r\nimport { LOGO_ANIMATION_KEYFRAME } from \"../styles/logoConstants\";\r\nimport CompletePaiiDLogo from \"./CompletePaiiDLogo\";\r\n\r\nexport interface Workflow {\r\n  id: string;\r\n  name: string;\r\n  color: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\ninterface RadialMenuProps {\r\n  onWorkflowSelect: (workflowId: string) => void;\r\n  onWorkflowHover?: (workflow: Workflow | null) => void;\r\n  selectedWorkflow?: string;\r\n  compact?: boolean;\r\n}\r\n\r\nexport const workflows: Workflow[] = [\r\n  {\r\n    id: \"morning-routine\",\r\n    name: \"MORNING\\nROUTINE\",\r\n    color: \"#00ACC1\",\r\n    icon: \"≡ƒîà\",\r\n    description: \"Start your day with market analysis, portfolio review, and trading alerts.\",\r\n  },\r\n  {\r\n    id: \"news-review\",\r\n    name: \"NEWS\\nREVIEW\",\r\n    color: \"#7E57C2\",\r\n    icon: \"≡ƒô░\",\r\n    description: \"Real-time market news aggregation with AI-powered sentiment analysis.\",\r\n  },\r\n  {\r\n    id: \"proposals\",\r\n    name: \"AI\\nRECS\",\r\n    color: \"#0097A7\",\r\n    icon: \"≡ƒñû\",\r\n    description: \"Review AI-generated trading recommendations and strategy proposals.\",\r\n  },\r\n  {\r\n    id: \"active-positions\",\r\n    name: \"ACTIVE\\nPOSITIONS\",\r\n    color: \"#00C851\",\r\n    icon: \"≡ƒôè\",\r\n    description: \"Monitor and manage your current open positions and orders.\",\r\n  },\r\n  {\r\n    id: \"pnl-dashboard\",\r\n    name: \"P&L\\nDASHBOARD\",\r\n    color: \"#FF8800\",\r\n    icon: \"≡ƒÆ░\",\r\n    description: \"Analytics, performance metrics, equity curves, and trading statistics.\",\r\n  },\r\n  {\r\n    id: \"strategy-builder\",\r\n    name: \"STRATEGY\\nBUILDER\",\r\n    color: \"#5E35B1\",\r\n    icon: \"≡ƒÄ»\",\r\n    description: \"Design and test custom trading strategies with drag-and-drop rules.\",\r\n  },\r\n  {\r\n    id: \"backtesting\",\r\n    name: \"BACK\\nTESTING\",\r\n    color: \"#00BCD4\",\r\n    icon: \"≡ƒôê\",\r\n    description: \"Test strategies against historical data to validate performance.\",\r\n  },\r\n  {\r\n    id: \"execute\",\r\n    name: \"EXECUTE\",\r\n    color: \"#FF4444\",\r\n    icon: \"ΓÜí\",\r\n    description: \"Execute trades with pre-filled orders and real-time confirmation.\",\r\n  },\r\n  {\r\n    id: \"options-trading\",\r\n    name: \"OPTIONS\\nTRADING\",\r\n    color: \"#8B5CF6\",\r\n    icon: \"≡ƒôê\",\r\n    description: \"Options chain viewer with Greeks, multi-leg strategies, and execution.\",\r\n  },\r\n  {\r\n    id: \"monitor\",\r\n    name: \"REPO\\nMONITOR\",\r\n    color: \"#10B981\",\r\n    icon: \"≡ƒöì\",\r\n    description: \"GitHub repository monitoring with real-time activity tracking and metrics.\",\r\n  },\r\n  {\r\n    id: \"settings\",\r\n    name: \"SETTINGS\",\r\n    color: \"#64748b\",\r\n    icon: \"ΓÜÖ∩╕Å\",\r\n    description: \"Trading journal, risk control, and system configuration.\",\r\n  },\r\n];\r\n\r\n// Memoized logo component - prevents re-renders from parent state changes\r\nconst MemoizedCenterLogo = memo(({ isMobile }: { isMobile: boolean }) => (\r\n  <CompletePaiiDLogo size={isMobile ? 38 : 58} enableModal={true} />\r\n));\r\nMemoizedCenterLogo.displayName = \"MemoizedCenterLogo\";\r\n\r\nconst MemoizedHeaderLogo = memo(\r\n  ({ isMobile, setShowAIChat }: { isMobile: boolean; setShowAIChat: (val: boolean) => void }) => (\r\n    <div onClick={() => setShowAIChat(true)} style={{ cursor: \"pointer\" }}>\r\n      <CompletePaiiDLogo size={isMobile ? 64 : 96} />\r\n    </div>\r\n  )\r\n);\r\nMemoizedHeaderLogo.displayName = \"MemoizedHeaderLogo\";\r\n\r\nfunction RadialMenuComponent({\r\n  onWorkflowSelect,\r\n  onWorkflowHover,\r\n  selectedWorkflow,\r\n  compact,\r\n}: RadialMenuProps) {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const svgRef = useRef<SVGSVGElement>(null);\r\n  const [_hoveredWorkflow, setHoveredWorkflow] = useState<Workflow | null>(null);\r\n  const [_showAIChat, setShowAIChat] = useState(false);\r\n  const [marketData, setMarketData] = useState({\r\n    dow: { value: 0, change: 0, symbol: \"DJI\" },\r\n    nasdaq: { value: 0, change: 0, symbol: \"COMP\" },\r\n    lastUpdate: 0,\r\n  });\r\n  const [forceFieldConfidence, setForceFieldConfidence] = useState(0);\r\n  const [isMarketDataLoading, setIsMarketDataLoading] = useState(true);\r\n  const [_sseConnected, setSseConnected] = useState(false);\r\n  const [_sseRetryCount, setSseRetryCount] = useState(0);\r\n  const [marketStatus, _setMarketStatus] = useState<{\r\n    is_open: boolean;\r\n    state: string;\r\n    description: string;\r\n  } | null>(null);\r\n\r\n  // Responsive sizing\r\n  const { width: viewportWidth } = useWindowDimensions();\r\n  const isMobile = useIsMobile();\r\n\r\n  // Memoize responsive menu size - only recalculate when dependencies change\r\n  const menuSize = useMemo(() => {\r\n    if (isMobile) {\r\n      // Mobile: 90% of viewport width, max 675px (35% increase from 500)\r\n      return Math.min(viewportWidth * 0.9, 675);\r\n    }\r\n\r\n    // Desktop: Responsive to viewport width for split-screen mode\r\n    // When viewport < 1900px (typical split screen), scale down proportionally\r\n    if (viewportWidth < 1900) {\r\n      return Math.min(viewportWidth * 0.85, 945);\r\n    }\r\n\r\n    // Desktop full screen: Standard 945px (35% increase from 700)\r\n    return 945;\r\n  }, [isMobile, viewportWidth]);\r\n\r\n  // Memoize responsive font sizes - only recalculate when isMobile changes\r\n  const fontSizes = useMemo(() => {\r\n    if (isMobile) {\r\n      return {\r\n        headerLogo: \"65px\", // 48 ├ù 1.35\r\n        headerSubtitle1: \"22px\", // 16 ├ù 1.35\r\n        headerSubtitle2: \"19px\", // 14 ├ù 1.35\r\n        segmentText: \"22px\", // 16 ├ù 1.35\r\n        centerLogo: \"27px\", // 20 ├ù 1.35\r\n        marketLabel: \"9px\", // 7 ├ù 1.35 Γëê 9\r\n        marketValue: \"16px\", // 12 ├ù 1.35 Γëê 16\r\n        marketChange: \"11px\", // 8 ├ù 1.35 Γëê 11\r\n      };\r\n    }\r\n    // Desktop sizes - scaled up 35% for better readability\r\n    return {\r\n      headerLogo: \"130px\", // 96 ├ù 1.35\r\n      headerSubtitle1: \"30px\", // 22 ├ù 1.35\r\n      headerSubtitle2: \"24px\", // 18 ├ù 1.35\r\n      segmentText: \"30px\", // 22 ├ù 1.35\r\n      centerLogo: \"43px\", // 32 ├ù 1.35\r\n      marketLabel: \"12px\", // 9 ├ù 1.35\r\n      marketValue: \"22px\", // 16 ├ù 1.35\r\n      marketChange: \"14px\", // 10 ├ù 1.35\r\n    };\r\n  }, [isMobile]);\r\n\r\n  // Throttled market data update - prevents animation interruptions\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const throttledSetMarketData = useCallback(\r\n    throttle((newData: typeof marketData) => {\r\n      setMarketData(newData);\r\n      console.info(\"[RadialMenu] ≡ƒÄ» Market data updated (throttled)\");\r\n    }, 10000), // Update max once per 10 seconds\r\n    []\r\n  );\r\n\r\n  // ΓÜí REAL-TIME STREAMING: SSE for market data with auto-reconnection\r\n  useEffect(() => {\r\n    let eventSource: EventSource | null = null;\r\n    let reconnectTimeout: NodeJS.Timeout | null = null;\r\n    let isUnmounted = false;\r\n\r\n    // Load cached market data on mount\r\n    const loadCachedData = () => {\r\n      try {\r\n        const cached = localStorage.getItem(\"paiid-market-data\");\r\n        if (cached) {\r\n          const parsed = JSON.parse(cached);\r\n          // Only use cache if it's less than 24 hours old\r\n          if (parsed.timestamp && Date.now() - parsed.timestamp < 24 * 60 * 60 * 1000) {\r\n            console.info(\"[RadialMenu] ≡ƒÆ╛ Loading cached market data from localStorage\");\r\n            setMarketData(parsed.data);\r\n            setIsMarketDataLoading(false);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[RadialMenu] Γ¥î Failed to load cached market data:\", error);\r\n      }\r\n    };\r\n\r\n    // SSE connection with exponential backoff retry\r\n    const connectSSE = (retryAttempt = 0) => {\r\n      if (isUnmounted) return;\r\n\r\n      const maxRetries = 10;\r\n      const baseDelay = 2000; // 2 seconds\r\n\r\n      if (retryAttempt >= maxRetries) {\r\n        console.error(\"[RadialMenu] ≡ƒÜ¿ Max SSE retry attempts reached. Giving up.\");\r\n        setIsMarketDataLoading(false);\r\n        return;\r\n      }\r\n\r\n      console.info(\r\n        `[RadialMenu] ≡ƒôí Connecting to SSE stream (attempt ${retryAttempt + 1}/${maxRetries})...`\r\n      );\r\n      setSseRetryCount(retryAttempt);\r\n\r\n      try {\r\n        eventSource = new EventSource(\"/api/proxy/stream/market-indices\");\r\n\r\n        eventSource.addEventListener(\"indices_update\", (e) => {\r\n          const data = JSON.parse(e.data);\r\n          console.debug(\"[RadialMenu] ≡ƒôè Received live market data:\", data);\r\n\r\n          const now = Date.now();\r\n          const newData = {\r\n            dow: {\r\n              value: data.dow?.last || 0,\r\n              change: data.dow?.changePercent || 0,\r\n              symbol: \"DJI\",\r\n            },\r\n            nasdaq: {\r\n              value: data.nasdaq?.last || 0,\r\n              change: data.nasdaq?.changePercent || 0,\r\n              symbol: \"COMP\",\r\n            },\r\n            lastUpdate: now,\r\n          };\r\n\r\n          // Calculate Force Field Confidence (0-100%)\r\n          // Based on: data freshness, market stability, and connection quality\r\n          const dataFreshness = 100; // Fresh data just received\r\n          const marketVolatility = Math.abs(newData.dow.change) + Math.abs(newData.nasdaq.change);\r\n          const stabilityScore = Math.max(0, 100 - marketVolatility * 10); // Lower volatility = higher confidence\r\n          const connectionScore = retryAttempt === 0 ? 100 : Math.max(0, 100 - retryAttempt * 10);\r\n          \r\n          const confidence = Math.round((dataFreshness * 0.4 + stabilityScore * 0.4 + connectionScore * 0.2));\r\n          setForceFieldConfidence(Math.min(100, Math.max(0, confidence)));\r\n\r\n          // Use throttled update to prevent logo animation interruptions\r\n          throttledSetMarketData(newData);\r\n\r\n          // Mark as connected and loading complete\r\n          setSseConnected(true);\r\n          setIsMarketDataLoading(false);\r\n          setSseRetryCount(0); // Reset retry count on success\r\n\r\n          // Cache the data in localStorage (immediate, not throttled)\r\n          try {\r\n            localStorage.setItem(\r\n              \"paiid-market-data\",\r\n              JSON.stringify({\r\n                data: newData,\r\n                timestamp: Date.now(),\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.error(\"[RadialMenu] Γ¥î Failed to cache market data:\", error);\r\n          }\r\n        });\r\n\r\n        eventSource.addEventListener(\"heartbeat\", (e) => {\r\n          const data = JSON.parse(e.data);\r\n          console.debug(\"[RadialMenu] ≡ƒÆô SSE heartbeat received:\", data.timestamp);\r\n        });\r\n\r\n        eventSource.addEventListener(\"error\", (e) => {\r\n          console.error(\"[RadialMenu] Γ¥î SSE connection error:\", e);\r\n          setSseConnected(false);\r\n\r\n          if (eventSource) {\r\n            eventSource.close();\r\n            eventSource = null;\r\n          }\r\n\r\n          // Exponential backoff: 2s, 4s, 8s, 16s, 32s, 64s, 128s (max ~2min)\r\n          const delay = Math.min(baseDelay * Math.pow(2, retryAttempt), 128000);\r\n          console.warn(\r\n            `[RadialMenu] ΓÜá∩╕Å SSE disconnected. Retrying in ${delay / 1000}s... (attempt ${retryAttempt + 1}/${maxRetries})`\r\n          );\r\n\r\n          reconnectTimeout = setTimeout(() => {\r\n            connectSSE(retryAttempt + 1);\r\n          }, delay);\r\n        });\r\n\r\n        eventSource.addEventListener(\"open\", () => {\r\n          console.info(\"[RadialMenu] Γ£à SSE connection established\");\r\n          setSseConnected(true);\r\n        });\r\n      } catch (error) {\r\n        console.error(\"[RadialMenu] Γ¥î Failed to create EventSource:\", error);\r\n        setSseConnected(false);\r\n\r\n        // Retry with exponential backoff\r\n        const delay = Math.min(baseDelay * Math.pow(2, retryAttempt), 128000);\r\n        reconnectTimeout = setTimeout(() => {\r\n          connectSSE(retryAttempt + 1);\r\n        }, delay);\r\n      }\r\n    };\r\n\r\n    // Initialize\r\n    loadCachedData();\r\n    connectSSE(0);\r\n\r\n    // Cleanup: close SSE connection on unmount\r\n    return () => {\r\n      isUnmounted = true;\r\n      console.info(\"[RadialMenu] ≡ƒöî Closing SSE connection\");\r\n\r\n      if (reconnectTimeout) {\r\n        clearTimeout(reconnectTimeout);\r\n      }\r\n\r\n      if (eventSource) {\r\n        eventSource.close();\r\n      }\r\n    };\r\n  }, [throttledSetMarketData]);\r\n\r\n  // Debug logging for Fast Refresh loop detection\r\n  useEffect(() => {\r\n    console.info(\"RadialMenu rendered with selectedWorkflow:\", selectedWorkflow);\r\n  }, [selectedWorkflow]);\r\n\r\n  useEffect(() => {\r\n    if (!svgRef.current) return;\r\n\r\n    // Γ£à EXTENSION VERIFICATION: D3.js\r\n    console.info(\"[Extension Verification] Γ£à D3.js loaded successfully:\", {\r\n      version: d3.version,\r\n      modules: [\"select\", \"pie\", \"arc\", \"selectAll\"],\r\n      status: \"FUNCTIONAL\",\r\n    });\r\n\r\n    const width = menuSize;\r\n    const height = menuSize;\r\n    const radius = Math.min(width, height) / 2;\r\n    const innerRadius = radius * 0.3;\r\n    const outerRadius = radius * 0.9;\r\n\r\n    // Calculate responsive center content positions based on innerRadius\r\n    // This ensures proper spacing regardless of menu size (500px mobile ΓåÆ 700px desktop)\r\n    const centerContentSpacing = {\r\n      logoOffset: -(innerRadius * 0.55), // Logo at top of circle (reduced from 0.65 to stay within bounds)\r\n      dowOffset: -(innerRadius * 0.25), // DOW below logo (increased from 0.15 to move up more)\r\n      nasdaqOffset: innerRadius * 0.45, // NASDAQ below DOW (increased from 0.30 for more spacing)\r\n      statusBadgeOffset: innerRadius * 0.7, // Status badge at bottom\r\n    };\r\n\r\n    // Debug log positioning\r\n    console.info(\"[RadialMenu] Center positioning:\", {\r\n      innerRadius,\r\n      menuSize,\r\n      centerContentSpacing,\r\n    });\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const defs = svg.append(\"defs\");\r\n\r\n    // ====== SVG FILTERS ======\r\n\r\n    // Normal shadow filter\r\n    const normalShadow = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"normalShadow\")\r\n      .attr(\"height\", \"150%\")\r\n      .attr(\"width\", \"150%\");\r\n    normalShadow.append(\"feGaussianBlur\").attr(\"in\", \"SourceAlpha\").attr(\"stdDeviation\", \"3\");\r\n    normalShadow.append(\"feOffset\").attr(\"dx\", \"0\").attr(\"dy\", \"2\").attr(\"result\", \"offsetblur\");\r\n    normalShadow\r\n      .append(\"feComponentTransfer\")\r\n      .append(\"feFuncA\")\r\n      .attr(\"type\", \"linear\")\r\n      .attr(\"slope\", \"0.4\");\r\n    const normalMerge = normalShadow.append(\"feMerge\");\r\n    normalMerge.append(\"feMergeNode\");\r\n    normalMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n    // Hover glow filter\r\n    const hoverGlow = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"hoverGlow\")\r\n      .attr(\"height\", \"200%\")\r\n      .attr(\"width\", \"200%\")\r\n      .attr(\"x\", \"-50%\")\r\n      .attr(\"y\", \"-50%\");\r\n    hoverGlow\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"8\")\r\n      .attr(\"result\", \"blur\");\r\n    hoverGlow.append(\"feFlood\").attr(\"flood-color\", \"#00ffff\").attr(\"flood-opacity\", \"0.6\");\r\n    hoverGlow\r\n      .append(\"feComposite\")\r\n      .attr(\"in2\", \"blur\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"glow\");\r\n    const hoverMerge = hoverGlow.append(\"feMerge\");\r\n    hoverMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    hoverMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    hoverMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n    // Click glow filter\r\n    const clickGlow = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"clickGlow\")\r\n      .attr(\"height\", \"300%\")\r\n      .attr(\"width\", \"300%\")\r\n      .attr(\"x\", \"-100%\")\r\n      .attr(\"y\", \"-100%\");\r\n    clickGlow\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"12\")\r\n      .attr(\"result\", \"blur\");\r\n    clickGlow.append(\"feFlood\").attr(\"flood-color\", \"#ffffff\").attr(\"flood-opacity\", \"0.8\");\r\n    clickGlow\r\n      .append(\"feComposite\")\r\n      .attr(\"in2\", \"blur\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"glow\");\r\n    const clickMerge = clickGlow.append(\"feMerge\");\r\n    clickMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    clickMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    clickMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    clickMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n    // Inner shadow filter\r\n    const innerShadow = defs.append(\"filter\").attr(\"id\", \"innerShadow\");\r\n    innerShadow\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"3\")\r\n      .attr(\"result\", \"blur\");\r\n    innerShadow\r\n      .append(\"feOffset\")\r\n      .attr(\"in\", \"blur\")\r\n      .attr(\"dx\", \"0\")\r\n      .attr(\"dy\", \"2\")\r\n      .attr(\"result\", \"offsetBlur\");\r\n    innerShadow\r\n      .append(\"feFlood\")\r\n      .attr(\"flood-color\", \"#000000\")\r\n      .attr(\"flood-opacity\", \"0.5\")\r\n      .attr(\"result\", \"color\");\r\n    innerShadow\r\n      .append(\"feComposite\")\r\n      .attr(\"in\", \"color\")\r\n      .attr(\"in2\", \"offsetBlur\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"shadow\");\r\n    innerShadow\r\n      .append(\"feComposite\")\r\n      .attr(\"in\", \"shadow\")\r\n      .attr(\"in2\", \"SourceAlpha\")\r\n      .attr(\"operator\", \"in\");\r\n    const innerMerge = innerShadow.append(\"feMerge\");\r\n    innerMerge.append(\"feMergeNode\");\r\n    innerMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n    // Sparkles filter\r\n    const sparkles = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"sparkles\")\r\n      .attr(\"x\", \"-50%\")\r\n      .attr(\"y\", \"-50%\")\r\n      .attr(\"width\", \"200%\")\r\n      .attr(\"height\", \"200%\");\r\n    sparkles\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"2\")\r\n      .attr(\"result\", \"blur\");\r\n    sparkles\r\n      .append(\"feSpecularLighting\")\r\n      .attr(\"in\", \"blur\")\r\n      .attr(\"surfaceScale\", \"5\")\r\n      .attr(\"specularConstant\", \"0.75\")\r\n      .attr(\"specularExponent\", \"20\")\r\n      .attr(\"lighting-color\", \"#ffffff\")\r\n      .attr(\"result\", \"spec\")\r\n      .append(\"fePointLight\")\r\n      .attr(\"x\", \"0\")\r\n      .attr(\"y\", \"0\")\r\n      .attr(\"z\", \"100\");\r\n    sparkles\r\n      .append(\"feComposite\")\r\n      .attr(\"in\", \"spec\")\r\n      .attr(\"in2\", \"SourceAlpha\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"specOut\");\r\n    const sparkleMerge = sparkles.append(\"feMerge\");\r\n    sparkleMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n    sparkleMerge.append(\"feMergeNode\").attr(\"in\", \"specOut\");\r\n\r\n    // AI Glow filter for center logo\r\n    const aiGlow = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"aiGlow\")\r\n      .attr(\"x\", \"-50%\")\r\n      .attr(\"y\", \"-50%\")\r\n      .attr(\"width\", \"200%\")\r\n      .attr(\"height\", \"200%\");\r\n    aiGlow.append(\"feGaussianBlur\").attr(\"stdDeviation\", \"4\").attr(\"result\", \"coloredBlur\");\r\n    const aiMerge = aiGlow.append(\"feMerge\");\r\n    aiMerge.append(\"feMergeNode\").attr(\"in\", \"coloredBlur\");\r\n    aiMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n    // ====== GRADIENTS ======\r\n\r\n    // Center gradient\r\n    const centerGradient = defs.append(\"radialGradient\").attr(\"id\", \"centerGradient\");\r\n    centerGradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", \"#0f172a\");\r\n    centerGradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"#1e293b\");\r\n\r\n    // Animated radial gradients for each wedge with wave effects\r\n    workflows.forEach((workflow, i) => {\r\n      const wedgeGradient = defs\r\n        .append(\"radialGradient\")\r\n        .attr(\"id\", `wedgeGradient${i}`)\r\n        .attr(\"cx\", \"50%\")\r\n        .attr(\"cy\", \"50%\")\r\n        .attr(\"r\", \"50%\");\r\n\r\n      wedgeGradient\r\n        .append(\"stop\")\r\n        .attr(\"offset\", \"0%\")\r\n        .attr(\"stop-color\", workflow.color)\r\n        .attr(\"stop-opacity\", \"1\");\r\n\r\n      wedgeGradient\r\n        .append(\"stop\")\r\n        .attr(\"offset\", \"100%\")\r\n        .attr(\"stop-color\", workflow.color)\r\n        .attr(\"stop-opacity\", \"0.7\");\r\n\r\n      // Animate the gradient\r\n      wedgeGradient\r\n        .select(\"stop:first-child\")\r\n        .append(\"animate\")\r\n        .attr(\"attributeName\", \"stop-opacity\")\r\n        .attr(\"values\", \"1;0.8;1\")\r\n        .attr(\"dur\", \"3s\")\r\n        .attr(\"repeatCount\", \"indefinite\");\r\n    });\r\n\r\n    const g = svg\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\r\n\r\n    const pie = d3\r\n      .pie<Workflow>()\r\n      .value(1)\r\n      .sort(null)\r\n      .startAngle(-Math.PI / 2)\r\n      .padAngle(0.008);\r\n\r\n    const arc = d3\r\n      .arc<d3.PieArcDatum<Workflow>>()\r\n      .innerRadius(innerRadius)\r\n      .outerRadius(outerRadius)\r\n      .cornerRadius(3);\r\n\r\n    const hoverArc = d3\r\n      .arc<d3.PieArcDatum<Workflow>>()\r\n      .innerRadius(innerRadius)\r\n      .outerRadius(outerRadius + 12)\r\n      .cornerRadius(3);\r\n\r\n    const segments = g\r\n      .selectAll(\".segment\")\r\n      .data(pie(workflows))\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"segment\")\r\n      .style(\"cursor\", \"pointer\");\r\n\r\n    segments\r\n      .append(\"path\")\r\n      .attr(\"d\", arc)\r\n      .attr(\"fill\", (_d, i) => `url(#wedgeGradient${i})`)\r\n      .attr(\"stroke\", \"#000000\")\r\n      .attr(\"stroke-width\", 2)\r\n      .style(\"filter\", \"url(#normalShadow)\")\r\n      .on(\"mouseenter\", function (_event, d) {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(150)\r\n          .attr(\"d\", hoverArc as (d: unknown) => string)\r\n          .style(\"filter\", \"url(#hoverGlow)\");\r\n        setHoveredWorkflow(d.data);\r\n        if (onWorkflowHover) onWorkflowHover(d.data);\r\n      })\r\n      .on(\"mouseleave\", function () {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(150)\r\n          .attr(\"d\", arc as (d: unknown) => string)\r\n          .style(\"filter\", \"url(#normalShadow)\");\r\n        setHoveredWorkflow(null);\r\n        if (onWorkflowHover) onWorkflowHover(null);\r\n      })\r\n      .on(\"mousedown\", function () {\r\n        d3.select(this).style(\"filter\", \"url(#clickGlow)\");\r\n      })\r\n      .on(\"mouseup\", function () {\r\n        d3.select(this).style(\"filter\", \"url(#hoverGlow)\");\r\n      })\r\n      .on(\"click\", (_event, d) => {\r\n        console.info(\"RadialMenu: Workflow clicked:\", d.data.id);\r\n        onWorkflowSelect(d.data.id);\r\n      });\r\n\r\n    segments\r\n      .append(\"text\")\r\n      .attr(\"transform\", (d) => {\r\n        const [x, y] = arc.centroid(d);\r\n        return `translate(${x}, ${y})`;\r\n      })\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", fontSizes.segmentText)\r\n      .attr(\"font-weight\", \"900\")\r\n      .attr(\"font-style\", \"italic\")\r\n      .attr(\"fill\", \"white\")\r\n      .attr(\"letter-spacing\", \"1px\")\r\n      .style(\"text-shadow\", \"0 4px 12px rgba(0, 0, 0, 0.9), 0 2px 4px rgba(0, 0, 0, 0.8)\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .style(\"filter\", \"url(#sparkles)\")\r\n      .each(function (d) {\r\n        const lines = d.data.name.split(\"\\n\");\r\n        const text = d3.select(this);\r\n\r\n        lines.forEach((line, i) => {\r\n          text\r\n            .append(\"tspan\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"dy\", i === 0 ? \"-0.5em\" : \"1.3em\")\r\n            .text(line);\r\n        });\r\n      });\r\n\r\n    // ====== CENTER CIRCLE ======\r\n    const centerGroup = g\r\n      .append(\"g\")\r\n      .style(\"cursor\", \"pointer\")\r\n      .on(\"click\", () => onWorkflowSelect(\"\"));\r\n\r\n    centerGroup\r\n      .append(\"circle\")\r\n      .attr(\"r\", innerRadius - 15)\r\n      .attr(\"fill\", \"url(#centerGradient)\")\r\n      .attr(\"stroke\", \"#45f0c0\")\r\n      .attr(\"stroke-width\", 3)\r\n      .style(\"filter\", \"url(#innerShadow)\");\r\n\r\n    // Animated ring around center\r\n    centerGroup\r\n      .append(\"circle\")\r\n      .attr(\"r\", innerRadius - 15)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"#45f0c0\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"opacity\", 0.3)\r\n      .append(\"animate\")\r\n      .attr(\"attributeName\", \"opacity\")\r\n      .attr(\"values\", \"0.3;0.8;0.3\")\r\n      .attr(\"dur\", \"2s\")\r\n      .attr(\"repeatCount\", \"indefinite\");\r\n\r\n    // ====== CENTER LOGO (PaiiD) ======\r\n    // Note: Logo rendered as HTML overlay for CSS animation compatibility\r\n\r\n    // ====== MARKET DATA ======\r\n    const dow = centerGroup\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${centerContentSpacing.dowOffset})`);\r\n\r\n    dow\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", fontSizes.marketLabel)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", \"#cbd5e1\")\r\n      .attr(\"letter-spacing\", \"2px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\"DOW JONES INDUSTRIAL\");\r\n\r\n    dow\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"14\") // Reduced from 20 for tighter spacing\r\n      .attr(\"font-size\", fontSizes.marketValue)\r\n      .attr(\"font-weight\", \"900\")\r\n      .attr(\"fill\", \"#f1f5f9\")\r\n      .style(\"text-shadow\", \"0 2px 6px rgba(0, 0, 0, 0.6)\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\r\n        isMarketDataLoading && marketData.dow.value === 0\r\n          ? \"Loading...\"\r\n          : marketData.dow.value.toLocaleString(\"en-US\", { minimumFractionDigits: 2 })\r\n      );\r\n\r\n    const dowChange = dow\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"26\") // Reduced from 38 for tighter spacing\r\n      .attr(\"font-size\", fontSizes.marketChange)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", marketData.dow.change >= 0 ? \"#45f0c0\" : \"#ef4444\")\r\n      .style(\r\n        \"text-shadow\",\r\n        \"0 0 10px \" +\r\n          (marketData.dow.change >= 0 ? \"rgba(69, 240, 192, 0.5)\" : \"rgba(239, 68, 68, 0.5)\")\r\n      )\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\r\n        `${marketData.dow.change >= 0 ? \"Γû▓\" : \"Γû╝\"} ${Math.abs(marketData.dow.change).toFixed(2)}%`\r\n      );\r\n\r\n    // Animate market data\r\n    dowChange\r\n      .transition()\r\n      .duration(1000)\r\n      .style(\"opacity\", 0.7)\r\n      .transition()\r\n      .duration(1000)\r\n      .style(\"opacity\", 1)\r\n      .on(\"end\", function repeat() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(1000)\r\n          .style(\"opacity\", 0.7)\r\n          .transition()\r\n          .duration(1000)\r\n          .style(\"opacity\", 1)\r\n          .on(\"end\", repeat);\r\n      });\r\n\r\n    const nasdaqGroup = centerGroup\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${centerContentSpacing.nasdaqOffset})`);\r\n\r\n    nasdaqGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", fontSizes.marketLabel)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", \"#cbd5e1\")\r\n      .attr(\"letter-spacing\", \"2px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\"NASDAQ COMPOSITE\");\r\n\r\n    nasdaqGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"14\") // Reduced from 20 for tighter spacing\r\n      .attr(\"font-size\", fontSizes.marketValue)\r\n      .attr(\"font-weight\", \"900\")\r\n      .attr(\"fill\", \"#f1f5f9\")\r\n      .style(\"text-shadow\", \"0 2px 6px rgba(0, 0, 0, 0.6)\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\r\n        isMarketDataLoading && marketData.nasdaq.value === 0\r\n          ? \"Loading...\"\r\n          : marketData.nasdaq.value.toLocaleString(\"en-US\", { minimumFractionDigits: 2 })\r\n      );\r\n\r\n    const nasdaqChange = nasdaqGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"26\") // Reduced from 38 for tighter spacing\r\n      .attr(\"font-size\", fontSizes.marketChange)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", marketData.nasdaq.change >= 0 ? \"#45f0c0\" : \"#ef4444\")\r\n      .style(\r\n        \"text-shadow\",\r\n        \"0 0 10px \" +\r\n          (marketData.nasdaq.change >= 0 ? \"rgba(69, 240, 192, 0.5)\" : \"rgba(239, 68, 68, 0.5)\")\r\n      )\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\r\n        `${marketData.nasdaq.change >= 0 ? \"Γû▓\" : \"Γû╝\"} ${Math.abs(marketData.nasdaq.change).toFixed(2)}%`\r\n      );\r\n\r\n    // Animate market data\r\n    nasdaqChange\r\n      .transition()\r\n      .duration(1000)\r\n      .delay(500)\r\n      .style(\"opacity\", 0.7)\r\n      .transition()\r\n      .duration(1000)\r\n      .style(\"opacity\", 1)\r\n      .on(\"end\", function repeat() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(1000)\r\n          .style(\"opacity\", 0.7)\r\n          .transition()\r\n          .duration(1000)\r\n          .style(\"opacity\", 1)\r\n          .on(\"end\", repeat);\r\n      });\r\n\r\n    // ====== FORCE FIELD CONFIDENCE ======\r\n    const forceFieldGroup = centerGroup\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${-centerContentSpacing.dowOffset - 35})`);\r\n\r\n    forceFieldGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", fontSizes.marketLabel)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", \"#cbd5e1\")\r\n      .attr(\"letter-spacing\", \"1.5px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\"FORCE FIELD\");\r\n\r\n    const confidenceColor = \r\n      forceFieldConfidence >= 80 ? \"#45f0c0\" : \r\n      forceFieldConfidence >= 60 ? \"#fbbf24\" : \r\n      forceFieldConfidence >= 40 ? \"#fb923c\" : \"#ef4444\";\r\n\r\n    forceFieldGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"14\")\r\n      .attr(\"font-size\", `${parseInt(fontSizes.marketValue) * 1.3}px`)\r\n      .attr(\"font-weight\", \"900\")\r\n      .attr(\"fill\", confidenceColor)\r\n      .style(\"text-shadow\", `0 0 15px ${confidenceColor}80, 0 2px 8px rgba(0, 0, 0, 0.8)`)\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(`${forceFieldConfidence}%`);\r\n  }, [\r\n    menuSize,\r\n    fontSizes,\r\n    onWorkflowSelect,\r\n    onWorkflowHover,\r\n    isMarketDataLoading,\r\n    marketData.dow.value,\r\n    marketData.dow.change,\r\n    marketData.nasdaq.value,\r\n    marketData.nasdaq.change,\r\n    forceFieldConfidence,\r\n    centerContentSpacing,\r\n  ]); // Re-render when menu size or loading state changes\r\n\r\n  // Separate effect for market data updates - only update text when data changes\r\n  useEffect(() => {\r\n    if (!svgRef.current) return;\r\n\r\n    const svg = d3.select(svgRef.current);\r\n\r\n    // Update DOW value\r\n    svg\r\n      .selectAll(\"text\")\r\n      .filter(function () {\r\n        return (\r\n          d3\r\n            .select(this as SVGTextElement)\r\n            .text()\r\n            .includes(\".\") && d3.select(this as SVGTextElement).attr(\"dy\") === \"20\"\r\n        );\r\n      })\r\n      .each(function () {\r\n        const element = this as SVGTextElement;\r\n        const text = d3.select(element);\r\n        const parentNode = element.parentNode as SVGGElement;\r\n        const transform = d3.select(parentNode).attr(\"transform\");\r\n        if (transform && transform.includes(\"-15\")) {\r\n          // This is the DOW value text\r\n          text.text(marketData.dow.value.toLocaleString(\"en-US\", { minimumFractionDigits: 2 }));\r\n        } else if (transform && transform.includes(\"45\")) {\r\n          // This is the NASDAQ value text\r\n          text.text(marketData.nasdaq.value.toLocaleString(\"en-US\", { minimumFractionDigits: 2 }));\r\n        }\r\n      });\r\n\r\n    // Update change percentages\r\n    svg\r\n      .selectAll(\"text\")\r\n      .filter(function () {\r\n        return d3.select(this as SVGTextElement).attr(\"dy\") === \"38\";\r\n      })\r\n      .each(function () {\r\n        const element = this as SVGTextElement;\r\n        const text = d3.select(element);\r\n        const parentNode = element.parentNode as SVGGElement;\r\n        const transform = d3.select(parentNode).attr(\"transform\");\r\n        if (transform && transform.includes(\"-15\")) {\r\n          // DOW change\r\n          text\r\n            .attr(\"fill\", marketData.dow.change >= 0 ? \"#45f0c0\" : \"#ef4444\")\r\n            .style(\r\n              \"text-shadow\",\r\n              \"0 0 10px \" +\r\n                (marketData.dow.change >= 0 ? \"rgba(69, 240, 192, 0.5)\" : \"rgba(239, 68, 68, 0.5)\")\r\n            )\r\n            .text(\r\n              `${marketData.dow.change >= 0 ? \"Γû▓\" : \"Γû╝\"} ${Math.abs(marketData.dow.change).toFixed(2)}%`\r\n            );\r\n        } else if (transform && transform.includes(\"45\")) {\r\n          // NASDAQ change\r\n          text\r\n            .attr(\"fill\", marketData.nasdaq.change >= 0 ? \"#45f0c0\" : \"#ef4444\")\r\n            .style(\r\n              \"text-shadow\",\r\n              \"0 0 10px \" +\r\n                (marketData.nasdaq.change >= 0\r\n                  ? \"rgba(69, 240, 192, 0.5)\"\r\n                  : \"rgba(239, 68, 68, 0.5)\")\r\n            )\r\n            .text(\r\n              `${marketData.nasdaq.change >= 0 ? \"Γû▓\" : \"Γû╝\"} ${Math.abs(marketData.nasdaq.change).toFixed(2)}%`\r\n            );\r\n        }\r\n      });\r\n  }, [marketData]);\r\n\r\n  // Separate effect for selectedWorkflow updates - only update selected wedge styling\r\n  useEffect(() => {\r\n    if (!svgRef.current || !selectedWorkflow) return;\r\n\r\n    // Update only the selected wedge styling without full re-render\r\n    d3.select(svgRef.current)\r\n      .selectAll(\".segment path\")\r\n      .style(\"filter\", function (this: SVGPathElement, d: { data: { id: string } }) {\r\n        return d.data.id === selectedWorkflow ? \"url(#clickGlow)\" : \"url(#normalShadow)\";\r\n      });\r\n  }, [selectedWorkflow]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        background: \"linear-gradient(135deg, #0f1828 0%, #1a2a3f 100%)\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        padding: \"0\",\r\n      }}\r\n    >\r\n      {/* Title Header - only show in full screen mode */}\r\n      {!compact && (\r\n        <div style={{ textAlign: \"center\", marginBottom: \"10px\" }}>\r\n          <MemoizedHeaderLogo isMobile={isMobile} setShowAIChat={setShowAIChat} />\r\n        </div>\r\n      )}\r\n\r\n      {/* SVG Radial Menu */}\r\n      <div style={{ position: \"relative\" }}>\r\n        <svg ref={svgRef} className=\"drop-shadow-2xl\" />\r\n\r\n        {/* Center Logo Overlay - perfectly centered in circle */}\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            pointerEvents: \"auto\",\r\n          }}\r\n        >\r\n          <MemoizedCenterLogo isMobile={isMobile} />\r\n        </div>\r\n\r\n        {/* Market Status Badge */}\r\n        {marketStatus && (\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              transform: \"translate(-50%, -50%)\",\r\n              marginTop: `${(menuSize / 2) * 0.3 * 0.75}px`, // Responsive: matches centerContentSpacing.statusBadgeOffset\r\n              pointerEvents: \"none\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"inline-flex\",\r\n                alignItems: \"center\",\r\n                gap: \"6px\",\r\n                padding: isMobile ? \"4px 10px\" : \"6px 14px\",\r\n                background: marketStatus.is_open\r\n                  ? \"rgba(69, 240, 192, 0.15)\"\r\n                  : \"rgba(239, 68, 68, 0.15)\",\r\n                border: `1px solid ${marketStatus.is_open ? \"rgba(69, 240, 192, 0.4)\" : \"rgba(239, 68, 68, 0.4)\"}`,\r\n                borderRadius: \"20px\",\r\n                backdropFilter: \"blur(10px)\",\r\n                boxShadow: marketStatus.is_open\r\n                  ? \"0 0 15px rgba(69, 240, 192, 0.2)\"\r\n                  : \"0 0 15px rgba(239, 68, 68, 0.2)\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  width: isMobile ? \"6px\" : \"8px\",\r\n                  height: isMobile ? \"6px\" : \"8px\",\r\n                  borderRadius: \"50%\",\r\n                  background: marketStatus.is_open ? \"#45f0c0\" : \"#ef4444\",\r\n                  boxShadow: `0 0 8px ${marketStatus.is_open ? \"rgba(69, 240, 192, 0.6)\" : \"rgba(239, 68, 68, 0.6)\"}`,\r\n                  animation: marketStatus.is_open ? \"pulse-open 2s ease-in-out infinite\" : \"none\",\r\n                }}\r\n              />\r\n              <div\r\n                style={{\r\n                  fontSize: isMobile ? \"9px\" : \"11px\",\r\n                  fontWeight: \"800\",\r\n                  letterSpacing: \"1px\",\r\n                  textTransform: \"uppercase\",\r\n                  color: marketStatus.is_open ? \"#45f0c0\" : \"#ef4444\",\r\n                }}\r\n              >\r\n                {marketStatus.state === \"open\" && \"Market Open\"}\r\n                {marketStatus.state === \"premarket\" && \"Pre-Market\"}\r\n                {marketStatus.state === \"postmarket\" && \"After Hours\"}\r\n                {marketStatus.state === \"closed\" && \"Market Closed\"}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* CSS Animations */}\r\n      <style jsx>{`\r\n        ${LOGO_ANIMATION_KEYFRAME}\r\n\r\n        @keyframes pulse-open {\r\n          0%,\r\n          100% {\r\n            opacity: 1;\r\n            transform: scale(1);\r\n          }\r\n          50% {\r\n            opacity: 0.7;\r\n            transform: scale(1.2);\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Export memoized component - prevents unnecessary re-renders when props haven't changed\r\nexport default memo(RadialMenuComponent, (prevProps, nextProps) => {\r\n  // Custom comparison: only re-render if these props actually changed\r\n  return (\r\n    prevProps.selectedWorkflow === nextProps.selectedWorkflow &&\r\n    prevProps.compact === nextProps.compact &&\r\n    prevProps.onWorkflowSelect === nextProps.onWorkflowSelect &&\r\n    prevProps.onWorkflowHover === nextProps.onWorkflowHover\r\n  );\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\RadialMenu.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'centerContentSpacing'. Either exclude it or remove the dependency array.","line":954,"column":6,"nodeType":"ArrayExpression","endLine":966,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [menuSize, fontSizes, onWorkflowSelect, onWorkflowHover, isMarketDataLoading, marketData.dow.value, marketData.dow.change, marketData.nasdaq.value, marketData.nasdaq.change, forceFieldConfidence]","fix":{"range":[31665,31943],"text":"[menuSize, fontSizes, onWorkflowSelect, onWorkflowHover, isMarketDataLoading, marketData.dow.value, marketData.dow.change, marketData.nasdaq.value, marketData.nasdaq.change, forceFieldConfidence]"}}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":201,"column":34,"nodeType":"Identifier","endLine":201,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[8517,8583],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[10633,10706],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable no-console */\r\nimport * as d3 from \"d3\";\r\nimport { throttle } from \"lodash\";\r\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { useIsMobile, useWindowDimensions } from \"../hooks/useBreakpoint\";\r\nimport { LOGO_ANIMATION_KEYFRAME } from \"../styles/logoConstants\";\r\nimport CompletePaiiDLogo from \"./CompletePaiiDLogo\";\r\n\r\nexport interface Workflow {\r\n  id: string;\r\n  name: string;\r\n  color: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\ninterface RadialMenuProps {\r\n  onWorkflowSelect: (workflowId: string) => void;\r\n  onWorkflowHover?: (workflow: Workflow | null) => void;\r\n  selectedWorkflow?: string;\r\n  compact?: boolean;\r\n}\r\n\r\nexport const workflows: Workflow[] = [\r\n  {\r\n    id: \"morning-routine\",\r\n    name: \"MORNING\\nROUTINE\",\r\n    color: \"#00ACC1\",\r\n    icon: \"≡ƒîà\",\r\n    description: \"Start your day with market analysis, portfolio review, and trading alerts.\",\r\n  },\r\n  {\r\n    id: \"news-review\",\r\n    name: \"NEWS\\nREVIEW\",\r\n    color: \"#7E57C2\",\r\n    icon: \"≡ƒô░\",\r\n    description: \"Real-time market news aggregation with AI-powered sentiment analysis.\",\r\n  },\r\n  {\r\n    id: \"proposals\",\r\n    name: \"AI\\nRECS\",\r\n    color: \"#0097A7\",\r\n    icon: \"≡ƒñû\",\r\n    description: \"Review AI-generated trading recommendations and strategy proposals.\",\r\n  },\r\n  {\r\n    id: \"active-positions\",\r\n    name: \"ACTIVE\\nPOSITIONS\",\r\n    color: \"#00C851\",\r\n    icon: \"≡ƒôè\",\r\n    description: \"Monitor and manage your current open positions and orders.\",\r\n  },\r\n  {\r\n    id: \"pnl-dashboard\",\r\n    name: \"P&L\\nDASHBOARD\",\r\n    color: \"#FF8800\",\r\n    icon: \"≡ƒÆ░\",\r\n    description: \"Analytics, performance metrics, equity curves, and trading statistics.\",\r\n  },\r\n  {\r\n    id: \"strategy-builder\",\r\n    name: \"STRATEGY\\nBUILDER\",\r\n    color: \"#5E35B1\",\r\n    icon: \"≡ƒÄ»\",\r\n    description: \"Design and test custom trading strategies with drag-and-drop rules.\",\r\n  },\r\n  {\r\n    id: \"backtesting\",\r\n    name: \"BACK\\nTESTING\",\r\n    color: \"#00BCD4\",\r\n    icon: \"≡ƒôê\",\r\n    description: \"Test strategies against historical data to validate performance.\",\r\n  },\r\n  {\r\n    id: \"execute\",\r\n    name: \"EXECUTE\",\r\n    color: \"#FF4444\",\r\n    icon: \"ΓÜí\",\r\n    description: \"Execute trades with pre-filled orders and real-time confirmation.\",\r\n  },\r\n  {\r\n    id: \"options-trading\",\r\n    name: \"OPTIONS\\nTRADING\",\r\n    color: \"#8B5CF6\",\r\n    icon: \"≡ƒôê\",\r\n    description: \"Options chain viewer with Greeks, multi-leg strategies, and execution.\",\r\n  },\r\n  {\r\n    id: \"monitor\",\r\n    name: \"REPO\\nMONITOR\",\r\n    color: \"#10B981\",\r\n    icon: \"≡ƒöì\",\r\n    description: \"GitHub repository monitoring with real-time activity tracking and metrics.\",\r\n  },\r\n  {\r\n    id: \"ml-intelligence\",\r\n    name: \"ML\\nINTELLIGENCE\",\r\n    color: \"#8B5CF6\",\r\n    icon: \"≡ƒºá\",\r\n    description: \"AI-powered market analysis, pattern recognition, and personal trading insights.\",\r\n  },\r\n  {\r\n    id: \"settings\",\r\n    name: \"SETTINGS\",\r\n    color: \"#64748b\",\r\n    icon: \"ΓÜÖ∩╕Å\",\r\n    description: \"Trading journal, risk control, system configuration, and GitHub monitoring.\",\r\n  },\r\n];\r\n\r\n// Memoized logo component - prevents re-renders from parent state changes\r\nconst MemoizedCenterLogo = memo(({ isMobile }: { isMobile: boolean }) => (\r\n  <CompletePaiiDLogo size={isMobile ? 38 : 58} enableModal={true} />\r\n));\r\nMemoizedCenterLogo.displayName = \"MemoizedCenterLogo\";\r\n\r\nconst MemoizedHeaderLogo = memo(\r\n  ({ isMobile, setShowAIChat }: { isMobile: boolean; setShowAIChat: (val: boolean) => void }) => (\r\n    <div onClick={() => setShowAIChat(true)} style={{ cursor: \"pointer\" }}>\r\n      <CompletePaiiDLogo size={isMobile ? 64 : 96} />\r\n    </div>\r\n  )\r\n);\r\nMemoizedHeaderLogo.displayName = \"MemoizedHeaderLogo\";\r\n\r\nfunction RadialMenuComponent({\r\n  onWorkflowSelect,\r\n  onWorkflowHover,\r\n  selectedWorkflow,\r\n  compact,\r\n}: RadialMenuProps) {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const svgRef = useRef<SVGSVGElement>(null);\r\n  const [_hoveredWorkflow, setHoveredWorkflow] = useState<Workflow | null>(null);\r\n  const [_showAIChat, setShowAIChat] = useState(false);\r\n  const [marketData, setMarketData] = useState({\r\n    dow: { value: 0, change: 0, symbol: \"DJI\" },\r\n    nasdaq: { value: 0, change: 0, symbol: \"COMP\" },\r\n    lastUpdate: 0,\r\n  });\r\n  const [forceFieldConfidence, setForceFieldConfidence] = useState(0);\r\n  const [isMarketDataLoading, setIsMarketDataLoading] = useState(true);\r\n  const [_sseConnected, setSseConnected] = useState(false);\r\n  const [_sseRetryCount, setSseRetryCount] = useState(0);\r\n  const [marketStatus, _setMarketStatus] = useState<{\r\n    is_open: boolean;\r\n    state: string;\r\n    description: string;\r\n  } | null>(null);\r\n\r\n  // Responsive sizing\r\n  const { width: viewportWidth } = useWindowDimensions();\r\n  const isMobile = useIsMobile();\r\n\r\n  // Memoize responsive menu size - only recalculate when dependencies change\r\n  const menuSize = useMemo(() => {\r\n    if (isMobile) {\r\n      // Mobile: 90% of viewport width, max 675px (35% increase from 500)\r\n      return Math.min(viewportWidth * 0.9, 675);\r\n    }\r\n\r\n    // Desktop: Responsive to viewport width for split-screen mode\r\n    // When viewport < 1900px (typical split screen), scale down proportionally\r\n    if (viewportWidth < 1900) {\r\n      return Math.min(viewportWidth * 0.85, 945);\r\n    }\r\n\r\n    // Desktop full screen: Standard 945px (35% increase from 700)\r\n    return 945;\r\n  }, [isMobile, viewportWidth]);\r\n\r\n  // Memoize responsive font sizes - only recalculate when isMobile changes\r\n  const fontSizes = useMemo(() => {\r\n    if (isMobile) {\r\n      return {\r\n        headerLogo: \"65px\", // 48 ├ù 1.35\r\n        headerSubtitle1: \"22px\", // 16 ├ù 1.35\r\n        headerSubtitle2: \"19px\", // 14 ├ù 1.35\r\n        segmentText: \"22px\", // 16 ├ù 1.35\r\n        centerLogo: \"27px\", // 20 ├ù 1.35\r\n        marketLabel: \"9px\", // 7 ├ù 1.35 Γëê 9\r\n        marketValue: \"16px\", // 12 ├ù 1.35 Γëê 16\r\n        marketChange: \"11px\", // 8 ├ù 1.35 Γëê 11\r\n      };\r\n    }\r\n    // Desktop sizes - scaled up 35% for better readability\r\n    return {\r\n      headerLogo: \"130px\", // 96 ├ù 1.35\r\n      headerSubtitle1: \"30px\", // 22 ├ù 1.35\r\n      headerSubtitle2: \"24px\", // 18 ├ù 1.35\r\n      segmentText: \"30px\", // 22 ├ù 1.35\r\n      centerLogo: \"43px\", // 32 ├ù 1.35\r\n      marketLabel: \"12px\", // 9 ├ù 1.35\r\n      marketValue: \"22px\", // 16 ├ù 1.35\r\n      marketChange: \"14px\", // 10 ├ù 1.35\r\n    };\r\n  }, [isMobile]);\r\n\r\n  // Throttled market data update - prevents animation interruptions\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const throttledSetMarketData = useCallback(\r\n    throttle((newData: typeof marketData) => {\r\n      setMarketData(newData);\r\n      console.info(\"[RadialMenu] ≡ƒÄ» Market data updated (throttled)\");\r\n    }, 10000), // Update max once per 10 seconds\r\n    []\r\n  );\r\n\r\n  // ΓÜí REAL-TIME STREAMING: SSE for market data with auto-reconnection\r\n  useEffect(() => {\r\n    let eventSource: EventSource | null = null;\r\n    let reconnectTimeout: NodeJS.Timeout | null = null;\r\n    let isUnmounted = false;\r\n\r\n    // Load cached market data on mount\r\n    const loadCachedData = () => {\r\n      try {\r\n        const cached = localStorage.getItem(\"paiid-market-data\");\r\n        if (cached) {\r\n          const parsed = JSON.parse(cached);\r\n          // Only use cache if it's less than 24 hours old\r\n          if (parsed.timestamp && Date.now() - parsed.timestamp < 24 * 60 * 60 * 1000) {\r\n            console.info(\"[RadialMenu] ≡ƒÆ╛ Loading cached market data from localStorage\");\r\n            setMarketData(parsed.data);\r\n            setIsMarketDataLoading(false);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[RadialMenu] Γ¥î Failed to load cached market data:\", error);\r\n      }\r\n    };\r\n\r\n    // SSE connection with exponential backoff retry\r\n    const connectSSE = (retryAttempt = 0) => {\r\n      if (isUnmounted) return;\r\n\r\n      const maxRetries = 10;\r\n      const baseDelay = 2000; // 2 seconds\r\n\r\n      if (retryAttempt >= maxRetries) {\r\n        console.error(\"[RadialMenu] ≡ƒÜ¿ Max SSE retry attempts reached. Giving up.\");\r\n        setIsMarketDataLoading(false);\r\n        return;\r\n      }\r\n\r\n      console.info(\r\n        `[RadialMenu] ≡ƒôí Connecting to SSE stream (attempt ${retryAttempt + 1}/${maxRetries})...`\r\n      );\r\n      setSseRetryCount(retryAttempt);\r\n\r\n      try {\r\n        eventSource = new EventSource(\"/api/proxy/stream/market-indices\");\r\n\r\n        eventSource.addEventListener(\"indices_update\", (e) => {\r\n          const data = JSON.parse(e.data);\r\n          console.debug(\"[RadialMenu] ≡ƒôè Received live market data:\", data);\r\n\r\n          const now = Date.now();\r\n          const newData = {\r\n            dow: {\r\n              value: data.dow?.last || 0,\r\n              change: data.dow?.changePercent || 0,\r\n              symbol: \"DJI\",\r\n            },\r\n            nasdaq: {\r\n              value: data.nasdaq?.last || 0,\r\n              change: data.nasdaq?.changePercent || 0,\r\n              symbol: \"COMP\",\r\n            },\r\n            lastUpdate: now,\r\n          };\r\n\r\n          // Calculate Force Field Confidence (0-100%)\r\n          // Based on: data freshness, market stability, and connection quality\r\n          const dataFreshness = 100; // Fresh data just received\r\n          const marketVolatility = Math.abs(newData.dow.change) + Math.abs(newData.nasdaq.change);\r\n          const stabilityScore = Math.max(0, 100 - marketVolatility * 10); // Lower volatility = higher confidence\r\n          const connectionScore = retryAttempt === 0 ? 100 : Math.max(0, 100 - retryAttempt * 10);\r\n\r\n          const confidence = Math.round(\r\n            dataFreshness * 0.4 + stabilityScore * 0.4 + connectionScore * 0.2\r\n          );\r\n          setForceFieldConfidence(Math.min(100, Math.max(0, confidence)));\r\n\r\n          // Use throttled update to prevent logo animation interruptions\r\n          throttledSetMarketData(newData);\r\n\r\n          // Mark as connected and loading complete\r\n          setSseConnected(true);\r\n          setIsMarketDataLoading(false);\r\n          setSseRetryCount(0); // Reset retry count on success\r\n\r\n          // Cache the data in localStorage (immediate, not throttled)\r\n          try {\r\n            localStorage.setItem(\r\n              \"paiid-market-data\",\r\n              JSON.stringify({\r\n                data: newData,\r\n                timestamp: Date.now(),\r\n              })\r\n            );\r\n          } catch (error) {\r\n            console.error(\"[RadialMenu] Γ¥î Failed to cache market data:\", error);\r\n          }\r\n        });\r\n\r\n        eventSource.addEventListener(\"heartbeat\", (e) => {\r\n          const data = JSON.parse(e.data);\r\n          console.debug(\"[RadialMenu] ≡ƒÆô SSE heartbeat received:\", data.timestamp);\r\n        });\r\n\r\n        eventSource.addEventListener(\"error\", (e) => {\r\n          console.error(\"[RadialMenu] Γ¥î SSE connection error:\", e);\r\n          setSseConnected(false);\r\n\r\n          if (eventSource) {\r\n            eventSource.close();\r\n            eventSource = null;\r\n          }\r\n\r\n          // Exponential backoff: 2s, 4s, 8s, 16s, 32s, 64s, 128s (max ~2min)\r\n          const delay = Math.min(baseDelay * Math.pow(2, retryAttempt), 128000);\r\n          console.warn(\r\n            `[RadialMenu] ΓÜá∩╕Å SSE disconnected. Retrying in ${delay / 1000}s... (attempt ${retryAttempt + 1}/${maxRetries})`\r\n          );\r\n\r\n          reconnectTimeout = setTimeout(() => {\r\n            connectSSE(retryAttempt + 1);\r\n          }, delay);\r\n        });\r\n\r\n        eventSource.addEventListener(\"open\", () => {\r\n          console.info(\"[RadialMenu] Γ£à SSE connection established\");\r\n          setSseConnected(true);\r\n        });\r\n      } catch (error) {\r\n        console.error(\"[RadialMenu] Γ¥î Failed to create EventSource:\", error);\r\n        setSseConnected(false);\r\n\r\n        // Retry with exponential backoff\r\n        const delay = Math.min(baseDelay * Math.pow(2, retryAttempt), 128000);\r\n        reconnectTimeout = setTimeout(() => {\r\n          connectSSE(retryAttempt + 1);\r\n        }, delay);\r\n      }\r\n    };\r\n\r\n    // Initialize\r\n    loadCachedData();\r\n    connectSSE(0);\r\n\r\n    // Cleanup: close SSE connection on unmount\r\n    return () => {\r\n      isUnmounted = true;\r\n      console.info(\"[RadialMenu] ≡ƒöî Closing SSE connection\");\r\n\r\n      if (reconnectTimeout) {\r\n        clearTimeout(reconnectTimeout);\r\n      }\r\n\r\n      if (eventSource) {\r\n        eventSource.close();\r\n      }\r\n    };\r\n  }, [throttledSetMarketData]);\r\n\r\n  // Debug logging for Fast Refresh loop detection\r\n  useEffect(() => {\r\n    console.info(\"RadialMenu rendered with selectedWorkflow:\", selectedWorkflow);\r\n  }, [selectedWorkflow]);\r\n\r\n  useEffect(() => {\r\n    if (!svgRef.current) return;\r\n\r\n    // Γ£à EXTENSION VERIFICATION: D3.js\r\n    console.info(\"[Extension Verification] Γ£à D3.js loaded successfully:\", {\r\n      version: d3.version,\r\n      modules: [\"select\", \"pie\", \"arc\", \"selectAll\"],\r\n      status: \"FUNCTIONAL\",\r\n    });\r\n\r\n    const width = menuSize;\r\n    const height = menuSize;\r\n    const radius = Math.min(width, height) / 2;\r\n    const innerRadius = radius * 0.3;\r\n    const outerRadius = radius * 0.9;\r\n\r\n    // Calculate responsive center content positions based on innerRadius\r\n    // This ensures proper spacing regardless of menu size (500px mobile ΓåÆ 700px desktop)\r\n    const centerContentSpacing = {\r\n      logoOffset: -(innerRadius * 0.55), // Logo at top of circle (reduced from 0.65 to stay within bounds)\r\n      dowOffset: -(innerRadius * 0.25), // DOW below logo (increased from 0.15 to move up more)\r\n      nasdaqOffset: innerRadius * 0.45, // NASDAQ below DOW (increased from 0.30 for more spacing)\r\n      statusBadgeOffset: innerRadius * 0.7, // Status badge at bottom\r\n    };\r\n\r\n    // Debug log positioning\r\n    console.info(\"[RadialMenu] Center positioning:\", {\r\n      innerRadius,\r\n      menuSize,\r\n      centerContentSpacing,\r\n    });\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const defs = svg.append(\"defs\");\r\n\r\n    // ====== SVG FILTERS ======\r\n\r\n    // PREMIUM GLASS: Enhanced shadow filter (3-layer depth system)\r\n    const normalShadow = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"normalShadow\")\r\n      .attr(\"height\", \"200%\")\r\n      .attr(\"width\", \"200%\")\r\n      .attr(\"x\", \"-50%\")\r\n      .attr(\"y\", \"-50%\");\r\n    normalShadow\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"4\")\r\n      .attr(\"result\", \"blur1\");\r\n    normalShadow\r\n      .append(\"feOffset\")\r\n      .attr(\"in\", \"blur1\")\r\n      .attr(\"dx\", \"0\")\r\n      .attr(\"dy\", \"3\")\r\n      .attr(\"result\", \"dropShadow\");\r\n    normalShadow\r\n      .append(\"feFlood\")\r\n      .attr(\"flood-color\", \"#000000\")\r\n      .attr(\"flood-opacity\", \"0.3\")\r\n      .attr(\"result\", \"dropColor\");\r\n    normalShadow\r\n      .append(\"feComposite\")\r\n      .attr(\"in\", \"dropColor\")\r\n      .attr(\"in2\", \"dropShadow\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"shadow1\");\r\n    normalShadow\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"8\")\r\n      .attr(\"result\", \"blur2\");\r\n    normalShadow\r\n      .append(\"feFlood\")\r\n      .attr(\"flood-color\", \"#000000\")\r\n      .attr(\"flood-opacity\", \"0.15\")\r\n      .attr(\"result\", \"ambientColor\");\r\n    normalShadow\r\n      .append(\"feComposite\")\r\n      .attr(\"in\", \"ambientColor\")\r\n      .attr(\"in2\", \"blur2\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"shadow2\");\r\n    normalShadow\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"1\")\r\n      .attr(\"result\", \"edgeBlur\");\r\n    normalShadow\r\n      .append(\"feFlood\")\r\n      .attr(\"flood-color\", \"#ffffff\")\r\n      .attr(\"flood-opacity\", \"0.08\")\r\n      .attr(\"result\", \"edgeColor\");\r\n    normalShadow\r\n      .append(\"feComposite\")\r\n      .attr(\"in\", \"edgeColor\")\r\n      .attr(\"in2\", \"edgeBlur\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"edgeHighlight\");\r\n    const normalMerge = normalShadow.append(\"feMerge\");\r\n    normalMerge.append(\"feMergeNode\").attr(\"in\", \"shadow2\");\r\n    normalMerge.append(\"feMergeNode\").attr(\"in\", \"shadow1\");\r\n    normalMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n    normalMerge.append(\"feMergeNode\").attr(\"in\", \"edgeHighlight\");\r\n\r\n    // Hover glow filter\r\n    const hoverGlow = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"hoverGlow\")\r\n      .attr(\"height\", \"200%\")\r\n      .attr(\"width\", \"200%\")\r\n      .attr(\"x\", \"-50%\")\r\n      .attr(\"y\", \"-50%\");\r\n    hoverGlow\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"8\")\r\n      .attr(\"result\", \"blur\");\r\n    hoverGlow.append(\"feFlood\").attr(\"flood-color\", \"#00ffff\").attr(\"flood-opacity\", \"0.6\");\r\n    hoverGlow\r\n      .append(\"feComposite\")\r\n      .attr(\"in2\", \"blur\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"glow\");\r\n    const hoverMerge = hoverGlow.append(\"feMerge\");\r\n    hoverMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    hoverMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    hoverMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n    // Click glow filter\r\n    const clickGlow = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"clickGlow\")\r\n      .attr(\"height\", \"300%\")\r\n      .attr(\"width\", \"300%\")\r\n      .attr(\"x\", \"-100%\")\r\n      .attr(\"y\", \"-100%\");\r\n    clickGlow\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"12\")\r\n      .attr(\"result\", \"blur\");\r\n    clickGlow.append(\"feFlood\").attr(\"flood-color\", \"#ffffff\").attr(\"flood-opacity\", \"0.8\");\r\n    clickGlow\r\n      .append(\"feComposite\")\r\n      .attr(\"in2\", \"blur\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"glow\");\r\n    const clickMerge = clickGlow.append(\"feMerge\");\r\n    clickMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    clickMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    clickMerge.append(\"feMergeNode\").attr(\"in\", \"glow\");\r\n    clickMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n    // Inner shadow filter\r\n    const innerShadow = defs.append(\"filter\").attr(\"id\", \"innerShadow\");\r\n    innerShadow\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"3\")\r\n      .attr(\"result\", \"blur\");\r\n    innerShadow\r\n      .append(\"feOffset\")\r\n      .attr(\"in\", \"blur\")\r\n      .attr(\"dx\", \"0\")\r\n      .attr(\"dy\", \"2\")\r\n      .attr(\"result\", \"offsetBlur\");\r\n    innerShadow\r\n      .append(\"feFlood\")\r\n      .attr(\"flood-color\", \"#000000\")\r\n      .attr(\"flood-opacity\", \"0.5\")\r\n      .attr(\"result\", \"color\");\r\n    innerShadow\r\n      .append(\"feComposite\")\r\n      .attr(\"in\", \"color\")\r\n      .attr(\"in2\", \"offsetBlur\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"shadow\");\r\n    innerShadow\r\n      .append(\"feComposite\")\r\n      .attr(\"in\", \"shadow\")\r\n      .attr(\"in2\", \"SourceAlpha\")\r\n      .attr(\"operator\", \"in\");\r\n    const innerMerge = innerShadow.append(\"feMerge\");\r\n    innerMerge.append(\"feMergeNode\");\r\n    innerMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n    // Sparkles filter\r\n    const sparkles = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"sparkles\")\r\n      .attr(\"x\", \"-50%\")\r\n      .attr(\"y\", \"-50%\")\r\n      .attr(\"width\", \"200%\")\r\n      .attr(\"height\", \"200%\");\r\n    sparkles\r\n      .append(\"feGaussianBlur\")\r\n      .attr(\"in\", \"SourceAlpha\")\r\n      .attr(\"stdDeviation\", \"2\")\r\n      .attr(\"result\", \"blur\");\r\n    sparkles\r\n      .append(\"feSpecularLighting\")\r\n      .attr(\"in\", \"blur\")\r\n      .attr(\"surfaceScale\", \"5\")\r\n      .attr(\"specularConstant\", \"0.75\")\r\n      .attr(\"specularExponent\", \"20\")\r\n      .attr(\"lighting-color\", \"#ffffff\")\r\n      .attr(\"result\", \"spec\")\r\n      .append(\"fePointLight\")\r\n      .attr(\"x\", \"0\")\r\n      .attr(\"y\", \"0\")\r\n      .attr(\"z\", \"100\");\r\n    sparkles\r\n      .append(\"feComposite\")\r\n      .attr(\"in\", \"spec\")\r\n      .attr(\"in2\", \"SourceAlpha\")\r\n      .attr(\"operator\", \"in\")\r\n      .attr(\"result\", \"specOut\");\r\n    const sparkleMerge = sparkles.append(\"feMerge\");\r\n    sparkleMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n    sparkleMerge.append(\"feMergeNode\").attr(\"in\", \"specOut\");\r\n\r\n    // AI Glow filter for center logo\r\n    const aiGlow = defs\r\n      .append(\"filter\")\r\n      .attr(\"id\", \"aiGlow\")\r\n      .attr(\"x\", \"-50%\")\r\n      .attr(\"y\", \"-50%\")\r\n      .attr(\"width\", \"200%\")\r\n      .attr(\"height\", \"200%\");\r\n    aiGlow.append(\"feGaussianBlur\").attr(\"stdDeviation\", \"4\").attr(\"result\", \"coloredBlur\");\r\n    const aiMerge = aiGlow.append(\"feMerge\");\r\n    aiMerge.append(\"feMergeNode\").attr(\"in\", \"coloredBlur\");\r\n    aiMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\r\n\r\n    // ====== GRADIENTS ======\r\n\r\n    // Center gradient\r\n    const centerGradient = defs.append(\"radialGradient\").attr(\"id\", \"centerGradient\");\r\n    centerGradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", \"#0f172a\");\r\n    centerGradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"#1e293b\");\r\n\r\n    // PREMIUM GLASS: 4-stop depth gradients with subtle shimmer\r\n    workflows.forEach((workflow, i) => {\r\n      const wedgeGradient = defs\r\n        .append(\"radialGradient\")\r\n        .attr(\"id\", `wedgeGradient${i}`)\r\n        .attr(\"cx\", \"50%\")\r\n        .attr(\"cy\", \"50%\")\r\n        .attr(\"r\", \"50%\");\r\n\r\n      // 4-stop gradient for depth perception\r\n      const stop1 = wedgeGradient\r\n        .append(\"stop\")\r\n        .attr(\"offset\", \"0%\")\r\n        .attr(\"stop-color\", workflow.color)\r\n        .attr(\"stop-opacity\", \"1\");\r\n\r\n      wedgeGradient\r\n        .append(\"stop\")\r\n        .attr(\"offset\", \"35%\")\r\n        .attr(\"stop-color\", workflow.color)\r\n        .attr(\"stop-opacity\", \"1\");\r\n\r\n      wedgeGradient\r\n        .append(\"stop\")\r\n        .attr(\"offset\", \"70%\")\r\n        .attr(\"stop-color\", workflow.color)\r\n        .attr(\"stop-opacity\", \"0.92\");\r\n\r\n      wedgeGradient\r\n        .append(\"stop\")\r\n        .attr(\"offset\", \"100%\")\r\n        .attr(\"stop-color\", workflow.color)\r\n        .attr(\"stop-opacity\", \"0.85\");\r\n\r\n      // SUBTLE SHIMMER: 4x slower, smaller range, staggered\r\n      stop1\r\n        .append(\"animate\")\r\n        .attr(\"attributeName\", \"stop-opacity\")\r\n        .attr(\"values\", \"0.92;1.0;0.92\")\r\n        .attr(\"dur\", \"12s\")\r\n        .attr(\"begin\", `${i * 0.8}s`)\r\n        .attr(\"repeatCount\", \"indefinite\");\r\n    });\r\n\r\n    const g = svg\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\r\n\r\n    const pie = d3\r\n      .pie<Workflow>()\r\n      .value(1)\r\n      .sort(null)\r\n      .startAngle(-Math.PI / 2)\r\n      .padAngle(0.008);\r\n\r\n    const arc = d3\r\n      .arc<d3.PieArcDatum<Workflow>>()\r\n      .innerRadius(innerRadius)\r\n      .outerRadius(outerRadius)\r\n      .cornerRadius(3);\r\n\r\n    const hoverArc = d3\r\n      .arc<d3.PieArcDatum<Workflow>>()\r\n      .innerRadius(innerRadius)\r\n      .outerRadius(outerRadius + 15)\r\n      .cornerRadius(3);\r\n\r\n    const segments = g\r\n      .selectAll(\".segment\")\r\n      .data(pie(workflows))\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"segment\")\r\n      .style(\"cursor\", \"pointer\");\r\n\r\n    segments\r\n      .append(\"path\")\r\n      .attr(\"d\", arc)\r\n      .attr(\"fill\", (_d, i) => `url(#wedgeGradient${i})`)\r\n      .attr(\"stroke\", \"rgba(255, 255, 255, 0.15)\")\r\n      .attr(\"stroke-width\", 1.5)\r\n      .style(\"filter\", \"url(#normalShadow)\")\r\n      .on(\"mouseenter\", function (_event, d) {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr(\"d\", hoverArc as (d: unknown) => string)\r\n          .style(\"filter\", \"url(#hoverGlow)\");\r\n        setHoveredWorkflow(d.data);\r\n        if (onWorkflowHover) onWorkflowHover(d.data);\r\n      })\r\n      .on(\"mouseleave\", function () {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr(\"d\", arc as (d: unknown) => string)\r\n          .style(\"filter\", \"url(#normalShadow)\");\r\n        setHoveredWorkflow(null);\r\n        if (onWorkflowHover) onWorkflowHover(null);\r\n      })\r\n      .on(\"mousedown\", function () {\r\n        d3.select(this).style(\"filter\", \"url(#clickGlow)\");\r\n      })\r\n      .on(\"mouseup\", function () {\r\n        d3.select(this).style(\"filter\", \"url(#hoverGlow)\");\r\n      })\r\n      .on(\"click\", (_event, d) => {\r\n        console.info(\"RadialMenu: Workflow clicked:\", d.data.id);\r\n        onWorkflowSelect(d.data.id);\r\n      });\r\n\r\n    segments\r\n      .append(\"text\")\r\n      .attr(\"transform\", (d) => {\r\n        const [x, y] = arc.centroid(d);\r\n        return `translate(${x}, ${y})`;\r\n      })\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", fontSizes.segmentText)\r\n      .attr(\"font-weight\", \"900\")\r\n      .attr(\"font-style\", \"italic\")\r\n      .attr(\"fill\", \"white\")\r\n      .attr(\"letter-spacing\", \"1px\")\r\n      .style(\"text-shadow\", \"0 4px 12px rgba(0, 0, 0, 0.9), 0 2px 4px rgba(0, 0, 0, 0.8)\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .style(\"filter\", \"url(#sparkles)\")\r\n      .each(function (d) {\r\n        const lines = d.data.name.split(\"\\n\");\r\n        const text = d3.select(this);\r\n\r\n        lines.forEach((line, i) => {\r\n          text\r\n            .append(\"tspan\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"dy\", i === 0 ? \"-0.5em\" : \"1.3em\")\r\n            .text(line);\r\n        });\r\n      });\r\n\r\n    // ====== CENTER CIRCLE ======\r\n    const centerGroup = g\r\n      .append(\"g\")\r\n      .style(\"cursor\", \"pointer\")\r\n      .on(\"click\", () => onWorkflowSelect(\"\"));\r\n\r\n    centerGroup\r\n      .append(\"circle\")\r\n      .attr(\"r\", innerRadius - 15)\r\n      .attr(\"fill\", \"url(#centerGradient)\")\r\n      .attr(\"stroke\", \"#45f0c0\")\r\n      .attr(\"stroke-width\", 3)\r\n      .style(\"filter\", \"url(#innerShadow)\");\r\n\r\n    // Animated ring around center\r\n    centerGroup\r\n      .append(\"circle\")\r\n      .attr(\"r\", innerRadius - 15)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"#45f0c0\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"opacity\", 0.3)\r\n      .append(\"animate\")\r\n      .attr(\"attributeName\", \"opacity\")\r\n      .attr(\"values\", \"0.3;0.8;0.3\")\r\n      .attr(\"dur\", \"2s\")\r\n      .attr(\"repeatCount\", \"indefinite\");\r\n\r\n    // ====== CENTER LOGO (PaiiD) ======\r\n    // Note: Logo rendered as HTML overlay for CSS animation compatibility\r\n\r\n    // ====== MARKET DATA ======\r\n    const dow = centerGroup\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${centerContentSpacing.dowOffset})`);\r\n\r\n    dow\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", fontSizes.marketLabel)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", \"#cbd5e1\")\r\n      .attr(\"letter-spacing\", \"2px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\"DOW JONES INDUSTRIAL\");\r\n\r\n    dow\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"14\") // Reduced from 20 for tighter spacing\r\n      .attr(\"font-size\", fontSizes.marketValue)\r\n      .attr(\"font-weight\", \"900\")\r\n      .attr(\"fill\", \"#f1f5f9\")\r\n      .style(\"text-shadow\", \"0 2px 6px rgba(0, 0, 0, 0.6)\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\r\n        isMarketDataLoading && marketData.dow.value === 0\r\n          ? \"Loading...\"\r\n          : marketData.dow.value.toLocaleString(\"en-US\", { minimumFractionDigits: 2 })\r\n      );\r\n\r\n    const dowChange = dow\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"26\") // Reduced from 38 for tighter spacing\r\n      .attr(\"font-size\", fontSizes.marketChange)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", marketData.dow.change >= 0 ? \"#45f0c0\" : \"#ef4444\")\r\n      .style(\r\n        \"text-shadow\",\r\n        \"0 0 10px \" +\r\n          (marketData.dow.change >= 0 ? \"rgba(69, 240, 192, 0.5)\" : \"rgba(239, 68, 68, 0.5)\")\r\n      )\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\r\n        `${marketData.dow.change >= 0 ? \"Γû▓\" : \"Γû╝\"} ${Math.abs(marketData.dow.change).toFixed(2)}%`\r\n      );\r\n\r\n    // Animate market data\r\n    dowChange\r\n      .transition()\r\n      .duration(1000)\r\n      .style(\"opacity\", 0.7)\r\n      .transition()\r\n      .duration(1000)\r\n      .style(\"opacity\", 1)\r\n      .on(\"end\", function repeat() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(1000)\r\n          .style(\"opacity\", 0.7)\r\n          .transition()\r\n          .duration(1000)\r\n          .style(\"opacity\", 1)\r\n          .on(\"end\", repeat);\r\n      });\r\n\r\n    const nasdaqGroup = centerGroup\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${centerContentSpacing.nasdaqOffset})`);\r\n\r\n    nasdaqGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", fontSizes.marketLabel)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", \"#cbd5e1\")\r\n      .attr(\"letter-spacing\", \"2px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\"NASDAQ COMPOSITE\");\r\n\r\n    nasdaqGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"14\") // Reduced from 20 for tighter spacing\r\n      .attr(\"font-size\", fontSizes.marketValue)\r\n      .attr(\"font-weight\", \"900\")\r\n      .attr(\"fill\", \"#f1f5f9\")\r\n      .style(\"text-shadow\", \"0 2px 6px rgba(0, 0, 0, 0.6)\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\r\n        isMarketDataLoading && marketData.nasdaq.value === 0\r\n          ? \"Loading...\"\r\n          : marketData.nasdaq.value.toLocaleString(\"en-US\", { minimumFractionDigits: 2 })\r\n      );\r\n\r\n    const nasdaqChange = nasdaqGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"26\") // Reduced from 38 for tighter spacing\r\n      .attr(\"font-size\", fontSizes.marketChange)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", marketData.nasdaq.change >= 0 ? \"#45f0c0\" : \"#ef4444\")\r\n      .style(\r\n        \"text-shadow\",\r\n        \"0 0 10px \" +\r\n          (marketData.nasdaq.change >= 0 ? \"rgba(69, 240, 192, 0.5)\" : \"rgba(239, 68, 68, 0.5)\")\r\n      )\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\r\n        `${marketData.nasdaq.change >= 0 ? \"Γû▓\" : \"Γû╝\"} ${Math.abs(marketData.nasdaq.change).toFixed(2)}%`\r\n      );\r\n\r\n    // Animate market data\r\n    nasdaqChange\r\n      .transition()\r\n      .duration(1000)\r\n      .delay(500)\r\n      .style(\"opacity\", 0.7)\r\n      .transition()\r\n      .duration(1000)\r\n      .style(\"opacity\", 1)\r\n      .on(\"end\", function repeat() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(1000)\r\n          .style(\"opacity\", 0.7)\r\n          .transition()\r\n          .duration(1000)\r\n          .style(\"opacity\", 1)\r\n          .on(\"end\", repeat);\r\n      });\r\n\r\n    // ====== FORCE FIELD CONFIDENCE ======\r\n    const forceFieldGroup = centerGroup\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${-centerContentSpacing.dowOffset - 35})`);\r\n\r\n    forceFieldGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", fontSizes.marketLabel)\r\n      .attr(\"font-weight\", \"800\")\r\n      .attr(\"fill\", \"#cbd5e1\")\r\n      .attr(\"letter-spacing\", \"1.5px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(\"FORCE FIELD\");\r\n\r\n    const confidenceColor =\r\n      forceFieldConfidence >= 80\r\n        ? \"#45f0c0\"\r\n        : forceFieldConfidence >= 60\r\n          ? \"#fbbf24\"\r\n          : forceFieldConfidence >= 40\r\n            ? \"#fb923c\"\r\n            : \"#ef4444\";\r\n\r\n    forceFieldGroup\r\n      .append(\"text\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"14\")\r\n      .attr(\"font-size\", `${parseInt(fontSizes.marketValue) * 1.3}px`)\r\n      .attr(\"font-weight\", \"900\")\r\n      .attr(\"fill\", confidenceColor)\r\n      .style(\"text-shadow\", `0 0 15px ${confidenceColor}80, 0 2px 8px rgba(0, 0, 0, 0.8)`)\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(`${forceFieldConfidence}%`);\r\n  }, [\r\n    menuSize,\r\n    fontSizes,\r\n    onWorkflowSelect,\r\n    onWorkflowHover,\r\n    isMarketDataLoading,\r\n    marketData.dow.value,\r\n    marketData.dow.change,\r\n    marketData.nasdaq.value,\r\n    marketData.nasdaq.change,\r\n    forceFieldConfidence,\r\n    centerContentSpacing,\r\n  ]); // Re-render when menu size or loading state changes\r\n\r\n  // Separate effect for market data updates - only update text when data changes\r\n  useEffect(() => {\r\n    if (!svgRef.current) return;\r\n\r\n    const svg = d3.select(svgRef.current);\r\n\r\n    // Update DOW value\r\n    svg\r\n      .selectAll(\"text\")\r\n      .filter(function () {\r\n        return (\r\n          d3\r\n            .select(this as SVGTextElement)\r\n            .text()\r\n            .includes(\".\") && d3.select(this as SVGTextElement).attr(\"dy\") === \"20\"\r\n        );\r\n      })\r\n      .each(function () {\r\n        const element = this as SVGTextElement;\r\n        const text = d3.select(element);\r\n        const parentNode = element.parentNode as SVGGElement;\r\n        const transform = d3.select(parentNode).attr(\"transform\");\r\n        if (transform && transform.includes(\"-15\")) {\r\n          // This is the DOW value text\r\n          text.text(marketData.dow.value.toLocaleString(\"en-US\", { minimumFractionDigits: 2 }));\r\n        } else if (transform && transform.includes(\"45\")) {\r\n          // This is the NASDAQ value text\r\n          text.text(marketData.nasdaq.value.toLocaleString(\"en-US\", { minimumFractionDigits: 2 }));\r\n        }\r\n      });\r\n\r\n    // Update change percentages\r\n    svg\r\n      .selectAll(\"text\")\r\n      .filter(function () {\r\n        return d3.select(this as SVGTextElement).attr(\"dy\") === \"38\";\r\n      })\r\n      .each(function () {\r\n        const element = this as SVGTextElement;\r\n        const text = d3.select(element);\r\n        const parentNode = element.parentNode as SVGGElement;\r\n        const transform = d3.select(parentNode).attr(\"transform\");\r\n        if (transform && transform.includes(\"-15\")) {\r\n          // DOW change\r\n          text\r\n            .attr(\"fill\", marketData.dow.change >= 0 ? \"#45f0c0\" : \"#ef4444\")\r\n            .style(\r\n              \"text-shadow\",\r\n              \"0 0 10px \" +\r\n                (marketData.dow.change >= 0 ? \"rgba(69, 240, 192, 0.5)\" : \"rgba(239, 68, 68, 0.5)\")\r\n            )\r\n            .text(\r\n              `${marketData.dow.change >= 0 ? \"Γû▓\" : \"Γû╝\"} ${Math.abs(marketData.dow.change).toFixed(2)}%`\r\n            );\r\n        } else if (transform && transform.includes(\"45\")) {\r\n          // NASDAQ change\r\n          text\r\n            .attr(\"fill\", marketData.nasdaq.change >= 0 ? \"#45f0c0\" : \"#ef4444\")\r\n            .style(\r\n              \"text-shadow\",\r\n              \"0 0 10px \" +\r\n                (marketData.nasdaq.change >= 0\r\n                  ? \"rgba(69, 240, 192, 0.5)\"\r\n                  : \"rgba(239, 68, 68, 0.5)\")\r\n            )\r\n            .text(\r\n              `${marketData.nasdaq.change >= 0 ? \"Γû▓\" : \"Γû╝\"} ${Math.abs(marketData.nasdaq.change).toFixed(2)}%`\r\n            );\r\n        }\r\n      });\r\n  }, [marketData]);\r\n\r\n  // Separate effect for selectedWorkflow updates - only update selected wedge styling\r\n  useEffect(() => {\r\n    if (!svgRef.current || !selectedWorkflow) return;\r\n\r\n    // Update only the selected wedge styling without full re-render\r\n    d3.select(svgRef.current)\r\n      .selectAll(\".segment path\")\r\n      .style(\"filter\", function (this: SVGPathElement, d: { data: { id: string } }) {\r\n        return d.data.id === selectedWorkflow ? \"url(#clickGlow)\" : \"url(#normalShadow)\";\r\n      });\r\n  }, [selectedWorkflow]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        background: \"linear-gradient(135deg, #0f1828 0%, #1a2a3f 100%)\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        padding: \"0\",\r\n      }}\r\n    >\r\n      {/* Title Header - only show in full screen mode */}\r\n      {!compact && (\r\n        <div style={{ textAlign: \"center\", marginBottom: \"10px\" }}>\r\n          <MemoizedHeaderLogo isMobile={isMobile} setShowAIChat={setShowAIChat} />\r\n        </div>\r\n      )}\r\n\r\n      {/* SVG Radial Menu */}\r\n      <div style={{ position: \"relative\" }}>\r\n        <svg ref={svgRef} className=\"drop-shadow-2xl\" />\r\n\r\n        {/* Center Logo Overlay - perfectly centered in circle */}\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            pointerEvents: \"auto\",\r\n          }}\r\n        >\r\n          <MemoizedCenterLogo isMobile={isMobile} />\r\n        </div>\r\n\r\n        {/* Market Status Badge */}\r\n        {marketStatus && (\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              transform: \"translate(-50%, -50%)\",\r\n              marginTop: `${(menuSize / 2) * 0.3 * 0.75}px`, // Responsive: matches centerContentSpacing.statusBadgeOffset\r\n              pointerEvents: \"none\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"inline-flex\",\r\n                alignItems: \"center\",\r\n                gap: \"6px\",\r\n                padding: isMobile ? \"4px 10px\" : \"6px 14px\",\r\n                background: marketStatus.is_open\r\n                  ? \"rgba(69, 240, 192, 0.15)\"\r\n                  : \"rgba(239, 68, 68, 0.15)\",\r\n                border: `1px solid ${marketStatus.is_open ? \"rgba(69, 240, 192, 0.4)\" : \"rgba(239, 68, 68, 0.4)\"}`,\r\n                borderRadius: \"20px\",\r\n                backdropFilter: \"blur(10px)\",\r\n                boxShadow: marketStatus.is_open\r\n                  ? \"0 0 15px rgba(69, 240, 192, 0.2)\"\r\n                  : \"0 0 15px rgba(239, 68, 68, 0.2)\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  width: isMobile ? \"6px\" : \"8px\",\r\n                  height: isMobile ? \"6px\" : \"8px\",\r\n                  borderRadius: \"50%\",\r\n                  background: marketStatus.is_open ? \"#45f0c0\" : \"#ef4444\",\r\n                  boxShadow: `0 0 8px ${marketStatus.is_open ? \"rgba(69, 240, 192, 0.6)\" : \"rgba(239, 68, 68, 0.6)\"}`,\r\n                  animation: marketStatus.is_open ? \"pulse-open 2s ease-in-out infinite\" : \"none\",\r\n                }}\r\n              />\r\n              <div\r\n                style={{\r\n                  fontSize: isMobile ? \"9px\" : \"11px\",\r\n                  fontWeight: \"800\",\r\n                  letterSpacing: \"1px\",\r\n                  textTransform: \"uppercase\",\r\n                  color: marketStatus.is_open ? \"#45f0c0\" : \"#ef4444\",\r\n                }}\r\n              >\r\n                {marketStatus.state === \"open\" && \"Market Open\"}\r\n                {marketStatus.state === \"premarket\" && \"Pre-Market\"}\r\n                {marketStatus.state === \"postmarket\" && \"After Hours\"}\r\n                {marketStatus.state === \"closed\" && \"Market Closed\"}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* CSS Animations */}\r\n      <style jsx>{`\r\n        ${LOGO_ANIMATION_KEYFRAME}\r\n\r\n        @keyframes pulse-open {\r\n          0%,\r\n          100% {\r\n            opacity: 1;\r\n            transform: scale(1);\r\n          }\r\n          50% {\r\n            opacity: 0.7;\r\n            transform: scale(1.2);\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Export memoized component - prevents unnecessary re-renders when props haven't changed\r\nexport default memo(RadialMenuComponent, (prevProps, nextProps) => {\r\n  // Custom comparison: only re-render if these props actually changed\r\n  return (\r\n    prevProps.selectedWorkflow === nextProps.selectedWorkflow &&\r\n    prevProps.compact === nextProps.compact &&\r\n    prevProps.onWorkflowSelect === nextProps.onWorkflowSelect &&\r\n    prevProps.onWorkflowHover === nextProps.onWorkflowHover\r\n  );\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\RadialMenuNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ResearchDashboardSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\RiskDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\SchedulerSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\SentimentDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSentimentData'. Either include it or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSentimentData]","fix":{"range":[2318,2337],"text":"[fetchSentimentData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":84,"column":7,"nodeType":"CallExpression","endLine":84,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSentimentData'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [autoRefresh, fetchSentimentData, refreshInterval]","fix":{"range":[2536,2585],"text":"[autoRefresh, fetchSentimentData, refreshInterval]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":92,"column":37,"nodeType":"CallExpression","endLine":92,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":298,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":298,"endColumn":54}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { useWebSocket } from \"../hooks/useWebSocket\";\r\nimport AnimatedCounter from \"./ui/AnimatedCounter\";\r\nimport EnhancedCard from \"./ui/EnhancedCard\";\r\nimport StatusIndicator from \"./ui/StatusIndicator\";\r\n\r\ninterface SentimentDashboardProps {\r\n  userId: string;\r\n  className?: string;\r\n  symbols?: string[];\r\n  autoRefresh?: boolean;\r\n  refreshInterval?: number;\r\n}\r\n\r\ninterface SentimentData {\r\n  symbols: string[];\r\n  overall_sentiment: string;\r\n  combined_score: number;\r\n  news_sentiment: {\r\n    sentiment_score: number;\r\n    confidence: number;\r\n    articles_analyzed: number;\r\n  };\r\n  social_sentiment: {\r\n    sentiment_score: number;\r\n    confidence: number;\r\n    posts_analyzed: number;\r\n  };\r\n  timestamp: string;\r\n}\r\n\r\nconst SentimentDashboard: React.FC<SentimentDashboardProps> = ({\r\n  userId,\r\n  className,\r\n  symbols = [\"AAPL\", \"MSFT\", \"GOOGL\", \"TSLA\"],\r\n  autoRefresh = true,\r\n  refreshInterval = 300000, // 5 minutes\r\n}) => {\r\n  const [sentimentData, setSentimentData] = useState<SentimentData | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n\r\n  const { isConnected } = useWebSocket({\r\n    url: process.env.NEXT_PUBLIC_WS_URL || \"ws://localhost:8000/ws\",\r\n    userId,\r\n    autoConnect: true,\r\n  });\r\n\r\n  const fetchSentimentData = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(\"/api/ai/sentiment/analyze\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          symbols: symbols,\r\n          days_back: 7,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setSentimentData(data);\r\n        setLastUpdated(new Date());\r\n      } else {\r\n        throw new Error(\"Failed to fetch sentiment data\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error fetching sentiment data:\", err);\r\n      setError(\"Failed to load sentiment data\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch sentiment data on mount\r\n  useEffect(() => {\r\n    fetchSentimentData();\r\n  }, [symbols.join(\",\")]);\r\n\r\n  // Auto-refresh\r\n  useEffect(() => {\r\n    if (!autoRefresh) return;\r\n\r\n    const interval = setInterval(fetchSentimentData, refreshInterval);\r\n    return () => clearInterval(interval);\r\n  }, [autoRefresh, refreshInterval, symbols.join(\",\")]);\r\n\r\n  const getSentimentColor = (sentiment: string) => {\r\n    switch (sentiment.toLowerCase()) {\r\n      case \"bullish\":\r\n        return \"text-green-400\";\r\n      case \"bearish\":\r\n        return \"text-red-400\";\r\n      case \"neutral\":\r\n        return \"text-yellow-400\";\r\n      default:\r\n        return \"text-slate-400\";\r\n    }\r\n  };\r\n\r\n  const getScoreColor = (score: number) => {\r\n    if (score > 20) return \"positive\";\r\n    if (score < -20) return \"negative\";\r\n    return \"neutral\";\r\n  };\r\n\r\n  const getSentimentIcon = (sentiment: string) => {\r\n    switch (sentiment.toLowerCase()) {\r\n      case \"bullish\":\r\n        return \"≡ƒôê\";\r\n      case \"bearish\":\r\n        return \"≡ƒôë\";\r\n      case \"neutral\":\r\n        return \"Γ₧í∩╕Å\";\r\n      default:\r\n        return \"Γ¥ô\";\r\n    }\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center text-red-400\">\r\n          <StatusIndicator status=\"error\" size=\"sm\" />\r\n          <p className=\"mt-2\">Error: {error}</p>\r\n          <button\r\n            onClick={fetchSentimentData}\r\n            className=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors\"\r\n          >\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  if (isLoading && !sentimentData) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center\">\r\n          <StatusIndicator status=\"loading\" size=\"sm\" />\r\n          <p className=\"mt-2 text-slate-400\">Loading sentiment analysis...</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  if (!sentimentData) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center text-slate-400\">\r\n          <StatusIndicator status=\"offline\" size=\"sm\" />\r\n          <p className=\"mt-2\">No sentiment data available</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <h3 className=\"text-white font-bold text-xl\">Market Sentiment Analysis</h3>\r\n          <StatusIndicator status={isConnected ? \"online\" : \"offline\"} size=\"sm\" />\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-4\">\r\n          {lastUpdated && (\r\n            <span className=\"text-xs text-slate-400\">\r\n              Updated: {lastUpdated.toLocaleTimeString()}\r\n            </span>\r\n          )}\r\n          <button\r\n            onClick={fetchSentimentData}\r\n            disabled={isLoading}\r\n            className=\"bg-blue-500 hover:bg-blue-600 disabled:bg-slate-600 text-white px-3 py-1 rounded-lg text-sm transition-colors\"\r\n          >\r\n            {isLoading ? \"...\" : \"Refresh\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Overall Sentiment */}\r\n      <EnhancedCard variant=\"gradient\" size=\"lg\" className=\"text-center\">\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center justify-center gap-3\">\r\n            <span className=\"text-4xl\">{getSentimentIcon(sentimentData.overall_sentiment)}</span>\r\n            <h4 className=\"text-white font-bold text-2xl\">Overall Sentiment</h4>\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            <p\r\n              className={`text-3xl font-bold ${getSentimentColor(sentimentData.overall_sentiment)}`}\r\n            >\r\n              {sentimentData.overall_sentiment.toUpperCase()}\r\n            </p>\r\n\r\n            <AnimatedCounter\r\n              value={sentimentData.combined_score}\r\n              prefix={sentimentData.combined_score >= 0 ? \"+\" : \"\"}\r\n              decimals={1}\r\n              color={getScoreColor(sentimentData.combined_score)}\r\n              className=\"text-2xl font-semibold\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </EnhancedCard>\r\n\r\n      {/* Sentiment Breakdown */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n        {/* News Sentiment */}\r\n        <EnhancedCard variant=\"glass\" size=\"md\">\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <h5 className=\"text-white font-semibold text-lg\">News Sentiment</h5>\r\n              <StatusIndicator status=\"online\" size=\"sm\" />\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-slate-400\">Sentiment Score</span>\r\n                <AnimatedCounter\r\n                  value={sentimentData.news_sentiment.sentiment_score}\r\n                  prefix={sentimentData.news_sentiment.sentiment_score >= 0 ? \"+\" : \"\"}\r\n                  decimals={1}\r\n                  color={getScoreColor(sentimentData.news_sentiment.sentiment_score)}\r\n                  className=\"text-lg font-semibold\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-slate-400\">Confidence</span>\r\n                <span className=\"text-white font-semibold\">\r\n                  {sentimentData.news_sentiment.confidence}%\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-slate-400\">Articles Analyzed</span>\r\n                <span className=\"text-white font-semibold\">\r\n                  {sentimentData.news_sentiment.articles_analyzed}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </EnhancedCard>\r\n\r\n        {/* Social Sentiment */}\r\n        <EnhancedCard variant=\"glass\" size=\"md\">\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <h5 className=\"text-white font-semibold text-lg\">Social Sentiment</h5>\r\n              <StatusIndicator status=\"online\" size=\"sm\" />\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-slate-400\">Sentiment Score</span>\r\n                <AnimatedCounter\r\n                  value={sentimentData.social_sentiment.sentiment_score}\r\n                  prefix={sentimentData.social_sentiment.sentiment_score >= 0 ? \"+\" : \"\"}\r\n                  decimals={1}\r\n                  color={getScoreColor(sentimentData.social_sentiment.sentiment_score)}\r\n                  className=\"text-lg font-semibold\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-slate-400\">Confidence</span>\r\n                <span className=\"text-white font-semibold\">\r\n                  {sentimentData.social_sentiment.confidence}%\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-slate-400\">Posts Analyzed</span>\r\n                <span className=\"text-white font-semibold\">\r\n                  {sentimentData.social_sentiment.posts_analyzed}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </EnhancedCard>\r\n      </div>\r\n\r\n      {/* Symbols Analyzed */}\r\n      <EnhancedCard variant=\"default\" size=\"sm\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <span className=\"text-slate-400\">Symbols Analyzed</span>\r\n          <div className=\"flex items-center gap-2\">\r\n            {sentimentData.symbols.map((symbol, index) => (\r\n              <span\r\n                key={symbol}\r\n                className=\"bg-slate-700 text-white px-2 py-1 rounded text-sm font-mono\"\r\n              >\r\n                {symbol}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </EnhancedCard>\r\n\r\n      {/* Loading indicator */}\r\n      {isLoading && (\r\n        <div className=\"text-center\">\r\n          <StatusIndicator status=\"loading\" size=\"sm\" />\r\n          <p className=\"mt-2 text-slate-400\">Updating sentiment analysis...</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SentimentDashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\StatusBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\StockLookup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\StrategyBuilderAI.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\SubscriptionManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\TelemetryProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\TemplateCustomizationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\TradingJournal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\TradingModeIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isPaper' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":63,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onModeChange' is defined but never used. Allowed unused args must match /^_/u.","line":173,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Trading Mode Indicator\r\n * Prominent indicator showing paper/live trading mode with safety warnings\r\n */\r\n\r\nimport { AlertTriangle, Shield, Zap } from \"lucide-react\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\ninterface TradingModeIndicatorProps {\r\n  mode?: \"paper\" | \"live\";\r\n  onModeChange?: (mode: \"paper\" | \"live\") => void;\r\n  className?: string;\r\n}\r\n\r\nexport default function TradingModeIndicator({\r\n  mode = \"paper\",\r\n  onModeChange,\r\n  className = \"\",\r\n}: TradingModeIndicatorProps) {\r\n  const [isChanging, setIsChanging] = useState(false);\r\n  const [showWarning, setShowWarning] = useState(false);\r\n\r\n  // Get mode from localStorage if not provided\r\n  useEffect(() => {\r\n    const savedMode = localStorage.getItem(\"trading-mode\") as \"paper\" | \"live\" | null;\r\n    if (savedMode && onModeChange) {\r\n      onModeChange(savedMode);\r\n    }\r\n  }, [onModeChange]);\r\n\r\n  const handleModeChange = async (newMode: \"paper\" | \"live\") => {\r\n    if (newMode === \"live\") {\r\n      setShowWarning(true);\r\n      return;\r\n    }\r\n\r\n    setIsChanging(true);\r\n\r\n    // Save to localStorage\r\n    localStorage.setItem(\"trading-mode\", newMode);\r\n\r\n    // Call parent handler\r\n    if (onModeChange) {\r\n      onModeChange(newMode);\r\n    }\r\n\r\n    // Reset state\r\n    setTimeout(() => {\r\n      setIsChanging(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const confirmLiveMode = () => {\r\n    setShowWarning(false);\r\n    handleModeChange(\"live\");\r\n  };\r\n\r\n  const cancelLiveMode = () => {\r\n    setShowWarning(false);\r\n  };\r\n\r\n  const isLive = mode === \"live\";\r\n  const isPaper = mode === \"paper\";\r\n\r\n  return (\r\n    <>\r\n      {/* Main Indicator */}\r\n      <div className={`relative ${className}`}>\r\n        <div\r\n          className={`\r\n            flex items-center gap-2 px-4 py-2 rounded-lg font-semibold text-sm\r\n            transition-all duration-300 cursor-pointer\r\n            ${\r\n              isLive\r\n                ? \"bg-red-100 text-red-800 border-2 border-red-300 hover:bg-red-200\"\r\n                : \"bg-green-100 text-green-800 border-2 border-green-300 hover:bg-green-200\"\r\n            }\r\n            ${isChanging ? \"opacity-50 pointer-events-none\" : \"\"}\r\n          `}\r\n          onClick={() => handleModeChange(isLive ? \"paper\" : \"live\")}\r\n          style={{\r\n            backdropFilter: \"blur(10px)\",\r\n            boxShadow: isLive\r\n              ? \"0 4px 12px rgba(239, 68, 68, 0.2)\"\r\n              : \"0 4px 12px rgba(34, 197, 94, 0.2)\",\r\n          }}\r\n        >\r\n          {isLive ? (\r\n            <>\r\n              <Zap className=\"w-4 h-4\" />\r\n              <span>LIVE TRADING</span>\r\n              <AlertTriangle className=\"w-4 h-4\" />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Shield className=\"w-4 h-4\" />\r\n              <span>PAPER TRADING</span>\r\n            </>\r\n          )}\r\n\r\n          {isChanging && (\r\n            <div className=\"ml-2\">\r\n              <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Mode Description */}\r\n        <div className=\"mt-1 text-xs text-gray-600\">\r\n          {isLive ? (\r\n            <span className=\"text-red-600 font-medium\">\r\n              ΓÜá∩╕Å Real money at risk - trades will execute\r\n            </span>\r\n          ) : (\r\n            <span className=\"text-green-600\">Γ£à Safe practice mode - no real money</span>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Live Mode Warning Modal */}\r\n      {showWarning && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white rounded-xl p-6 max-w-md mx-4 shadow-2xl\">\r\n            <div className=\"flex items-center gap-3 mb-4\">\r\n              <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\r\n                <AlertTriangle className=\"w-6 h-6 text-red-600\" />\r\n              </div>\r\n              <div>\r\n                <h3 className=\"text-lg font-bold text-gray-900\">Switch to Live Trading?</h3>\r\n                <p className=\"text-sm text-gray-600\">This will use real money</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-3 mb-6\">\r\n              <div className=\"flex items-start gap-2 text-sm text-gray-700\">\r\n                <span className=\"text-red-500 mt-0.5\">ΓÇó</span>\r\n                <span>All trades will execute with real money</span>\r\n              </div>\r\n              <div className=\"flex items-start gap-2 text-sm text-gray-700\">\r\n                <span className=\"text-red-500 mt-0.5\">ΓÇó</span>\r\n                <span>You can lose money on trades</span>\r\n              </div>\r\n              <div className=\"flex items-start gap-2 text-sm text-gray-700\">\r\n                <span className=\"text-red-500 mt-0.5\">ΓÇó</span>\r\n                <span>Make sure you understand the risks</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex gap-3\">\r\n              <button\r\n                onClick={confirmLiveMode}\r\n                className=\"flex-1 bg-red-600 text-white py-2 px-4 rounded-lg font-semibold hover:bg-red-700 transition-colors\"\r\n              >\r\n                Yes, Go Live\r\n              </button>\r\n              <button\r\n                onClick={cancelLiveMode}\r\n                className=\"flex-1 bg-gray-200 text-gray-800 py-2 px-4 rounded-lg font-semibold hover:bg-gray-300 transition-colors\"\r\n              >\r\n                Stay Safe\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// Compact version for headers/toolbars\r\nexport function CompactTradingModeIndicator({\r\n  mode = \"paper\",\r\n  onModeChange,\r\n  className = \"\",\r\n}: TradingModeIndicatorProps) {\r\n  const isLive = mode === \"live\";\r\n\r\n  return (\r\n    <div className={`flex items-center gap-1 ${className}`}>\r\n      <div\r\n        className={`\r\n          w-3 h-3 rounded-full\r\n          ${isLive ? \"bg-red-500\" : \"bg-green-500\"}\r\n        `}\r\n      />\r\n      <span className=\"text-xs font-medium text-gray-600\">{isLive ? \"LIVE\" : \"PAPER\"}</span>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\TradingViewChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\UserProfileDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\UserSetup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\UserSetupAI.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\WatchlistManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\WatchlistPanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchQuotes'. Either include it or remove the dependency array.","line":96,"column":6,"nodeType":"ArrayExpression","endLine":96,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [selectedWatchlistId, refreshInterval, fetchQuotes]","fix":{"range":[3027,3065],"text":"[selectedWatchlistId, refreshInterval, fetchQuotes]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\admin\\PerformanceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\auth\\AuthModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\auth\\LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\auth\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\auth\\RegisterForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\charts\\AIChartAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showPredictions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showAlerts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { useWebSocket } from \"../../hooks/useWebSocket\";\r\nimport AnimatedCounter from \"../ui/AnimatedCounter\";\r\nimport EnhancedCard from \"../ui/EnhancedCard\";\r\nimport StatusIndicator from \"../ui/StatusIndicator\";\r\n\r\ninterface AIChartAnalysisProps {\r\n  symbol: string;\r\n  userId: string;\r\n  className?: string;\r\n  showPatterns?: boolean;\r\n  showPredictions?: boolean;\r\n  showAlerts?: boolean;\r\n}\r\n\r\ninterface ChartPattern {\r\n  name: string;\r\n  confidence: number;\r\n  signal: \"bullish\" | \"bearish\" | \"neutral\";\r\n  description: string;\r\n  priceTarget?: number;\r\n}\r\n\r\ninterface AIInsight {\r\n  type: \"pattern\" | \"prediction\" | \"alert\";\r\n  title: string;\r\n  description: string;\r\n  confidence: number;\r\n  impact: \"high\" | \"medium\" | \"low\";\r\n  timestamp: string;\r\n}\r\n\r\nconst AIChartAnalysis: React.FC<AIChartAnalysisProps> = ({\r\n  symbol,\r\n  userId,\r\n  className,\r\n  showPatterns = true,\r\n  showPredictions = true,\r\n  showAlerts = true,\r\n}) => {\r\n  const [patterns, setPatterns] = useState<ChartPattern[]>([]);\r\n  const [insights, setInsights] = useState<AIInsight[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const { isConnected } = useWebSocket({\r\n    url: process.env.NEXT_PUBLIC_WS_URL || \"ws://localhost:8000/ws\",\r\n    userId,\r\n    autoConnect: true,\r\n  });\r\n\r\n  // Generate mock AI analysis\r\n  useEffect(() => {\r\n    const generateMockPatterns = (): ChartPattern[] => {\r\n      const patternTypes = [\r\n        { name: \"Head and Shoulders\", signal: \"bearish\" as const, confidence: 85 },\r\n        { name: \"Double Bottom\", signal: \"bullish\" as const, confidence: 78 },\r\n        { name: \"Ascending Triangle\", signal: \"bullish\" as const, confidence: 72 },\r\n        { name: \"Descending Triangle\", signal: \"bearish\" as const, confidence: 68 },\r\n        { name: \"Cup and Handle\", signal: \"bullish\" as const, confidence: 82 },\r\n        { name: \"Flag Pattern\", signal: \"neutral\" as const, confidence: 65 },\r\n      ];\r\n\r\n      return patternTypes\r\n        .filter(() => Math.random() > 0.5) // Random selection\r\n        .map((pattern) => ({\r\n          ...pattern,\r\n          description: `AI detected ${pattern.name.toLowerCase()} pattern with ${pattern.confidence}% confidence`,\r\n          priceTarget:\r\n            pattern.signal === \"bullish\" ? 150 + Math.random() * 50 : 100 + Math.random() * 30,\r\n        }));\r\n    };\r\n\r\n    const generateMockInsights = (): AIInsight[] => {\r\n      const insightTypes = [\r\n        {\r\n          type: \"pattern\" as const,\r\n          title: \"Support Level Identified\",\r\n          description: `Strong support detected at $${(120 + Math.random() * 20).toFixed(2)}`,\r\n          confidence: 85,\r\n          impact: \"high\" as const,\r\n        },\r\n        {\r\n          type: \"prediction\" as const,\r\n          title: \"Price Target Prediction\",\r\n          description: `AI predicts ${symbol} will reach $${(150 + Math.random() * 30).toFixed(2)} within 30 days`,\r\n          confidence: 72,\r\n          impact: \"medium\" as const,\r\n        },\r\n        {\r\n          type: \"alert\" as const,\r\n          title: \"Volume Spike Alert\",\r\n          description: `Unusual volume increase detected - potential breakout signal`,\r\n          confidence: 68,\r\n          impact: \"medium\" as const,\r\n        },\r\n        {\r\n          type: \"pattern\" as const,\r\n          title: \"Resistance Breakout\",\r\n          description: `Price approaching key resistance at $${(140 + Math.random() * 20).toFixed(2)}`,\r\n          confidence: 78,\r\n          impact: \"high\" as const,\r\n        },\r\n      ];\r\n\r\n      return insightTypes\r\n        .filter(() => Math.random() > 0.3) // Random selection\r\n        .map((insight) => ({\r\n          ...insight,\r\n          timestamp: new Date().toISOString(),\r\n        }));\r\n    };\r\n\r\n    setPatterns(generateMockPatterns());\r\n    setInsights(generateMockInsights());\r\n  }, [symbol]);\r\n\r\n  const getSignalColor = (signal: string) => {\r\n    switch (signal) {\r\n      case \"bullish\":\r\n        return \"text-green-400\";\r\n      case \"bearish\":\r\n        return \"text-red-400\";\r\n      default:\r\n        return \"text-yellow-400\";\r\n    }\r\n  };\r\n\r\n  const getImpactColor = (impact: string) => {\r\n    switch (impact) {\r\n      case \"high\":\r\n        return \"text-red-400\";\r\n      case \"medium\":\r\n        return \"text-yellow-400\";\r\n      default:\r\n        return \"text-green-400\";\r\n    }\r\n  };\r\n\r\n  const getConfidenceColor = (confidence: number) => {\r\n    if (confidence >= 80) return \"text-green-400\";\r\n    if (confidence >= 60) return \"text-yellow-400\";\r\n    return \"text-red-400\";\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center text-red-400\">\r\n          <StatusIndicator status=\"error\" size=\"sm\" />\r\n          <p className=\"mt-2\">AI Analysis Error: {error}</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center\">\r\n          <StatusIndicator status=\"loading\" size=\"sm\" />\r\n          <p className=\"mt-2 text-slate-400\">Analyzing chart patterns...</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <h3 className=\"text-white font-bold text-xl\">AI Chart Analysis</h3>\r\n          <StatusIndicator status={isConnected ? \"online\" : \"offline\"} size=\"sm\" />\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          <span className=\"text-slate-400 text-sm\">{symbol}</span>\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\r\n        </div>\r\n      </div>\r\n\r\n      {/* AI Insights Summary */}\r\n      <EnhancedCard variant=\"gradient\" size=\"lg\">\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <span className=\"text-3xl\">≡ƒñû</span>\r\n            <div>\r\n              <h4 className=\"text-white font-bold text-lg\">AI Market Intelligence</h4>\r\n              <p className=\"text-slate-300 text-sm\">\r\n                Real-time pattern recognition and predictive analysis\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-slate-400 text-sm\">Patterns Detected</div>\r\n              <div className=\"text-white font-bold text-2xl\">{patterns.length}</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-slate-400 text-sm\">Avg Confidence</div>\r\n              <div className=\"text-white font-bold text-2xl\">\r\n                {patterns.length > 0\r\n                  ? Math.round(patterns.reduce((sum, p) => sum + p.confidence, 0) / patterns.length)\r\n                  : 0}\r\n                %\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-slate-400 text-sm\">Active Insights</div>\r\n              <div className=\"text-white font-bold text-2xl\">{insights.length}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </EnhancedCard>\r\n\r\n      {/* Chart Patterns */}\r\n      {showPatterns && patterns.length > 0 && (\r\n        <div className=\"space-y-4\">\r\n          <h4 className=\"text-white font-semibold text-lg\">Detected Patterns</h4>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {patterns.map((pattern, index) => (\r\n              <EnhancedCard key={index} variant=\"glass\" size=\"md\">\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"font-semibold text-white\">{pattern.name}</span>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span className={`text-sm font-semibold ${getSignalColor(pattern.signal)}`}>\r\n                        {pattern.signal.toUpperCase()}\r\n                      </span>\r\n                      <StatusIndicator\r\n                        status={pattern.confidence >= 80 ? \"online\" : \"warning\"}\r\n                        size=\"sm\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <p className=\"text-slate-300 text-sm\">{pattern.description}</p>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-slate-400 text-sm\">Confidence</span>\r\n                      <span className={`font-semibold ${getConfidenceColor(pattern.confidence)}`}>\r\n                        {pattern.confidence}%\r\n                      </span>\r\n                    </div>\r\n\r\n                    {pattern.priceTarget && (\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-slate-400 text-sm\">Price Target</span>\r\n                        <AnimatedCounter\r\n                          value={pattern.priceTarget}\r\n                          prefix=\"$\"\r\n                          decimals={2}\r\n                          color=\"neutral\"\r\n                          className=\"font-semibold\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </EnhancedCard>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* AI Insights */}\r\n      {insights.length > 0 && (\r\n        <div className=\"space-y-4\">\r\n          <h4 className=\"text-white font-semibold text-lg\">AI Insights</h4>\r\n          <div className=\"space-y-3\">\r\n            {insights.map((insight, index) => (\r\n              <EnhancedCard key={index} variant=\"glass\" size=\"sm\">\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"font-semibold text-white\">{insight.title}</span>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span\r\n                        className={`text-xs px-2 py-1 rounded ${getImpactColor(insight.impact)} bg-slate-700`}\r\n                      >\r\n                        {insight.impact.toUpperCase()}\r\n                      </span>\r\n                      <span\r\n                        className={`text-sm font-semibold ${getConfidenceColor(insight.confidence)}`}\r\n                      >\r\n                        {insight.confidence}%\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <p className=\"text-slate-300 text-sm\">{insight.description}</p>\r\n\r\n                  <div className=\"text-xs text-slate-500\">\r\n                    {new Date(insight.timestamp).toLocaleString()}\r\n                  </div>\r\n                </div>\r\n              </EnhancedCard>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* No Data State */}\r\n      {patterns.length === 0 && insights.length === 0 && (\r\n        <EnhancedCard variant=\"default\" className=\"text-center\">\r\n          <div className=\"text-slate-400\">\r\n            <StatusIndicator status=\"offline\" size=\"sm\" />\r\n            <p className=\"mt-2\">No AI analysis available for {symbol}</p>\r\n            <p className=\"text-sm\">AI is analyzing market data...</p>\r\n          </div>\r\n        </EnhancedCard>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIChartAnalysis;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\charts\\AdvancedChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":46,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'marketData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as d3 from \"d3\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useWebSocket } from \"../../hooks/useWebSocket\";\r\nimport EnhancedCard from \"../ui/EnhancedCard\";\r\nimport StatusIndicator from \"../ui/StatusIndicator\";\r\n\r\ninterface AdvancedChartProps {\r\n  symbol: string;\r\n  userId: string;\r\n  className?: string;\r\n  chartType?: \"candlestick\" | \"line\" | \"volume\" | \"heatmap\";\r\n  timeFrame?: \"1m\" | \"5m\" | \"15m\" | \"1h\" | \"1d\";\r\n  showIndicators?: boolean;\r\n  showAI?: boolean;\r\n}\r\n\r\ninterface ChartData {\r\n  timestamp: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n}\r\n\r\ninterface TechnicalIndicator {\r\n  name: string;\r\n  value: number;\r\n  signal: \"buy\" | \"sell\" | \"hold\";\r\n  color: string;\r\n}\r\n\r\nconst AdvancedChart: React.FC<AdvancedChartProps> = ({\r\n  symbol,\r\n  userId,\r\n  className,\r\n  chartType = \"candlestick\",\r\n  timeFrame = \"1d\",\r\n  showIndicators = true,\r\n  showAI = true,\r\n}) => {\r\n  const svgRef = useRef<SVGSVGElement>(null);\r\n  const [chartData, setChartData] = useState<ChartData[]>([]);\r\n  const [indicators, setIndicators] = useState<TechnicalIndicator[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const { isConnected, marketData } = useWebSocket({\r\n    url: process.env.NEXT_PUBLIC_WS_URL || \"ws://localhost:8000/ws\",\r\n    userId,\r\n    autoConnect: true,\r\n  });\r\n\r\n  // Generate mock chart data\r\n  useEffect(() => {\r\n    const generateMockData = () => {\r\n      const data: ChartData[] = [];\r\n      const now = new Date();\r\n\r\n      for (let i = 100; i >= 0; i--) {\r\n        const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\r\n        const basePrice = 150 + Math.sin(i * 0.1) * 20;\r\n        const volatility = 2 + Math.random() * 3;\r\n\r\n        const open = basePrice + (Math.random() - 0.5) * volatility;\r\n        const close = open + (Math.random() - 0.5) * volatility * 2;\r\n        const high = Math.max(open, close) + Math.random() * volatility;\r\n        const low = Math.min(open, close) - Math.random() * volatility;\r\n        const volume = Math.floor(Math.random() * 1000000) + 100000;\r\n\r\n        data.push({\r\n          timestamp: date.toISOString(),\r\n          open: Number(open.toFixed(2)),\r\n          high: Number(high.toFixed(2)),\r\n          low: Number(low.toFixed(2)),\r\n          close: Number(close.toFixed(2)),\r\n          volume,\r\n        });\r\n      }\r\n\r\n      return data;\r\n    };\r\n\r\n    setChartData(generateMockData());\r\n  }, [symbol]);\r\n\r\n  // Calculate technical indicators\r\n  useEffect(() => {\r\n    if (chartData.length === 0) return;\r\n\r\n    const calculateRSI = (prices: number[], period: number = 14): number => {\r\n      if (prices.length < period + 1) return 50;\r\n\r\n      const gains: number[] = [];\r\n      const losses: number[] = [];\r\n\r\n      for (let i = 1; i < prices.length; i++) {\r\n        const change = prices[i] - prices[i - 1];\r\n        gains.push(change > 0 ? change : 0);\r\n        losses.push(change < 0 ? Math.abs(change) : 0);\r\n      }\r\n\r\n      const avgGain = gains.slice(-period).reduce((a, b) => a + b, 0) / period;\r\n      const avgLoss = losses.slice(-period).reduce((a, b) => a + b, 0) / period;\r\n\r\n      if (avgLoss === 0) return 100;\r\n      const rs = avgGain / avgLoss;\r\n      return 100 - 100 / (1 + rs);\r\n    };\r\n\r\n    const calculateMACD = (\r\n      prices: number[]\r\n    ): { macd: number; signal: number; histogram: number } => {\r\n      if (prices.length < 26) return { macd: 0, signal: 0, histogram: 0 };\r\n\r\n      const ema12 = prices.slice(-12).reduce((a, b) => a + b, 0) / 12;\r\n      const ema26 = prices.slice(-26).reduce((a, b) => a + b, 0) / 26;\r\n      const macd = ema12 - ema26;\r\n      const signal = macd * 0.9; // Simplified signal line\r\n      const histogram = macd - signal;\r\n\r\n      return { macd, signal, histogram };\r\n    };\r\n\r\n    const prices = chartData.map((d) => d.close);\r\n    const rsi = calculateRSI(prices);\r\n    const macd = calculateMACD(prices);\r\n\r\n    const newIndicators: TechnicalIndicator[] = [\r\n      {\r\n        name: \"RSI\",\r\n        value: rsi,\r\n        signal: rsi > 70 ? \"sell\" : rsi < 30 ? \"buy\" : \"hold\",\r\n        color: rsi > 70 ? \"#ef4444\" : rsi < 30 ? \"#22c55e\" : \"#6b7280\",\r\n      },\r\n      {\r\n        name: \"MACD\",\r\n        value: macd.macd,\r\n        signal: macd.macd > macd.signal ? \"buy\" : \"sell\",\r\n        color: macd.macd > macd.signal ? \"#22c55e\" : \"#ef4444\",\r\n      },\r\n    ];\r\n\r\n    setIndicators(newIndicators);\r\n  }, [chartData]);\r\n\r\n  // Render candlestick chart\r\n  useEffect(() => {\r\n    if (!svgRef.current || chartData.length === 0) return;\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n    const width = 800 - margin.left - margin.right;\r\n    const height = 400 - margin.top - margin.bottom;\r\n\r\n    const g = svg\r\n      .attr(\"width\", 800)\r\n      .attr(\"height\", 400)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n    // Scales\r\n    const xScale = d3\r\n      .scaleTime()\r\n      .domain(d3.extent(chartData, (d) => new Date(d.timestamp)) as [Date, Date])\r\n      .range([0, width]);\r\n\r\n    const yScale = d3\r\n      .scaleLinear()\r\n      .domain(d3.extent(chartData, (d) => [d.low, d.high]).flat() as [number, number])\r\n      .range([height, 0]);\r\n\r\n    // Candlestick rectangles\r\n    g.selectAll(\".candlestick\")\r\n      .data(chartData)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"class\", \"candlestick\")\r\n      .attr(\"x\", (d) => xScale(new Date(d.timestamp)) - 2)\r\n      .attr(\"y\", (d) => yScale(Math.max(d.open, d.close)))\r\n      .attr(\"width\", 4)\r\n      .attr(\"height\", (d) => Math.abs(yScale(d.close) - yScale(d.open)))\r\n      .attr(\"fill\", (d) => (d.close >= d.open ? \"#22c55e\" : \"#ef4444\"))\r\n      .attr(\"stroke\", (d) => (d.close >= d.open ? \"#16a34a\" : \"#dc2626\"));\r\n\r\n    // High-low lines\r\n    g.selectAll(\".wick\")\r\n      .data(chartData)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"wick\")\r\n      .attr(\"x1\", (d) => xScale(new Date(d.timestamp)))\r\n      .attr(\"x2\", (d) => xScale(new Date(d.timestamp)))\r\n      .attr(\"y1\", (d) => yScale(d.high))\r\n      .attr(\"y2\", (d) => yScale(d.low))\r\n      .attr(\"stroke\", (d) => (d.close >= d.open ? \"#16a34a\" : \"#dc2626\"))\r\n      .attr(\"stroke-width\", 1);\r\n\r\n    // Moving average line\r\n    const ma20 = chartData\r\n      .map((d, i) => {\r\n        if (i < 19) return null;\r\n        const slice = chartData.slice(i - 19, i + 1);\r\n        const avg = slice.reduce((sum, item) => sum + item.close, 0) / slice.length;\r\n        return { timestamp: d.timestamp, value: avg };\r\n      })\r\n      .filter((d) => d !== null);\r\n\r\n    const line = d3\r\n      .line<{ timestamp: string; value: number }>()\r\n      .x((d) => xScale(new Date(d.timestamp)))\r\n      .y((d) => yScale(d.value));\r\n\r\n    g.append(\"path\")\r\n      .datum(ma20)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"#3b82f6\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"d\", line);\r\n\r\n    // Axes\r\n    g.append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height})`)\r\n      .call(d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%m/%d\")));\r\n\r\n    g.append(\"g\").call(d3.axisLeft(yScale).tickFormat(d3.format(\"$.2f\")));\r\n\r\n    // Grid lines\r\n    g.append(\"g\")\r\n      .attr(\"class\", \"grid\")\r\n      .attr(\"transform\", `translate(0,${height})`)\r\n      .call(\r\n        d3\r\n          .axisBottom(xScale)\r\n          .tickSize(-height)\r\n          .tickFormat(() => \"\")\r\n      )\r\n      .style(\"stroke-dasharray\", \"3,3\")\r\n      .style(\"opacity\", 0.3);\r\n\r\n    g.append(\"g\")\r\n      .attr(\"class\", \"grid\")\r\n      .call(\r\n        d3\r\n          .axisLeft(yScale)\r\n          .tickSize(-width)\r\n          .tickFormat(() => \"\")\r\n      )\r\n      .style(\"stroke-dasharray\", \"3,3\")\r\n      .style(\"opacity\", 0.3);\r\n  }, [chartData, chartType]);\r\n\r\n  if (error) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center text-red-400\">\r\n          <StatusIndicator status=\"error\" size=\"sm\" />\r\n          <p className=\"mt-2\">Chart Error: {error}</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center\">\r\n          <StatusIndicator status=\"loading\" size=\"sm\" />\r\n          <p className=\"mt-2 text-slate-400\">Loading chart data...</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`space-y-4 ${className}`}>\r\n      {/* Chart Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <h3 className=\"text-white font-bold text-xl\">{symbol} Chart</h3>\r\n          <StatusIndicator status={isConnected ? \"online\" : \"offline\"} size=\"sm\" />\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          <span className=\"text-slate-400 text-sm capitalize\">{chartType}</span>\r\n          <span className=\"text-slate-400 text-sm\">{timeFrame}</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Technical Indicators */}\r\n      {showIndicators && indicators.length > 0 && (\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n          {indicators.map((indicator, index) => (\r\n            <EnhancedCard key={index} variant=\"glass\" size=\"sm\">\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-slate-400 text-sm\">{indicator.name}</span>\r\n                  <div\r\n                    className=\"w-3 h-3 rounded-full\"\r\n                    style={{ backgroundColor: indicator.color }}\r\n                  />\r\n                </div>\r\n                <div className=\"text-white font-semibold\">{indicator.value.toFixed(2)}</div>\r\n                <div className=\"text-xs text-slate-400 capitalize\">{indicator.signal}</div>\r\n              </div>\r\n            </EnhancedCard>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Chart Container */}\r\n      <EnhancedCard variant=\"glass\" size=\"lg\">\r\n        <div className=\"w-full h-full\">\r\n          <svg ref={svgRef} className=\"w-full h-full\" style={{ minHeight: \"400px\" }} />\r\n        </div>\r\n      </EnhancedCard>\r\n\r\n      {/* AI Insights */}\r\n      {showAI && (\r\n        <EnhancedCard variant=\"gradient\" size=\"md\">\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"text-2xl\">≡ƒñû</span>\r\n              <h4 className=\"text-white font-semibold\">AI Chart Analysis</h4>\r\n            </div>\r\n            <div className=\"text-slate-300 text-sm\">\r\n              <p>\r\n                ΓÇó Trend:{\" \"}\r\n                {chartData[chartData.length - 1]?.close > chartData[chartData.length - 2]?.close\r\n                  ? \"Bullish\"\r\n                  : \"Bearish\"}\r\n              </p>\r\n              <p>ΓÇó Support: ${Math.min(...chartData.map((d) => d.low)).toFixed(2)}</p>\r\n              <p>ΓÇó Resistance: ${Math.max(...chartData.map((d) => d.high)).toFixed(2)}</p>\r\n              <p>ΓÇó Volume: {chartData[chartData.length - 1]?.volume.toLocaleString()}</p>\r\n            </div>\r\n          </div>\r\n        </EnhancedCard>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdvancedChart;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\charts\\MarketVisualization.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":128,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'d' is defined but never used. Allowed unused args must match /^_/u.","line":128,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":131,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'d' is defined but never used. Allowed unused args must match /^_/u.","line":131,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":202,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'d' is defined but never used. Allowed unused args must match /^_/u.","line":202,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":205,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":205,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'d' is defined but never used. Allowed unused args must match /^_/u.","line":205,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":205,"endColumn":41},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'renderBubbleChart' and 'renderTreemap'. Either include them or remove the dependency array.","line":255,"column":6,"nodeType":"ArrayExpression","endLine":255,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [marketData, renderBubbleChart, renderTreemap, selectedType]","fix":{"range":[8159,8185],"text":"[marketData, renderBubbleChart, renderTreemap, selectedType]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":299,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9638,9641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9638,9641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as d3 from \"d3\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useWebSocket } from \"../../hooks/useWebSocket\";\r\nimport AnimatedCounter from \"../ui/AnimatedCounter\";\r\nimport EnhancedCard from \"../ui/EnhancedCard\";\r\nimport StatusIndicator from \"../ui/StatusIndicator\";\r\n\r\ninterface MarketVisualizationProps {\r\n  userId: string;\r\n  className?: string;\r\n  visualizationType?: \"treemap\" | \"bubble\" | \"sector\" | \"correlation\";\r\n  symbols?: string[];\r\n  showLegend?: boolean;\r\n  showControls?: boolean;\r\n}\r\n\r\ninterface MarketData {\r\n  symbol: string;\r\n  value: number;\r\n  change: number;\r\n  changePercent: number;\r\n  volume: number;\r\n  marketCap: number;\r\n  sector: string;\r\n  color: string;\r\n}\r\n\r\nconst MarketVisualization: React.FC<MarketVisualizationProps> = ({\r\n  userId,\r\n  className,\r\n  visualizationType = \"treemap\",\r\n  symbols = [\"AAPL\", \"MSFT\", \"GOOGL\", \"TSLA\", \"NVDA\", \"AMZN\", \"META\", \"NFLX\", \"AMD\", \"INTC\"],\r\n  showLegend = true,\r\n  showControls = true,\r\n}) => {\r\n  const svgRef = useRef<SVGSVGElement>(null);\r\n  const [marketData, setMarketData] = useState<MarketData[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedType, setSelectedType] = useState(visualizationType);\r\n\r\n  const { isConnected } = useWebSocket({\r\n    url: process.env.NEXT_PUBLIC_WS_URL || \"ws://localhost:8000/ws\",\r\n    userId,\r\n    autoConnect: true,\r\n  });\r\n\r\n  // Generate mock market data\r\n  useEffect(() => {\r\n    const generateMockData = (): MarketData[] => {\r\n      const sectors = [\r\n        { name: \"Technology\", color: \"#3b82f6\" },\r\n        { name: \"Healthcare\", color: \"#10b981\" },\r\n        { name: \"Finance\", color: \"#f59e0b\" },\r\n        { name: \"Energy\", color: \"#ef4444\" },\r\n        { name: \"Consumer\", color: \"#8b5cf6\" },\r\n        { name: \"Industrial\", color: \"#06b6d4\" },\r\n      ];\r\n\r\n      return symbols.map((symbol) => {\r\n        const change = (Math.random() - 0.5) * 20;\r\n        const baseValue = 50 + Math.random() * 300;\r\n        const volume = Math.floor(Math.random() * 50000000) + 1000000;\r\n        const marketCap = Math.floor(Math.random() * 2000000000000) + 10000000000;\r\n        const sector = sectors[Math.floor(Math.random() * sectors.length)];\r\n\r\n        return {\r\n          symbol,\r\n          value: Number(baseValue.toFixed(2)),\r\n          change: Number(change.toFixed(2)),\r\n          changePercent: Number(((change / baseValue) * 100).toFixed(2)),\r\n          volume,\r\n          marketCap,\r\n          sector: sector.name,\r\n          color: sector.color,\r\n        };\r\n      });\r\n    };\r\n\r\n    setMarketData(generateMockData());\r\n  }, [symbols]);\r\n\r\n  // Render treemap visualization\r\n  const renderTreemap = () => {\r\n    if (!svgRef.current || marketData.length === 0) return;\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n    const width = 800 - margin.left - margin.right;\r\n    const height = 400 - margin.top - margin.bottom;\r\n\r\n    const g = svg\r\n      .attr(\"width\", 800)\r\n      .attr(\"height\", 400)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n    // Create treemap layout\r\n    const treemap = d3.treemap<MarketData>().size([width, height]).padding(2).round(true);\r\n\r\n    const root = d3\r\n      .hierarchy({ children: marketData })\r\n      .sum((d) => d.marketCap)\r\n      .sort((a, b) => (b.value || 0) - (a.value || 0));\r\n\r\n    treemap(root);\r\n\r\n    // Create cells\r\n    const cells = g\r\n      .selectAll(\".treemap-cell\")\r\n      .data(root.leaves())\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"treemap-cell\")\r\n      .attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\r\n\r\n    // Add rectangles\r\n    cells\r\n      .append(\"rect\")\r\n      .attr(\"width\", (d) => d.x1 - d.x0)\r\n      .attr(\"height\", (d) => d.y1 - d.y0)\r\n      .attr(\"fill\", (d) => d.data.color)\r\n      .attr(\"stroke\", \"#374151\")\r\n      .attr(\"stroke-width\", 1)\r\n      .style(\"cursor\", \"pointer\")\r\n      .on(\"mouseover\", function (event, d) {\r\n        d3.select(this).attr(\"stroke\", \"#60a5fa\").attr(\"stroke-width\", 2);\r\n      })\r\n      .on(\"mouseout\", function (event, d) {\r\n        d3.select(this).attr(\"stroke\", \"#374151\").attr(\"stroke-width\", 1);\r\n      });\r\n\r\n    // Add text labels\r\n    cells\r\n      .append(\"text\")\r\n      .attr(\"x\", (d) => (d.x1 - d.x0) / 2)\r\n      .attr(\"y\", (d) => (d.y1 - d.y0) / 2 - 5)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", (d) => Math.min(12, (d.x1 - d.x0) / 6))\r\n      .attr(\"font-weight\", \"bold\")\r\n      .attr(\"fill\", \"white\")\r\n      .text((d) => d.data.symbol);\r\n\r\n    cells\r\n      .append(\"text\")\r\n      .attr(\"x\", (d) => (d.x1 - d.x0) / 2)\r\n      .attr(\"y\", (d) => (d.y1 - d.y0) / 2 + 10)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", (d) => Math.min(10, (d.x1 - d.x0) / 8))\r\n      .attr(\"fill\", \"white\")\r\n      .text((d) => `${d.data.changePercent >= 0 ? \"+\" : \"\"}${d.data.changePercent.toFixed(1)}%`);\r\n  };\r\n\r\n  // Render bubble chart\r\n  const renderBubbleChart = () => {\r\n    if (!svgRef.current || marketData.length === 0) return;\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n    const width = 800 - margin.left - margin.right;\r\n    const height = 400 - margin.top - margin.bottom;\r\n\r\n    const g = svg\r\n      .attr(\"width\", 800)\r\n      .attr(\"height\", 400)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n    // Scales\r\n    const xScale = d3\r\n      .scaleLinear()\r\n      .domain(d3.extent(marketData, (d) => d.changePercent) as [number, number])\r\n      .range([0, width]);\r\n\r\n    const yScale = d3\r\n      .scaleLinear()\r\n      .domain(d3.extent(marketData, (d) => d.volume) as [number, number])\r\n      .range([height, 0]);\r\n\r\n    const rScale = d3\r\n      .scaleSqrt()\r\n      .domain(d3.extent(marketData, (d) => d.marketCap) as [number, number])\r\n      .range([5, 30]);\r\n\r\n    // Add bubbles\r\n    g.selectAll(\".bubble\")\r\n      .data(marketData)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"class\", \"bubble\")\r\n      .attr(\"cx\", (d) => xScale(d.changePercent))\r\n      .attr(\"cy\", (d) => yScale(d.volume))\r\n      .attr(\"r\", (d) => rScale(d.marketCap))\r\n      .attr(\"fill\", (d) => d.color)\r\n      .attr(\"stroke\", \"#374151\")\r\n      .attr(\"stroke-width\", 1)\r\n      .style(\"cursor\", \"pointer\")\r\n      .on(\"mouseover\", function (event, d) {\r\n        d3.select(this).attr(\"stroke\", \"#60a5fa\").attr(\"stroke-width\", 2);\r\n      })\r\n      .on(\"mouseout\", function (event, d) {\r\n        d3.select(this).attr(\"stroke\", \"#374151\").attr(\"stroke-width\", 1);\r\n      });\r\n\r\n    // Add labels\r\n    g.selectAll(\".bubble-label\")\r\n      .data(marketData)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"class\", \"bubble-label\")\r\n      .attr(\"x\", (d) => xScale(d.changePercent))\r\n      .attr(\"y\", (d) => yScale(d.volume))\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dominant-baseline\", \"middle\")\r\n      .attr(\"font-size\", \"10px\")\r\n      .attr(\"font-weight\", \"bold\")\r\n      .attr(\"fill\", \"white\")\r\n      .text((d) => d.symbol);\r\n\r\n    // Add axes\r\n    g.append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height})`)\r\n      .call(d3.axisBottom(xScale).tickFormat(d3.format(\".1f\")));\r\n\r\n    g.append(\"g\").call(d3.axisLeft(yScale).tickFormat(d3.format(\".0s\")));\r\n\r\n    // Add axis labels\r\n    g.append(\"text\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"y\", 0 - margin.left)\r\n      .attr(\"x\", 0 - height / 2)\r\n      .attr(\"dy\", \"1em\")\r\n      .style(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"white\")\r\n      .text(\"Volume\");\r\n\r\n    g.append(\"text\")\r\n      .attr(\"transform\", `translate(${width / 2}, ${height + margin.bottom - 5})`)\r\n      .style(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"white\")\r\n      .text(\"Change %\");\r\n  };\r\n\r\n  // Render visualization based on type\r\n  useEffect(() => {\r\n    if (selectedType === \"treemap\") {\r\n      renderTreemap();\r\n    } else if (selectedType === \"bubble\") {\r\n      renderBubbleChart();\r\n    }\r\n  }, [marketData, selectedType]);\r\n\r\n  const getPerformanceColor = (change: number) => {\r\n    if (change > 5) return \"text-green-400\";\r\n    if (change > 0) return \"text-green-300\";\r\n    if (change > -5) return \"text-yellow-400\";\r\n    return \"text-red-400\";\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center text-red-400\">\r\n          <StatusIndicator status=\"error\" size=\"sm\" />\r\n          <p className=\"mt-2\">Visualization Error: {error}</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center\">\r\n          <StatusIndicator status=\"loading\" size=\"sm\" />\r\n          <p className=\"mt-2 text-slate-400\">Loading market data...</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <h3 className=\"text-white font-bold text-xl\">Market Visualization</h3>\r\n          <StatusIndicator status={isConnected ? \"online\" : \"offline\"} size=\"sm\" />\r\n        </div>\r\n\r\n        {showControls && (\r\n          <div className=\"flex items-center gap-2\">\r\n            <select\r\n              value={selectedType}\r\n              onChange={(e) => setSelectedType(e.target.value as any)}\r\n              className=\"bg-slate-700 text-white border border-slate-600 rounded-lg px-3 py-1 text-sm\"\r\n            >\r\n              <option value=\"treemap\">Treemap</option>\r\n              <option value=\"bubble\">Bubble Chart</option>\r\n            </select>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Market Summary */}\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n        <EnhancedCard variant=\"glass\" size=\"sm\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-slate-400 text-sm\">Total Market Cap</div>\r\n            <AnimatedCounter\r\n              value={marketData.reduce((sum, d) => sum + d.marketCap, 0) / 1000000000}\r\n              prefix=\"$\"\r\n              suffix=\"B\"\r\n              decimals={1}\r\n              color=\"neutral\"\r\n              className=\"text-lg font-semibold\"\r\n            />\r\n          </div>\r\n        </EnhancedCard>\r\n\r\n        <EnhancedCard variant=\"glass\" size=\"sm\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-slate-400 text-sm\">Best Performer</div>\r\n            <div className=\"text-green-400 font-semibold\">\r\n              {\r\n                marketData.reduce((best, current) =>\r\n                  current.changePercent > best.changePercent ? current : best\r\n                ).symbol\r\n              }\r\n            </div>\r\n          </div>\r\n        </EnhancedCard>\r\n\r\n        <EnhancedCard variant=\"glass\" size=\"sm\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-slate-400 text-sm\">Worst Performer</div>\r\n            <div className=\"text-red-400 font-semibold\">\r\n              {\r\n                marketData.reduce((worst, current) =>\r\n                  current.changePercent < worst.changePercent ? current : worst\r\n                ).symbol\r\n              }\r\n            </div>\r\n          </div>\r\n        </EnhancedCard>\r\n\r\n        <EnhancedCard variant=\"glass\" size=\"sm\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-slate-400 text-sm\">Avg Change</div>\r\n            <AnimatedCounter\r\n              value={marketData.reduce((sum, d) => sum + d.changePercent, 0) / marketData.length}\r\n              prefix=\"\"\r\n              suffix=\"%\"\r\n              decimals={2}\r\n              color={\r\n                marketData.reduce((sum, d) => sum + d.changePercent, 0) / marketData.length >= 0\r\n                  ? \"positive\"\r\n                  : \"negative\"\r\n              }\r\n              className=\"text-lg font-semibold\"\r\n            />\r\n          </div>\r\n        </EnhancedCard>\r\n      </div>\r\n\r\n      {/* Visualization Chart */}\r\n      <EnhancedCard variant=\"glass\" size=\"lg\">\r\n        <div className=\"w-full h-full\">\r\n          <svg ref={svgRef} className=\"w-full h-full\" style={{ minHeight: \"400px\" }} />\r\n        </div>\r\n      </EnhancedCard>\r\n\r\n      {/* Legend */}\r\n      {showLegend && (\r\n        <EnhancedCard variant=\"default\" size=\"sm\">\r\n          <div className=\"space-y-3\">\r\n            <h4 className=\"text-white font-semibold\">Sector Legend</h4>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\r\n              {Array.from(new Set(marketData.map((d) => d.sector))).map((sector) => {\r\n                const sectorData = marketData.find((d) => d.sector === sector);\r\n                return (\r\n                  <div key={sector} className=\"flex items-center gap-2\">\r\n                    <div\r\n                      className=\"w-4 h-4 rounded\"\r\n                      style={{ backgroundColor: sectorData?.color }}\r\n                    />\r\n                    <span className=\"text-slate-300 text-sm\">{sector}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </EnhancedCard>\r\n      )}\r\n\r\n      {/* Detailed List */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        {marketData.map((item, index) => (\r\n          <EnhancedCard\r\n            key={index}\r\n            variant=\"glass\"\r\n            size=\"sm\"\r\n            className=\"hover:scale-105 transition-transform\"\r\n          >\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"font-mono font-bold text-white\">{item.symbol}</span>\r\n                <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: item.color }} />\r\n              </div>\r\n\r\n              <div className=\"space-y-1\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-slate-400 text-sm\">Price</span>\r\n                  <span className=\"text-white font-semibold\">${item.value.toFixed(2)}</span>\r\n                </div>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-slate-400 text-sm\">Change</span>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <AnimatedCounter\r\n                      value={item.change}\r\n                      prefix={item.change >= 0 ? \"+\" : \"\"}\r\n                      decimals={2}\r\n                      color={item.change >= 0 ? \"positive\" : \"negative\"}\r\n                      className=\"text-sm font-semibold\"\r\n                    />\r\n                    <span\r\n                      className={`text-sm font-semibold ${getPerformanceColor(item.changePercent)}`}\r\n                    >\r\n                      {item.changePercent >= 0 ? \"+\" : \"\"}\r\n                      {item.changePercent.toFixed(2)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-slate-400 text-sm\">Sector</span>\r\n                  <span className=\"text-white text-sm\">{item.sector}</span>\r\n                </div>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-slate-400 text-sm\">Market Cap</span>\r\n                  <span className=\"text-white text-sm\">\r\n                    ${(item.marketCap / 1000000000).toFixed(1)}B\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </EnhancedCard>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarketVisualization;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\charts\\PortfolioHeatmap.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showPerformance' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":35,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":36,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'marketData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":138,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'d' is defined but never used. Allowed unused args must match /^_/u.","line":138,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":142,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'d' is defined but never used. Allowed unused args must match /^_/u.","line":142,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":41}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as d3 from \"d3\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useWebSocket } from \"../../hooks/useWebSocket\";\r\nimport AnimatedCounter from \"../ui/AnimatedCounter\";\r\nimport EnhancedCard from \"../ui/EnhancedCard\";\r\nimport StatusIndicator from \"../ui/StatusIndicator\";\r\n\r\ninterface PortfolioHeatmapProps {\r\n  userId: string;\r\n  className?: string;\r\n  symbols?: string[];\r\n  showVolume?: boolean;\r\n  showPerformance?: boolean;\r\n}\r\n\r\ninterface HeatmapData {\r\n  symbol: string;\r\n  value: number;\r\n  change: number;\r\n  changePercent: number;\r\n  volume: number;\r\n  marketCap: number;\r\n  sector: string;\r\n}\r\n\r\nconst PortfolioHeatmap: React.FC<PortfolioHeatmapProps> = ({\r\n  userId,\r\n  className,\r\n  symbols = [\"AAPL\", \"MSFT\", \"GOOGL\", \"TSLA\", \"NVDA\", \"AMZN\", \"META\", \"NFLX\"],\r\n  showVolume = true,\r\n  showPerformance = true,\r\n}) => {\r\n  const svgRef = useRef<SVGSVGElement>(null);\r\n  const [heatmapData, setHeatmapData] = useState<HeatmapData[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedMetric, setSelectedMetric] = useState<\"change\" | \"volume\" | \"marketCap\">(\"change\");\r\n\r\n  const { isConnected, marketData } = useWebSocket({\r\n    url: process.env.NEXT_PUBLIC_WS_URL || \"ws://localhost:8000/ws\",\r\n    userId,\r\n    autoConnect: true,\r\n  });\r\n\r\n  // Generate mock heatmap data\r\n  useEffect(() => {\r\n    const generateMockData = (): HeatmapData[] => {\r\n      const sectors = [\"Technology\", \"Healthcare\", \"Finance\", \"Energy\", \"Consumer\", \"Industrial\"];\r\n\r\n      return symbols.map((symbol) => {\r\n        const change = (Math.random() - 0.5) * 20; // -10% to +10%\r\n        const baseValue = 100 + Math.random() * 200; // $100 to $300\r\n        const volume = Math.floor(Math.random() * 10000000) + 1000000;\r\n        const marketCap = Math.floor(Math.random() * 1000000000000) + 100000000000;\r\n\r\n        return {\r\n          symbol,\r\n          value: Number(baseValue.toFixed(2)),\r\n          change: Number(change.toFixed(2)),\r\n          changePercent: Number(((change / baseValue) * 100).toFixed(2)),\r\n          volume,\r\n          marketCap,\r\n          sector: sectors[Math.floor(Math.random() * sectors.length)],\r\n        };\r\n      });\r\n    };\r\n\r\n    setHeatmapData(generateMockData());\r\n  }, [symbols]);\r\n\r\n  // Render heatmap\r\n  useEffect(() => {\r\n    if (!svgRef.current || heatmapData.length === 0) return;\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const margin = { top: 20, right: 20, bottom: 40, left: 100 };\r\n    const width = 800 - margin.left - margin.right;\r\n    const height = 400 - margin.top - margin.bottom;\r\n\r\n    const g = svg\r\n      .attr(\"width\", 800)\r\n      .attr(\"height\", 400)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n    // Calculate grid dimensions\r\n    const cols = Math.ceil(Math.sqrt(heatmapData.length));\r\n    const rows = Math.ceil(heatmapData.length / cols);\r\n    const cellWidth = width / cols;\r\n    const cellHeight = height / rows;\r\n\r\n    // Color scale based on selected metric\r\n    let colorScale: d3.ScaleLinear<string, string>;\r\n\r\n    if (selectedMetric === \"change\") {\r\n      const extent = d3.extent(heatmapData, (d) => d.changePercent) as [number, number];\r\n      colorScale = d3\r\n        .scaleLinear<string, string>()\r\n        .domain([extent[0], 0, extent[1]])\r\n        .range([\"#dc2626\", \"#6b7280\", \"#16a34a\"]);\r\n    } else if (selectedMetric === \"volume\") {\r\n      const extent = d3.extent(heatmapData, (d) => d.volume) as [number, number];\r\n      colorScale = d3.scaleLinear<string, string>().domain(extent).range([\"#1e293b\", \"#3b82f6\"]);\r\n    } else {\r\n      const extent = d3.extent(heatmapData, (d) => d.marketCap) as [number, number];\r\n      colorScale = d3.scaleLinear<string, string>().domain(extent).range([\"#1e293b\", \"#8b5cf6\"]);\r\n    }\r\n\r\n    // Create heatmap cells\r\n    const cells = g\r\n      .selectAll(\".heatmap-cell\")\r\n      .data(heatmapData)\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"heatmap-cell\")\r\n      .attr(\"transform\", (d, i) => {\r\n        const row = Math.floor(i / cols);\r\n        const col = i % cols;\r\n        return `translate(${col * cellWidth},${row * cellHeight})`;\r\n      });\r\n\r\n    // Cell rectangles\r\n    cells\r\n      .append(\"rect\")\r\n      .attr(\"width\", cellWidth - 2)\r\n      .attr(\"height\", cellHeight - 2)\r\n      .attr(\"rx\", 4)\r\n      .attr(\"fill\", (d) => {\r\n        if (selectedMetric === \"change\") return colorScale(d.changePercent);\r\n        if (selectedMetric === \"volume\") return colorScale(d.volume);\r\n        return colorScale(d.marketCap);\r\n      })\r\n      .attr(\"stroke\", \"#374151\")\r\n      .attr(\"stroke-width\", 1)\r\n      .style(\"cursor\", \"pointer\")\r\n      .on(\"mouseover\", function (event, d) {\r\n        // Highlight on hover\r\n        d3.select(this).attr(\"stroke\", \"#60a5fa\").attr(\"stroke-width\", 2);\r\n      })\r\n      .on(\"mouseout\", function (event, d) {\r\n        // Remove highlight\r\n        d3.select(this).attr(\"stroke\", \"#374151\").attr(\"stroke-width\", 1);\r\n      });\r\n\r\n    // Symbol labels\r\n    cells\r\n      .append(\"text\")\r\n      .attr(\"x\", cellWidth / 2)\r\n      .attr(\"y\", cellHeight / 2 - 8)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"font-weight\", \"bold\")\r\n      .attr(\"fill\", \"white\")\r\n      .text((d) => d.symbol);\r\n\r\n    // Value labels\r\n    cells\r\n      .append(\"text\")\r\n      .attr(\"x\", cellWidth / 2)\r\n      .attr(\"y\", cellHeight / 2 + 8)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"font-size\", \"10px\")\r\n      .attr(\"fill\", \"white\")\r\n      .text((d) => {\r\n        if (selectedMetric === \"change\")\r\n          return `${d.changePercent >= 0 ? \"+\" : \"\"}${d.changePercent.toFixed(1)}%`;\r\n        if (selectedMetric === \"volume\") return `${(d.volume / 1000000).toFixed(1)}M`;\r\n        return `$${(d.marketCap / 1000000000).toFixed(1)}B`;\r\n      });\r\n\r\n    // Legend\r\n    const legend = g\r\n      .append(\"g\")\r\n      .attr(\"class\", \"legend\")\r\n      .attr(\"transform\", `translate(${width - 150}, 20)`);\r\n\r\n    legend\r\n      .append(\"text\")\r\n      .attr(\"x\", 0)\r\n      .attr(\"y\", 0)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"font-weight\", \"bold\")\r\n      .attr(\"fill\", \"white\")\r\n      .text(\r\n        `Showing: ${selectedMetric === \"change\" ? \"Performance\" : selectedMetric === \"volume\" ? \"Volume\" : \"Market Cap\"}`\r\n      );\r\n  }, [heatmapData, selectedMetric]);\r\n\r\n  const getPerformanceColor = (change: number) => {\r\n    if (change > 5) return \"text-green-400\";\r\n    if (change > 0) return \"text-green-300\";\r\n    if (change > -5) return \"text-yellow-400\";\r\n    return \"text-red-400\";\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center text-red-400\">\r\n          <StatusIndicator status=\"error\" size=\"sm\" />\r\n          <p className=\"mt-2\">Heatmap Error: {error}</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <EnhancedCard variant=\"default\" className={className}>\r\n        <div className=\"text-center\">\r\n          <StatusIndicator status=\"loading\" size=\"sm\" />\r\n          <p className=\"mt-2 text-slate-400\">Loading heatmap data...</p>\r\n        </div>\r\n      </EnhancedCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`space-y-4 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <h3 className=\"text-white font-bold text-xl\">Portfolio Heatmap</h3>\r\n          <StatusIndicator status={isConnected ? \"online\" : \"offline\"} size=\"sm\" />\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          <select\r\n            value={selectedMetric}\r\n            onChange={(e) => setSelectedMetric(e.target.value as \"change\" | \"volume\" | \"marketCap\")}\r\n            className=\"bg-slate-700 text-white border border-slate-600 rounded-lg px-3 py-1 text-sm\"\r\n          >\r\n            <option value=\"change\">Performance</option>\r\n            <option value=\"volume\">Volume</option>\r\n            <option value=\"marketCap\">Market Cap</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Summary Stats */}\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n        <EnhancedCard variant=\"glass\" size=\"sm\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-slate-400 text-sm\">Total Value</div>\r\n            <AnimatedCounter\r\n              value={heatmapData.reduce((sum, d) => sum + d.value, 0)}\r\n              prefix=\"$\"\r\n              decimals={0}\r\n              color=\"neutral\"\r\n              className=\"text-lg font-semibold\"\r\n            />\r\n          </div>\r\n        </EnhancedCard>\r\n\r\n        <EnhancedCard variant=\"glass\" size=\"sm\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-slate-400 text-sm\">Best Performer</div>\r\n            <div className=\"text-green-400 font-semibold\">\r\n              {\r\n                heatmapData.reduce((best, current) =>\r\n                  current.changePercent > best.changePercent ? current : best\r\n                ).symbol\r\n              }\r\n            </div>\r\n          </div>\r\n        </EnhancedCard>\r\n\r\n        <EnhancedCard variant=\"glass\" size=\"sm\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-slate-400 text-sm\">Worst Performer</div>\r\n            <div className=\"text-red-400 font-semibold\">\r\n              {\r\n                heatmapData.reduce((worst, current) =>\r\n                  current.changePercent < worst.changePercent ? current : worst\r\n                ).symbol\r\n              }\r\n            </div>\r\n          </div>\r\n        </EnhancedCard>\r\n\r\n        <EnhancedCard variant=\"glass\" size=\"sm\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-slate-400 text-sm\">Avg Change</div>\r\n            <AnimatedCounter\r\n              value={heatmapData.reduce((sum, d) => sum + d.changePercent, 0) / heatmapData.length}\r\n              prefix=\"\"\r\n              suffix=\"%\"\r\n              decimals={2}\r\n              color={\r\n                heatmapData.reduce((sum, d) => sum + d.changePercent, 0) / heatmapData.length >= 0\r\n                  ? \"positive\"\r\n                  : \"negative\"\r\n              }\r\n              className=\"text-lg font-semibold\"\r\n            />\r\n          </div>\r\n        </EnhancedCard>\r\n      </div>\r\n\r\n      {/* Heatmap Chart */}\r\n      <EnhancedCard variant=\"glass\" size=\"lg\">\r\n        <div className=\"w-full h-full\">\r\n          <svg ref={svgRef} className=\"w-full h-full\" style={{ minHeight: \"400px\" }} />\r\n        </div>\r\n      </EnhancedCard>\r\n\r\n      {/* Detailed List */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        {heatmapData.map((item, index) => (\r\n          <EnhancedCard\r\n            key={index}\r\n            variant=\"glass\"\r\n            size=\"sm\"\r\n            className=\"hover:scale-105 transition-transform\"\r\n          >\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"font-mono font-bold text-white\">{item.symbol}</span>\r\n                <span className=\"text-slate-400 text-sm\">{item.sector}</span>\r\n              </div>\r\n\r\n              <div className=\"space-y-1\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-slate-400 text-sm\">Price</span>\r\n                  <span className=\"text-white font-semibold\">${item.value.toFixed(2)}</span>\r\n                </div>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-slate-400 text-sm\">Change</span>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <AnimatedCounter\r\n                      value={item.change}\r\n                      prefix={item.change >= 0 ? \"+\" : \"\"}\r\n                      decimals={2}\r\n                      color={item.change >= 0 ? \"positive\" : \"negative\"}\r\n                      className=\"text-sm font-semibold\"\r\n                    />\r\n                    <span\r\n                      className={`text-sm font-semibold ${getPerformanceColor(item.changePercent)}`}\r\n                    >\r\n                      {item.changePercent >= 0 ? \"+\" : \"\"}\r\n                      {item.changePercent.toFixed(2)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                {showVolume && (\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-slate-400 text-sm\">Volume</span>\r\n                    <span className=\"text-white text-sm\">\r\n                      {(item.volume / 1000000).toFixed(1)}M\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </EnhancedCard>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PortfolioHeatmap;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ml\\MLIntelligenceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[806,809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[806,809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMLInsights'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadMLInsights, selectedSymbol]","fix":{"range":[1796,1812],"text":"[loadMLInsights, selectedSymbol]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3048,3051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3048,3051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ML Intelligence Dashboard\n * \n * Enterprise-grade ML features made accessible for friends and family:\n * - Pattern recognition with visual explanations\n * - Market regime detection with strategy recommendations\n * - Personal analytics and insights\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Brain, \n  TrendingUp, \n  Target, \n  BarChart3, \n  Zap, \n  Shield,\n  Info,\n  RefreshCw,\n  CheckCircle,\n  AlertTriangle,\n  Loader2\n} from 'lucide-react';\nimport { useToast } from '../ui/Toast';\nimport { HelpTooltip } from '../HelpTooltip';\n\ninterface MLInsight {\n  id: string;\n  type: 'pattern' | 'regime' | 'strategy' | 'risk';\n  title: string;\n  description: string;\n  confidence: number;\n  actionable: boolean;\n  impact: 'high' | 'medium' | 'low';\n  timestamp: string;\n  details?: any;\n}\n\ninterface MarketRegime {\n  regime: string;\n  confidence: number;\n  description: string;\n  recommended_strategies: string[];\n  features: {\n    trend_direction: number;\n    trend_strength: number;\n    volatility: number;\n    rsi: number;\n  };\n}\n\ninterface Pattern {\n  pattern_type: string;\n  signal: string;\n  confidence: number;\n  description: string;\n  target_price?: number;\n  stop_loss?: number;\n  key_levels: Record<string, number>;\n}\n\nexport const MLIntelligenceDashboard: React.FC = () => {\n  const [insights, setInsights] = useState<MLInsight[]>([]);\n  const [marketRegime, setMarketRegime] = useState<MarketRegime | null>(null);\n  const [patterns, setPatterns] = useState<Pattern[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [selectedSymbol, setSelectedSymbol] = useState('SPY');\n  const { toast } = useToast();\n\n  // Load ML insights on component mount\n  useEffect(() => {\n    loadMLInsights();\n  }, [selectedSymbol]);\n\n  const loadMLInsights = async () => {\n    setLoading(true);\n    try {\n      // Load market regime\n      const regimeResponse = await fetch(\n        `${process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL}/api/ml/market-regime?symbol=${selectedSymbol}&lookback_days=90`\n      );\n      const regimeData = await regimeResponse.json();\n      \n      if (regimeData.regime) {\n        setMarketRegime(regimeData);\n      }\n\n      // Load patterns\n      const patternsResponse = await fetch(\n        `${process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL}/api/ml/detect-patterns?symbol=${selectedSymbol}&lookback_days=90&min_confidence=0.6`\n      );\n      const patternsData = await patternsResponse.json();\n      \n      if (patternsData.patterns) {\n        setPatterns(patternsData.patterns);\n      }\n\n      // Generate insights from the data\n      generateInsights(regimeData, patternsData.patterns || []);\n\n    } catch (error) {\n      console.error('Failed to load ML insights:', error);\n      toast({\n        title: 'ML Analysis Failed',\n        description: 'Unable to load market intelligence. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateInsights = (regimeData: any, patterns: Pattern[]) => {\n    const newInsights: MLInsight[] = [];\n\n    // Market regime insight\n    if (regimeData.regime) {\n      newInsights.push({\n        id: 'market-regime',\n        type: 'regime',\n        title: `Market is ${regimeData.regime.replace('_', ' ')}`,\n        description: getRegimeDescription(regimeData.regime, regimeData.confidence),\n        confidence: regimeData.confidence,\n        actionable: true,\n        impact: regimeData.confidence > 0.8 ? 'high' : 'medium',\n        timestamp: new Date().toISOString(),\n        details: regimeData,\n      });\n    }\n\n    // Pattern insights\n    patterns.forEach((pattern, index) => {\n      newInsights.push({\n        id: `pattern-${index}`,\n        type: 'pattern',\n        title: `${pattern.pattern_type.replace('_', ' ')} detected`,\n        description: pattern.description,\n        confidence: pattern.confidence,\n        actionable: true,\n        impact: pattern.confidence > 0.8 ? 'high' : 'medium',\n        timestamp: new Date().toISOString(),\n        details: pattern,\n      });\n    });\n\n    // Strategy recommendations\n    if (regimeData.recommended_strategies?.length > 0) {\n      newInsights.push({\n        id: 'strategy-recommendation',\n        type: 'strategy',\n        title: 'Strategy Recommendations',\n        description: `Consider these strategies: ${regimeData.recommended_strategies.join(', ')}`,\n        confidence: regimeData.confidence,\n        actionable: true,\n        impact: 'high',\n        timestamp: new Date().toISOString(),\n        details: regimeData.recommended_strategies,\n      });\n    }\n\n    setInsights(newInsights);\n  };\n\n  const getRegimeDescription = (regime: string, confidence: number) => {\n    const descriptions = {\n      'trending_bullish': 'Market is in a strong upward trend with positive momentum.',\n      'trending_bearish': 'Market is in a downward trend with negative momentum.',\n      'ranging': 'Market is moving sideways with no clear direction.',\n      'high_volatility': 'Market is experiencing high volatility with large price swings.',\n    };\n    \n    const baseDescription = descriptions[regime as keyof typeof descriptions] || 'Market state is unclear.';\n    const confidenceText = confidence > 0.8 ? 'High confidence' : confidence > 0.6 ? 'Moderate confidence' : 'Low confidence';\n    \n    return `${baseDescription} (${confidenceText}: ${Math.round(confidence * 100)}%)`;\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await loadMLInsights();\n    setRefreshing(false);\n    toast({\n      title: 'ML Analysis Updated',\n      description: 'Market intelligence has been refreshed with latest data.',\n    });\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'pattern': return <Target className=\"w-5 h-5\" />;\n      case 'regime': return <TrendingUp className=\"w-5 h-5\" />;\n      case 'strategy': return <Zap className=\"w-5 h-5\" />;\n      case 'risk': return <Shield className=\"w-5 h-5\" />;\n      default: return <Brain className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getInsightColor = (impact: string) => {\n    switch (impact) {\n      case 'high': return 'text-red-600 bg-red-50 border-red-200';\n      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'low': return 'text-green-600 bg-green-50 border-green-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Analyzing market intelligence...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Brain className=\"w-8 h-8 text-blue-600\" />\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">ML Intelligence</h2>\n            <p className=\"text-gray-600\">AI-powered market analysis for smarter decisions</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <select\n            value={selectedSymbol}\n            onChange={(e) => setSelectedSymbol(e.target.value)}\n            className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            aria-label=\"Select symbol for analysis\"\n          >\n            <option value=\"SPY\">SPY (S&P 500)</option>\n            <option value=\"QQQ\">QQQ (NASDAQ)</option>\n            <option value=\"IWM\">IWM (Russell 2000)</option>\n            <option value=\"AAPL\">AAPL (Apple)</option>\n            <option value=\"MSFT\">MSFT (Microsoft)</option>\n          </select>\n          \n          <button\n            onClick={handleRefresh}\n            disabled={refreshing}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors\"\n          >\n            <RefreshCw className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} />\n            <span>Refresh</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Market Regime Card */}\n      {marketRegime && (\n        <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Market Regime</h3>\n                <p className=\"text-gray-600\">{marketRegime.regime.replace('_', ' ').toUpperCase()}</p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {Math.round(marketRegime.confidence * 100)}%\n              </div>\n              <div className=\"text-sm text-gray-500\">Confidence</div>\n            </div>\n          </div>\n          \n          <p className=\"mt-3 text-gray-700\">{getRegimeDescription(marketRegime.regime, marketRegime.confidence)}</p>\n          \n          {marketRegime.recommended_strategies?.length > 0 && (\n            <div className=\"mt-4\">\n              <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Recommended Strategies:</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {marketRegime.recommended_strategies.map((strategy, index) => (\n                  <span\n                    key={index}\n                    className=\"px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full\"\n                  >\n                    {strategy.replace('_', ' ')}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Insights Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {insights.map((insight) => (\n          <div\n            key={insight.id}\n            className={`border rounded-xl p-4 ${getInsightColor(insight.impact)}`}\n          >\n            <div className=\"flex items-start justify-between mb-3\">\n              <div className=\"flex items-center space-x-2\">\n                {getInsightIcon(insight.type)}\n                <span className=\"font-medium text-sm\">{insight.title}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                <span className=\"text-xs text-gray-500\">\n                  {Math.round(insight.confidence * 100)}%\n                </span>\n              </div>\n            </div>\n            \n            <p className=\"text-sm text-gray-700 mb-3\">{insight.description}</p>\n            \n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-xs text-gray-500\">\n                {new Date(insight.timestamp).toLocaleTimeString()}\n              </span>\n              {insight.actionable && (\n                <button className=\"text-xs text-blue-600 hover:text-blue-800 font-medium\">\n                  View Details ΓåÆ\n                </button>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Patterns Section */}\n      {patterns.length > 0 && (\n        <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <Target className=\"w-5 h-5 text-purple-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">Detected Patterns</h3>\n            <HelpTooltip content=\"Technical analysis patterns detected in recent price action. These can signal potential trading opportunities.\" />\n          </div>\n          \n          <div className=\"space-y-3\">\n            {patterns.map((pattern, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-3 h-3 rounded-full ${\n                    pattern.signal === 'bullish' ? 'bg-green-500' : \n                    pattern.signal === 'bearish' ? 'bg-red-500' : 'bg-gray-500'\n                  }`} />\n                  <div>\n                    <div className=\"font-medium text-gray-900\">\n                      {pattern.pattern_type.replace('_', ' ').toUpperCase()}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">{pattern.description}</div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-sm font-medium text-gray-900\">\n                    {Math.round(pattern.confidence * 100)}% confidence\n                  </div>\n                  <div className=\"text-xs text-gray-500\">{pattern.signal}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Empty State */}\n      {insights.length === 0 && !loading && (\n        <div className=\"text-center py-12\">\n          <Brain className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Insights Available</h3>\n          <p className=\"text-gray-600 mb-4\">\n            ML analysis is still processing. Try refreshing or check back in a few minutes.\n          </p>\n          <button\n            onClick={handleRefresh}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            Refresh Analysis\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ml\\MarketRegimeDetector.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMarketRegime'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadMarketRegime, symbol]","fix":{"range":[1735,1743],"text":"[loadMarketRegime, symbol]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ml\\PatternRecognition.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HelpTooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPatterns'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadPatterns, symbol]","fix":{"range":[1276,1284],"text":"[loadPatterns, symbol]"}}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Pattern Recognition Component\r\n * \r\n * Visual pattern recognition with explanations for friends and family.\r\n * Makes complex technical analysis accessible and understandable.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { \r\n  Target, \r\n  TrendingUp, \r\n  TrendingDown, \r\n  Minus,\r\n  Info,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  XCircle,\r\n  BarChart3,\r\n  Zap\r\n} from 'lucide-react';\r\nimport { HelpTooltip } from '../HelpTooltip';\r\n\r\ninterface Pattern {\r\n  pattern_type: string;\r\n  signal: 'bullish' | 'bearish' | 'neutral';\r\n  confidence: number;\r\n  description: string;\r\n  target_price?: number;\r\n  stop_loss?: number;\r\n  key_levels: Record<string, number>;\r\n  start_date: string;\r\n  end_date: string;\r\n}\r\n\r\ninterface PatternRecognitionProps {\r\n  symbol?: string;\r\n  onPatternSelect?: (pattern: Pattern) => void;\r\n}\r\n\r\nexport const PatternRecognition: React.FC<PatternRecognitionProps> = ({ \r\n  symbol = 'SPY',\r\n  onPatternSelect \r\n}) => {\r\n  const [patterns, setPatterns] = useState<Pattern[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedPattern, setSelectedPattern] = useState<Pattern | null>(null);\r\n  const [showExplanations, setShowExplanations] = useState(true);\r\n\r\n  useEffect(() => {\r\n    loadPatterns();\r\n  }, [symbol]);\r\n\r\n  const loadPatterns = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL}/api/ml/detect-patterns?symbol=${symbol}&lookback_days=90&min_confidence=0.6`\r\n      );\r\n      const data = await response.json();\r\n      setPatterns(data.patterns || []);\r\n    } catch (error) {\r\n      console.error('Failed to load patterns:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getPatternIcon = (patternType: string) => {\r\n    switch (patternType) {\r\n      case 'double_top':\r\n      case 'head_shoulders':\r\n        return <TrendingDown className=\"w-5 h-5 text-red-500\" />;\r\n      case 'double_bottom':\r\n      case 'inverse_head_shoulders':\r\n        return <TrendingUp className=\"w-5 h-5 text-green-500\" />;\r\n      case 'ascending_triangle':\r\n        return <TrendingUp className=\"w-5 h-5 text-blue-500\" />;\r\n      case 'descending_triangle':\r\n        return <TrendingDown className=\"w-5 h-5 text-orange-500\" />;\r\n      case 'symmetric_triangle':\r\n        return <Minus className=\"w-5 h-5 text-gray-500\" />;\r\n      default:\r\n        return <Target className=\"w-5 h-5 text-purple-500\" />;\r\n    }\r\n  };\r\n\r\n  const getPatternExplanation = (pattern: Pattern) => {\r\n    const explanations = {\r\n      'double_top': {\r\n        title: 'Double Top Pattern',\r\n        description: 'This is a bearish reversal pattern that forms when the price reaches a similar high twice, creating a \"M\" shape. It suggests the uptrend may be ending.',\r\n        what_it_means: 'The market tried to break higher twice but failed both times, indicating selling pressure is building.',\r\n        what_to_watch: 'Watch for a break below the \"neckline\" (the low between the two peaks) to confirm the pattern.',\r\n        confidence_tip: 'Higher confidence when the two peaks are similar in height and the pattern forms over several weeks.'\r\n      },\r\n      'double_bottom': {\r\n        title: 'Double Bottom Pattern',\r\n        description: 'This is a bullish reversal pattern that forms when the price reaches a similar low twice, creating a \"W\" shape. It suggests the downtrend may be ending.',\r\n        what_it_means: 'The market tried to break lower twice but failed both times, indicating buying pressure is building.',\r\n        what_to_watch: 'Watch for a break above the \"neckline\" (the high between the two bottoms) to confirm the pattern.',\r\n        confidence_tip: 'Higher confidence when the two bottoms are similar in depth and the pattern forms over several weeks.'\r\n      },\r\n      'head_shoulders': {\r\n        title: 'Head and Shoulders Pattern',\r\n        description: 'This is a major bearish reversal pattern with three peaks: a higher middle peak (head) and two lower peaks (shoulders). It\\'s one of the most reliable reversal patterns.',\r\n        what_it_means: 'The market made one final push higher (head) but couldn\\'t sustain it, suggesting exhaustion of the uptrend.',\r\n        what_to_watch: 'Watch for a break below the \"neckline\" (the line connecting the two shoulder lows) to confirm the reversal.',\r\n        confidence_tip: 'Most reliable when the head is significantly higher than the shoulders and volume decreases on the right shoulder.'\r\n      },\r\n      'ascending_triangle': {\r\n        title: 'Ascending Triangle Pattern',\r\n        description: 'This is a bullish continuation pattern with a flat top (resistance) and rising bottom (support). It suggests accumulation before a breakout.',\r\n        what_it_means: 'Buyers are getting more aggressive (higher lows) while sellers are holding the same price level.',\r\n        what_to_watch: 'Watch for a breakout above the resistance line with increased volume.',\r\n        confidence_tip: 'More reliable when the triangle forms over several weeks and volume increases on the breakout.'\r\n      },\r\n      'descending_triangle': {\r\n        title: 'Descending Triangle Pattern',\r\n        description: 'This is a bearish continuation pattern with a flat bottom (support) and falling top (resistance). It suggests distribution before a breakdown.',\r\n        what_it_means: 'Sellers are getting more aggressive (lower highs) while buyers are holding the same price level.',\r\n        what_to_watch: 'Watch for a breakdown below the support line with increased volume.',\r\n        confidence_tip: 'More reliable when the triangle forms over several weeks and volume increases on the breakdown.'\r\n      },\r\n      'symmetric_triangle': {\r\n        title: 'Symmetric Triangle Pattern',\r\n        description: 'This is a neutral pattern with both rising support and falling resistance lines converging. It suggests indecision before a directional move.',\r\n        what_it_means: 'Neither buyers nor sellers are in control, creating a balance that will eventually break one way.',\r\n        what_to_watch: 'Watch for a breakout in either direction with increased volume to determine the next move.',\r\n        confidence_tip: 'The direction of the breakout often follows the previous trend before the triangle formed.'\r\n      }\r\n    };\r\n\r\n    return explanations[pattern.pattern_type as keyof typeof explanations] || {\r\n      title: 'Unknown Pattern',\r\n      description: 'This pattern type is not yet explained.',\r\n      what_it_means: 'Pattern analysis is still being processed.',\r\n      what_to_watch: 'Monitor the pattern for confirmation signals.',\r\n      confidence_tip: 'Higher confidence patterns are more reliable for trading decisions.'\r\n    };\r\n  };\r\n\r\n  const getSignalColor = (signal: string) => {\r\n    switch (signal) {\r\n      case 'bullish': return 'text-green-600 bg-green-50 border-green-200';\r\n      case 'bearish': return 'text-red-600 bg-red-50 border-red-200';\r\n      case 'neutral': return 'text-gray-600 bg-gray-50 border-gray-200';\r\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getConfidenceColor = (confidence: number) => {\r\n    if (confidence >= 0.8) return 'text-green-600';\r\n    if (confidence >= 0.6) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  };\r\n\r\n  const handlePatternClick = (pattern: Pattern) => {\r\n    setSelectedPattern(pattern);\r\n    onPatternSelect?.(pattern);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n        <span className=\"ml-3 text-gray-600\">Analyzing patterns...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <Target className=\"w-6 h-6 text-purple-600\" />\r\n          <div>\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">Pattern Recognition</h3>\r\n            <p className=\"text-sm text-gray-600\">AI-detected chart patterns with explanations</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-2\">\r\n          <button\r\n            onClick={() => setShowExplanations(!showExplanations)}\r\n            className={`flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n              showExplanations \r\n                ? 'bg-blue-100 text-blue-700' \r\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n            }`}\r\n          >\r\n            <Info className=\"w-4 h-4\" />\r\n            <span>{showExplanations ? 'Hide' : 'Show'} Explanations</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Patterns List */}\r\n      {patterns.length > 0 ? (\r\n        <div className=\"space-y-4\">\r\n          {patterns.map((pattern, index) => (\r\n            <div\r\n              key={index}\r\n              className={`border rounded-xl p-4 cursor-pointer transition-all hover:shadow-md ${getSignalColor(pattern.signal)}`}\r\n              onClick={() => handlePatternClick(pattern)}\r\n            >\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  {getPatternIcon(pattern.pattern_type)}\r\n                  <div>\r\n                    <h4 className=\"font-semibold text-gray-900\">\r\n                      {pattern.pattern_type.replace('_', ' ').toUpperCase()}\r\n                    </h4>\r\n                    <p className=\"text-sm text-gray-600\">{pattern.description}</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"text-right\">\r\n                  <div className={`font-semibold ${getConfidenceColor(pattern.confidence)}`}>\r\n                    {Math.round(pattern.confidence * 100)}%\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-500\">confidence</div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Pattern Details */}\r\n              <div className=\"mt-3 grid grid-cols-2 gap-4 text-sm\">\r\n                <div>\r\n                  <span className=\"text-gray-500\">Signal:</span>\r\n                  <span className={`ml-2 font-medium ${\r\n                    pattern.signal === 'bullish' ? 'text-green-600' :\r\n                    pattern.signal === 'bearish' ? 'text-red-600' : 'text-gray-600'\r\n                  }`}>\r\n                    {pattern.signal.toUpperCase()}\r\n                  </span>\r\n                </div>\r\n                {pattern.target_price && (\r\n                  <div>\r\n                    <span className=\"text-gray-500\">Target:</span>\r\n                    <span className=\"ml-2 font-medium\">${pattern.target_price.toFixed(2)}</span>\r\n                  </div>\r\n                )}\r\n                {pattern.stop_loss && (\r\n                  <div>\r\n                    <span className=\"text-gray-500\">Stop Loss:</span>\r\n                    <span className=\"ml-2 font-medium\">${pattern.stop_loss.toFixed(2)}</span>\r\n                  </div>\r\n                )}\r\n                <div>\r\n                  <span className=\"text-gray-500\">Duration:</span>\r\n                  <span className=\"ml-2 font-medium\">\r\n                    {Math.ceil((new Date(pattern.end_date).getTime() - new Date(pattern.start_date).getTime()) / (1000 * 60 * 60 * 24))} days\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Explanations */}\r\n              {showExplanations && (\r\n                <div className=\"mt-4 p-3 bg-white bg-opacity-50 rounded-lg\">\r\n                  {(() => {\r\n                    const explanation = getPatternExplanation(pattern);\r\n                    return (\r\n                      <div className=\"space-y-2\">\r\n                        <h5 className=\"font-medium text-gray-900\">{explanation.title}</h5>\r\n                        <p className=\"text-sm text-gray-700\">{explanation.description}</p>\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-3\">\r\n                          <div>\r\n                            <div className=\"text-xs font-medium text-gray-500 mb-1\">What it means:</div>\r\n                            <div className=\"text-xs text-gray-700\">{explanation.what_it_means}</div>\r\n                          </div>\r\n                          <div>\r\n                            <div className=\"text-xs font-medium text-gray-500 mb-1\">What to watch:</div>\r\n                            <div className=\"text-xs text-gray-700\">{explanation.what_to_watch}</div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"mt-2 p-2 bg-blue-50 rounded text-xs text-blue-800\">\r\n                          <strong>≡ƒÆí Tip:</strong> {explanation.confidence_tip}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })()}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-center py-12\">\r\n          <Target className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Patterns Detected</h3>\r\n          <p className=\"text-gray-600 mb-4\">\r\n            No significant chart patterns found in the recent price action for {symbol}.\r\n          </p>\r\n          <div className=\"text-sm text-gray-500\">\r\n            Patterns typically form over several weeks. Try checking back later or analyze a different time period.\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Selected Pattern Details */}\r\n      {selectedPattern && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-white rounded-xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <h3 className=\"text-xl font-semibold text-gray-900\">Pattern Details</h3>\r\n              <button\r\n                onClick={() => setSelectedPattern(null)}\r\n                className=\"text-gray-400 hover:text-gray-600\"\r\n                aria-label=\"Close pattern details\"\r\n              >\r\n                <XCircle className=\"w-6 h-6\" />\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                {getPatternIcon(selectedPattern.pattern_type)}\r\n                <div>\r\n                  <h4 className=\"text-lg font-semibold text-gray-900\">\r\n                    {selectedPattern.pattern_type.replace('_', ' ').toUpperCase()}\r\n                  </h4>\r\n                  <p className=\"text-gray-600\">{selectedPattern.description}</p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <div className=\"text-sm font-medium text-gray-500\">Signal</div>\r\n                  <div className={`font-semibold ${\r\n                    selectedPattern.signal === 'bullish' ? 'text-green-600' :\r\n                    selectedPattern.signal === 'bearish' ? 'text-red-600' : 'text-gray-600'\r\n                  }`}>\r\n                    {selectedPattern.signal.toUpperCase()}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"text-sm font-medium text-gray-500\">Confidence</div>\r\n                  <div className={`font-semibold ${getConfidenceColor(selectedPattern.confidence)}`}>\r\n                    {Math.round(selectedPattern.confidence * 100)}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {Object.keys(selectedPattern.key_levels).length > 0 && (\r\n                <div>\r\n                  <div className=\"text-sm font-medium text-gray-500 mb-2\">Key Levels</div>\r\n                  <div className=\"grid grid-cols-2 gap-2\">\r\n                    {Object.entries(selectedPattern.key_levels).map(([key, value]) => (\r\n                      <div key={key} className=\"flex justify-between text-sm\">\r\n                        <span className=\"text-gray-600\">{key.replace('_', ' ')}:</span>\r\n                        <span className=\"font-medium\">${value.toFixed(2)}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"pt-4 border-t\">\r\n                <h5 className=\"font-medium text-gray-900 mb-2\">Trading Considerations</h5>\r\n                <div className=\"space-y-2 text-sm text-gray-700\">\r\n                  {selectedPattern.target_price && (\r\n                    <div>≡ƒÄ» <strong>Target Price:</strong> ${selectedPattern.target_price.toFixed(2)}</div>\r\n                  )}\r\n                  {selectedPattern.stop_loss && (\r\n                    <div>≡ƒ¢í∩╕Å <strong>Stop Loss:</strong> ${selectedPattern.stop_loss.toFixed(2)}</div>\r\n                  )}\r\n                  <div>≡ƒôè <strong>Risk/Reward:</strong> {\r\n                    selectedPattern.target_price && selectedPattern.stop_loss \r\n                      ? ((selectedPattern.target_price - selectedPattern.stop_loss) / selectedPattern.stop_loss * 100).toFixed(1) + '%'\r\n                      : 'Calculate based on your entry'\r\n                  }</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ml\\PersonalAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\OptionsChain.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchExpirations'. Either include it or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchExpirations, symbol]","fix":{"range":[1828,1836],"text":"[fetchExpirations, symbol]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchOptionsChain'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [symbol, selectedExpiration, fetchOptionsChain]","fix":{"range":[2048,2076],"text":"[symbol, selectedExpiration, fetchOptionsChain]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\PLComparisonChart.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'chartRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'chartRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":67,"column":30,"nodeType":"Identifier","endLine":67,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\PLSummaryDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\PositionManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\ProposalReview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\ResearchDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\RiskCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\StrategyBuilder.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[662,665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[662,665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\StrategySuggestionsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\AnimatedCounter.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'displayValue'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [value, duration, displayValue]","fix":{"range":[1362,1379],"text":"[value, duration, displayValue]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\EnhancedCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\LoadingState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\StatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Toast.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleRemove'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [handleRemove, toast.duration]","fix":{"range":[1893,1909],"text":"[handleRemove, toast.duration]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Toast Notification System\r\n * Enterprise-grade toast notifications with animations\r\n */\r\n\r\nimport { AlertTriangle, CheckCircle, Info, X, XCircle } from \"lucide-react\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport type ToastType = \"success\" | \"error\" | \"warning\" | \"info\";\r\n\r\ninterface Toast {\r\n  id: string;\r\n  type: ToastType;\r\n  title: string;\r\n  message?: string;\r\n  duration?: number;\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n  };\r\n}\r\n\r\ninterface ToastProps {\r\n  toast: Toast;\r\n  onRemove: (id: string) => void;\r\n}\r\n\r\nconst toastIcons = {\r\n  success: CheckCircle,\r\n  error: XCircle,\r\n  warning: AlertTriangle,\r\n  info: Info,\r\n};\r\n\r\nconst toastColors = {\r\n  success: {\r\n    bg: \"bg-green-50\",\r\n    border: \"border-green-200\",\r\n    icon: \"text-green-500\",\r\n    title: \"text-green-800\",\r\n    message: \"text-green-700\",\r\n  },\r\n  error: {\r\n    bg: \"bg-red-50\",\r\n    border: \"border-red-200\",\r\n    icon: \"text-red-500\",\r\n    title: \"text-red-800\",\r\n    message: \"text-red-700\",\r\n  },\r\n  warning: {\r\n    bg: \"bg-yellow-50\",\r\n    border: \"border-yellow-200\",\r\n    icon: \"text-yellow-500\",\r\n    title: \"text-yellow-800\",\r\n    message: \"text-yellow-700\",\r\n  },\r\n  info: {\r\n    bg: \"bg-blue-50\",\r\n    border: \"border-blue-200\",\r\n    icon: \"text-blue-500\",\r\n    title: \"text-blue-800\",\r\n    message: \"text-blue-700\",\r\n  },\r\n};\r\n\r\nfunction ToastComponent({ toast, onRemove }: ToastProps) {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const [isLeaving, setIsLeaving] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Trigger entrance animation\r\n    const timer = setTimeout(() => setIsVisible(true), 10);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (toast.duration) {\r\n      const timer = setTimeout(() => {\r\n        handleRemove();\r\n      }, toast.duration);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [toast.duration]);\r\n\r\n  const handleRemove = () => {\r\n    setIsLeaving(true);\r\n    setTimeout(() => {\r\n      onRemove(toast.id);\r\n    }, 300);\r\n  };\r\n\r\n  const Icon = toastIcons[toast.type];\r\n  const colors = toastColors[toast.type];\r\n\r\n  return (\r\n    <div\r\n      className={`\r\n        ${colors.bg} ${colors.border} border rounded-lg p-4 shadow-lg\r\n        transition-all duration-300 ease-in-out\r\n        ${isVisible && !isLeaving ? \"translate-x-0 opacity-100\" : \"translate-x-full opacity-0\"}\r\n        ${isLeaving ? \"translate-x-full opacity-0\" : \"\"}\r\n      `}\r\n      style={{\r\n        backdropFilter: \"blur(10px)\",\r\n        minWidth: \"320px\",\r\n        maxWidth: \"400px\",\r\n      }}\r\n    >\r\n      <div className=\"flex items-start gap-3\">\r\n        <Icon className={`w-5 h-5 mt-0.5 ${colors.icon} flex-shrink-0`} />\r\n\r\n        <div className=\"flex-1 min-w-0\">\r\n          <div className={`font-semibold text-sm ${colors.title}`}>{toast.title}</div>\r\n          {toast.message && <div className={`text-sm mt-1 ${colors.message}`}>{toast.message}</div>}\r\n          {toast.action && (\r\n            <button\r\n              onClick={toast.action.onClick}\r\n              className={`\r\n                mt-2 text-sm font-medium underline hover:no-underline\r\n                ${colors.title}\r\n              `}\r\n            >\r\n              {toast.action.label}\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        <button\r\n          onClick={handleRemove}\r\n          className={`\r\n            flex-shrink-0 p-1 rounded-full hover:bg-black hover:bg-opacity-10\r\n            transition-colors ${colors.title}\r\n          `}\r\n        >\r\n          <X className=\"w-4 h-4\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Toast Container\r\ninterface ToastContainerProps {\r\n  toasts: Toast[];\r\n  onRemove: (id: string) => void;\r\n}\r\n\r\nexport function ToastContainer({ toasts, onRemove }: ToastContainerProps) {\r\n  return (\r\n    <div className=\"fixed top-4 right-4 z-50 space-y-2\">\r\n      {toasts.map((toast) => (\r\n        <ToastComponent key={toast.id} toast={toast} onRemove={onRemove} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Toast Hook\r\nlet toastId = 0;\r\n\r\nexport function useToast() {\r\n  const [toasts, setToasts] = useState<Toast[]>([]);\r\n\r\n  const addToast = (toast: Omit<Toast, \"id\">) => {\r\n    const id = `toast-${++toastId}`;\r\n    const newToast = { ...toast, id };\r\n\r\n    setToasts((prev) => [...prev, newToast]);\r\n\r\n    return id;\r\n  };\r\n\r\n  const removeToast = (id: string) => {\r\n    setToasts((prev) => prev.filter((toast) => toast.id !== id));\r\n  };\r\n\r\n  const clearAll = () => {\r\n    setToasts([]);\r\n  };\r\n\r\n  // Convenience methods\r\n  const success = (title: string, message?: string, options?: Partial<Toast>) => {\r\n    return addToast({\r\n      type: \"success\",\r\n      title,\r\n      message,\r\n      duration: 5000,\r\n      ...options,\r\n    });\r\n  };\r\n\r\n  const error = (title: string, message?: string, options?: Partial<Toast>) => {\r\n    return addToast({\r\n      type: \"error\",\r\n      title,\r\n      message,\r\n      duration: 7000,\r\n      ...options,\r\n    });\r\n  };\r\n\r\n  const warning = (title: string, message?: string, options?: Partial<Toast>) => {\r\n    return addToast({\r\n      type: \"warning\",\r\n      title,\r\n      message,\r\n      duration: 6000,\r\n      ...options,\r\n    });\r\n  };\r\n\r\n  const info = (title: string, message?: string, options?: Partial<Toast>) => {\r\n    return addToast({\r\n      type: \"info\",\r\n      title,\r\n      message,\r\n      duration: 4000,\r\n      ...options,\r\n    });\r\n  };\r\n\r\n  return {\r\n    toasts,\r\n    addToast,\r\n    removeToast,\r\n    clearAll,\r\n    success,\r\n    error,\r\n    warning,\r\n    info,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MLIntelligenceWorkflow.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * ML Intelligence Workflow\r\n * \r\n * Comprehensive ML-powered trading intelligence for friends and family.\r\n * Integrates pattern recognition, market regime detection, and personal analytics.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { \r\n  Brain, \r\n  Target, \r\n  BarChart3, \r\n  User,\r\n  Settings,\r\n  RefreshCw,\r\n  Zap,\r\n  Shield,\r\n  TrendingUp,\r\n  Info\r\n} from 'lucide-react';\r\nimport { MLIntelligenceDashboard } from '../ml/MLIntelligenceDashboard';\r\nimport { PatternRecognition } from '../ml/PatternRecognition';\r\nimport { MarketRegimeDetector } from '../ml/MarketRegimeDetector';\r\nimport { PersonalAnalytics } from '../ml/PersonalAnalytics';\r\nimport { HelpTooltip } from '../HelpTooltip';\r\n\r\ninterface MLIntelligenceWorkflowProps {\r\n  onClose?: () => void;\r\n}\r\n\r\ntype TabType = 'overview' | 'patterns' | 'regime' | 'analytics';\r\n\r\nexport const MLIntelligenceWorkflow: React.FC<MLIntelligenceWorkflowProps> = ({ onClose }) => {\r\n  const [activeTab, setActiveTab] = useState<TabType>('overview');\r\n  const [selectedSymbol, setSelectedSymbol] = useState('SPY');\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  const tabs = [\r\n    {\r\n      id: 'overview' as TabType,\r\n      label: 'Overview',\r\n      icon: Brain,\r\n      description: 'Complete ML intelligence dashboard'\r\n    },\r\n    {\r\n      id: 'patterns' as TabType,\r\n      label: 'Patterns',\r\n      icon: Target,\r\n      description: 'Chart pattern recognition'\r\n    },\r\n    {\r\n      id: 'regime' as TabType,\r\n      label: 'Market Regime',\r\n      icon: BarChart3,\r\n      description: 'Market state analysis'\r\n    },\r\n    {\r\n      id: 'analytics' as TabType,\r\n      label: 'Personal Analytics',\r\n      icon: User,\r\n      description: 'Your trading performance'\r\n    }\r\n  ];\r\n\r\n  const handleRefresh = async () => {\r\n    setRefreshing(true);\r\n    // Simulate refresh delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    setRefreshing(false);\r\n  };\r\n\r\n  const renderActiveTab = () => {\r\n    switch (activeTab) {\r\n      case 'overview':\r\n        return <MLIntelligenceDashboard />;\r\n      case 'patterns':\r\n        return <PatternRecognition symbol={selectedSymbol} />;\r\n      case 'regime':\r\n        return <MarketRegimeDetector symbol={selectedSymbol} />;\r\n      case 'analytics':\r\n        return <PersonalAnalytics />;\r\n      default:\r\n        return <MLIntelligenceDashboard />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full flex flex-col bg-gray-50\">\r\n      {/* Header */}\r\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg\">\r\n              <Brain className=\"w-6 h-6 text-white\" />\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-xl font-bold text-gray-900\">ML Intelligence</h1>\r\n              <p className=\"text-sm text-gray-600\">AI-powered trading insights and analysis</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-3\">\r\n            <select\r\n              value={selectedSymbol}\r\n              onChange={(e) => setSelectedSymbol(e.target.value)}\r\n              className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              aria-label=\"Select symbol for ML analysis\"\r\n            >\r\n              <option value=\"SPY\">SPY (S&P 500)</option>\r\n              <option value=\"QQQ\">QQQ (NASDAQ)</option>\r\n              <option value=\"IWM\">IWM (Russell 2000)</option>\r\n              <option value=\"AAPL\">AAPL (Apple)</option>\r\n              <option value=\"MSFT\">MSFT (Microsoft)</option>\r\n              <option value=\"GOOGL\">GOOGL (Google)</option>\r\n              <option value=\"TSLA\">TSLA (Tesla)</option>\r\n            </select>\r\n            \r\n            <button\r\n              onClick={handleRefresh}\r\n              disabled={refreshing}\r\n              className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors\"\r\n            >\r\n              <RefreshCw className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} />\r\n              <span>Refresh</span>\r\n            </button>\r\n            \r\n            {onClose && (\r\n              <button\r\n                onClick={onClose}\r\n                className=\"p-2 text-gray-400 hover:text-gray-600 transition-colors\"\r\n              >\r\n                <Settings className=\"w-5 h-5\" />\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Navigation Tabs */}\r\n      <div className=\"bg-white border-b border-gray-200 px-6\">\r\n        <div className=\"flex space-x-1\">\r\n          {tabs.map((tab) => {\r\n            const Icon = tab.icon;\r\n            return (\r\n              <button\r\n                key={tab.id}\r\n                onClick={() => setActiveTab(tab.id)}\r\n                className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium rounded-t-lg transition-colors ${\r\n                  activeTab === tab.id\r\n                    ? 'text-blue-600 bg-blue-50 border-b-2 border-blue-600'\r\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\r\n                }`}\r\n              >\r\n                <Icon className=\"w-4 h-4\" />\r\n                <span>{tab.label}</span>\r\n                <HelpTooltip content={tab.description} />\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Content Area */}\r\n      <div className=\"flex-1 overflow-y-auto\">\r\n        <div className=\"p-6\">\r\n          {renderActiveTab()}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Quick Actions Footer */}\r\n      <div className=\"bg-white border-t border-gray-200 px-6 py-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\r\n            <div className=\"flex items-center space-x-1\">\r\n              <Zap className=\"w-4 h-4 text-yellow-500\" />\r\n              <span>AI-Powered</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-1\">\r\n              <Shield className=\"w-4 h-4 text-green-500\" />\r\n              <span>Risk Managed</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-1\">\r\n              <TrendingUp className=\"w-4 h-4 text-blue-500\" />\r\n              <span>Performance Focused</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"text-xs text-gray-500\">\r\n            Last updated: {new Date().toLocaleTimeString()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\MarketAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\MarketStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\PortfolioSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\PreMarketMovers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\TodaySchedule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\contexts\\AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\contexts\\GlowStyleContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\contexts\\ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\contexts\\WorkflowContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useBreakpoint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useHelp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useMarketStream.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'symbols.length'. Either include it or remove the dependency array.","line":299,"column":6,"nodeType":"ArrayExpression","endLine":299,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [connect, log, symbols.length]","fix":{"range":[9244,9277],"text":"[connect, log, symbols.length]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":299,"column":7,"nodeType":"CallExpression","endLine":299,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\usePositionUpdates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useSWR.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useWebSocket.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[132,135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[132,135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1753,1756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1753,1756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3067,3102],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3862,3927],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4200,4326],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleMessage'. Either include it or remove the dependency array.","line":168,"column":6,"nodeType":"ArrayExpression","endLine":168,"endColumn":60,"suggestions":[{"desc":"Update the dependencies array to be: [url, userId, handleMessage, maxReconnectAttempts, reconnectInterval]","fix":{"range":[4964,5018],"text":"[url, userId, handleMessage, maxReconnectAttempts, reconnectInterval]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5569,5627],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6763,6837],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":237,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":237,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6970,7021],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":268,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7947,7950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7947,7950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\nexport interface WebSocketMessage {\r\n  type: string;\r\n  data?: any;\r\n  symbol?: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface MarketData {\r\n  symbol: string;\r\n  price: number;\r\n  change: number;\r\n  change_percent: number;\r\n  volume: number;\r\n  high: number;\r\n  low: number;\r\n  open: number;\r\n  previous_close: number;\r\n  timestamp: string;\r\n  source: string;\r\n}\r\n\r\nexport interface PortfolioUpdate {\r\n  total_value: number;\r\n  total_change: number;\r\n  total_change_percent: number;\r\n  positions: Array<{\r\n    symbol: string;\r\n    quantity: number;\r\n    current_price: number;\r\n    market_value: number;\r\n    unrealized_pnl: number;\r\n    unrealized_pnl_percent: number;\r\n  }>;\r\n}\r\n\r\nexport interface PositionUpdate {\r\n  symbol: string;\r\n  quantity: number;\r\n  current_price: number;\r\n  market_value: number;\r\n  unrealized_pnl: number;\r\n  unrealized_pnl_percent: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface TradingAlert {\r\n  type: \"price_alert\" | \"volume_alert\" | \"news_alert\" | \"system_alert\";\r\n  symbol?: string;\r\n  message: string;\r\n  severity: \"info\" | \"warning\" | \"error\" | \"success\";\r\n  timestamp: string;\r\n}\r\n\r\ninterface UseWebSocketOptions {\r\n  url: string;\r\n  userId: string;\r\n  autoConnect?: boolean;\r\n  reconnectInterval?: number;\r\n  maxReconnectAttempts?: number;\r\n}\r\n\r\ninterface UseWebSocketReturn {\r\n  isConnected: boolean;\r\n  isConnecting: boolean;\r\n  error: string | null;\r\n  marketData: Map<string, MarketData>;\r\n  portfolioUpdate: PortfolioUpdate | null;\r\n  positionUpdates: Map<string, PositionUpdate>;\r\n  tradingAlerts: TradingAlert[];\r\n  subscribe: (symbols: string[]) => void;\r\n  unsubscribe: (symbols: string[]) => void;\r\n  sendMessage: (message: any) => void;\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n}\r\n\r\nexport const useWebSocket = ({\r\n  url,\r\n  userId,\r\n  autoConnect = true,\r\n  reconnectInterval = 5000,\r\n  maxReconnectAttempts = 5,\r\n}: UseWebSocketOptions): UseWebSocketReturn => {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [marketData, setMarketData] = useState<Map<string, MarketData>>(new Map());\r\n  const [portfolioUpdate, setPortfolioUpdate] = useState<PortfolioUpdate | null>(null);\r\n  const [positionUpdates, setPositionUpdates] = useState<Map<string, PositionUpdate>>(new Map());\r\n  const [tradingAlerts, setTradingAlerts] = useState<TradingAlert[]>([]);\r\n\r\n  const wsRef = useRef<WebSocket | null>(null);\r\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const reconnectAttemptsRef = useRef(0);\r\n  const subscribedSymbolsRef = useRef<Set<string>>(new Set());\r\n\r\n  const connect = useCallback(() => {\r\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n      return;\r\n    }\r\n\r\n    setIsConnecting(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const ws = new WebSocket(`${url}?user_id=${userId}`);\r\n      wsRef.current = ws;\r\n\r\n      ws.onopen = () => {\r\n        console.log(\"WebSocket connected\");\r\n        setIsConnected(true);\r\n        setIsConnecting(false);\r\n        setError(null);\r\n        reconnectAttemptsRef.current = 0;\r\n\r\n        // Resubscribe to previously subscribed symbols\r\n        if (subscribedSymbolsRef.current.size > 0) {\r\n          ws.send(\r\n            JSON.stringify({\r\n              type: \"subscribe\",\r\n              symbols: Array.from(subscribedSymbolsRef.current),\r\n            })\r\n          );\r\n        }\r\n      };\r\n\r\n      ws.onmessage = (event) => {\r\n        try {\r\n          const message: WebSocketMessage = JSON.parse(event.data);\r\n          handleMessage(message);\r\n        } catch (err) {\r\n          console.error(\"Error parsing WebSocket message:\", err);\r\n        }\r\n      };\r\n\r\n      ws.onclose = (event) => {\r\n        console.log(\"WebSocket disconnected:\", event.code, event.reason);\r\n        setIsConnected(false);\r\n        setIsConnecting(false);\r\n\r\n        // Attempt to reconnect if not a manual disconnect\r\n        if (event.code !== 1000 && reconnectAttemptsRef.current < maxReconnectAttempts) {\r\n          reconnectAttemptsRef.current++;\r\n          console.log(\r\n            `Attempting to reconnect (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`\r\n          );\r\n\r\n          reconnectTimeoutRef.current = setTimeout(() => {\r\n            connect();\r\n          }, reconnectInterval);\r\n        } else if (reconnectAttemptsRef.current >= maxReconnectAttempts) {\r\n          setError(\"Failed to reconnect after maximum attempts\");\r\n        }\r\n      };\r\n\r\n      ws.onerror = (err) => {\r\n        console.error(\"WebSocket error:\", err);\r\n        setError(\"WebSocket connection error\");\r\n        setIsConnecting(false);\r\n      };\r\n    } catch (err) {\r\n      console.error(\"Error creating WebSocket:\", err);\r\n      setError(\"Failed to create WebSocket connection\");\r\n      setIsConnecting(false);\r\n    }\r\n  }, [url, userId, reconnectInterval, maxReconnectAttempts]);\r\n\r\n  const disconnect = useCallback(() => {\r\n    if (reconnectTimeoutRef.current) {\r\n      clearTimeout(reconnectTimeoutRef.current);\r\n      reconnectTimeoutRef.current = null;\r\n    }\r\n\r\n    if (wsRef.current) {\r\n      wsRef.current.close(1000, \"Manual disconnect\");\r\n      wsRef.current = null;\r\n    }\r\n\r\n    setIsConnected(false);\r\n    setIsConnecting(false);\r\n    reconnectAttemptsRef.current = 0;\r\n  }, []);\r\n\r\n  const handleMessage = useCallback((message: WebSocketMessage) => {\r\n    switch (message.type) {\r\n      case \"connection\":\r\n        console.log(\"WebSocket connection established:\", message);\r\n        break;\r\n\r\n      case \"market_data\":\r\n        if (message.symbol && message.data) {\r\n          setMarketData((prev) => {\r\n            const newMap = new Map(prev);\r\n            newMap.set(message.symbol!, message.data as MarketData);\r\n            return newMap;\r\n          });\r\n        }\r\n        break;\r\n\r\n      case \"portfolio_update\":\r\n        if (message.data) {\r\n          setPortfolioUpdate(message.data as PortfolioUpdate);\r\n        }\r\n        break;\r\n\r\n      case \"position_update\":\r\n        if (message.data) {\r\n          const positionData = message.data as PositionUpdate;\r\n          setPositionUpdates((prev) => {\r\n            const newMap = new Map(prev);\r\n            newMap.set(positionData.symbol, positionData);\r\n            return newMap;\r\n          });\r\n        }\r\n        break;\r\n\r\n      case \"trading_alert\":\r\n        if (message.data) {\r\n          setTradingAlerts((prev) => {\r\n            const newAlert = message.data as TradingAlert;\r\n            return [newAlert, ...prev].slice(0, 50); // Keep last 50 alerts\r\n          });\r\n        }\r\n        break;\r\n\r\n      case \"subscription_confirmed\":\r\n        console.log(\"Subscription confirmed for symbols:\", message.data?.symbols);\r\n        break;\r\n\r\n      case \"pong\":\r\n        // Handle ping/pong for connection health\r\n        break;\r\n\r\n      default:\r\n        console.log(\"Unknown message type:\", message.type);\r\n    }\r\n  }, []);\r\n\r\n  const subscribe = useCallback((symbols: string[]) => {\r\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n      const newSymbols = symbols.filter((s) => !subscribedSymbolsRef.current.has(s));\r\n      if (newSymbols.length > 0) {\r\n        subscribedSymbolsRef.current = new Set([...subscribedSymbolsRef.current, ...newSymbols]);\r\n        wsRef.current.send(\r\n          JSON.stringify({\r\n            type: \"subscribe\",\r\n            symbols: newSymbols,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const unsubscribe = useCallback((symbols: string[]) => {\r\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n      symbols.forEach((symbol) => subscribedSymbolsRef.current.delete(symbol));\r\n      wsRef.current.send(\r\n        JSON.stringify({\r\n          type: \"unsubscribe\",\r\n          symbols,\r\n        })\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  const sendMessage = useCallback((message: any) => {\r\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n      wsRef.current.send(JSON.stringify(message));\r\n    }\r\n  }, []);\r\n\r\n  // Auto-connect on mount\r\n  useEffect(() => {\r\n    if (autoConnect) {\r\n      connect();\r\n    }\r\n\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [autoConnect, connect, disconnect]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (reconnectTimeoutRef.current) {\r\n        clearTimeout(reconnectTimeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    isConnected,\r\n    isConnecting,\r\n    error,\r\n    marketData,\r\n    portfolioUpdate,\r\n    positionUpdates,\r\n    tradingAlerts,\r\n    subscribe,\r\n    unsubscribe,\r\n    sendMessage,\r\n    connect,\r\n    disconnect,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\aiAdapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\alpaca.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\apiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\authApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\logger.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1675,1733],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"group"},"fix":{"range":[1862,1883],"text":""},"desc":"Remove the console.group()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[1958,1977],"text":""},"desc":"Remove the console.groupEnd()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"time"},"fix":{"range":[2104,2124],"text":""},"desc":"Remove the console.time()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"timeEnd"},"fix":{"range":[2211,2234],"text":""},"desc":"Remove the console.timeEnd()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\marketData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\sentry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\tradeHistory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\userManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\_app.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\_document.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\ai\\recommendations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\ai\\suggest-strategy.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[248,251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[248,251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\chat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\market\\historical.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\market\\options-chain.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\pnl\\calculate-theoretical.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\pnl\\comparison\\[positionId].ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\pnl\\track-position.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proposals\\[id]\\approve.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proposals\\[id]\\reject.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proposals\\[id]\\reprice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proposals\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proxy\\[...path].ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\strategies\\[strategyId]\\versions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\strategies\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\enhanced-index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GitHubActionsMonitor' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":61,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import dynamic from \"next/dynamic\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Split from \"react-split\";\r\nimport RadialMenu, { Workflow, workflows } from \"../components/RadialMenu\";\r\nimport { LOGO_ANIMATION_KEYFRAME } from \"../styles/logoConstants\";\r\n\r\nimport ExecuteTradeForm from \"../components/ExecuteTradeForm\";\r\nimport MobileDashboard from \"../components/MobileDashboard\";\r\nimport Settings from \"../components/Settings\";\r\nimport UserSetupAI from \"../components/UserSetupAI\";\r\n\r\n// Dynamic imports for code splitting (loads only when needed)\r\nconst MorningRoutineAI = dynamic(() => import(\"../components/MorningRoutineAI\"), {\r\n  loading: () => (\r\n    <div className=\"flex items-center justify-center p-8\">\r\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n    </div>\r\n  ),\r\n});\r\nconst AIRecommendations = dynamic(() => import(\"../components/AIRecommendations\"), {\r\n  loading: () => (\r\n    <div className=\"flex items-center justify-center p-8\">\r\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n    </div>\r\n  ),\r\n});\r\nconst MonitorDashboard = dynamic(\r\n  () => import(\"../components/MonitorDashboard\").then((mod) => ({ default: mod.MonitorDashboard })),\r\n  {\r\n    loading: () => (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n      </div>\r\n    ),\r\n  }\r\n);\r\nconst Analytics = dynamic(() => import(\"../components/Analytics\"), {\r\n  loading: () => (\r\n    <div className=\"flex items-center justify-center p-8\">\r\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n    </div>\r\n  ),\r\n});\r\nconst Backtesting = dynamic(() => import(\"../components/Backtesting\"), {\r\n  loading: () => (\r\n    <div className=\"flex items-center justify-center p-8\">\r\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n    </div>\r\n  ),\r\n});\r\nconst MLIntelligenceWorkflow = dynamic(\r\n  () => import(\"../components/workflows/MLIntelligenceWorkflow\"),\r\n  {\r\n    loading: () => (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n      </div>\r\n    ),\r\n  }\r\n);\r\nconst GitHubActionsMonitor = dynamic(() => import(\"../components/GitHubActionsMonitor\"), {\r\n  loading: () => (\r\n    <div className=\"flex items-center justify-center p-8\">\r\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n    </div>\r\n  ),\r\n});\r\nconst NewsReview = dynamic(() => import(\"../components/NewsReview\"), {\r\n  loading: () => (\r\n    <div className=\"flex items-center justify-center p-8\">\r\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n    </div>\r\n  ),\r\n});\r\nconst StrategyBuilderAI = dynamic(() => import(\"../components/StrategyBuilderAI\"), {\r\n  loading: () => (\r\n    <div className=\"flex items-center justify-center p-8\">\r\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n    </div>\r\n  ),\r\n});\r\nconst PositionManager = dynamic(() => import(\"../components/trading/PositionManager\"), {\r\n  loading: () => (\r\n    <div className=\"flex items-center justify-center p-8\">\r\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n    </div>\r\n  ),\r\n});\r\n\r\nimport AIChat from \"../components/AIChat\";\r\nimport CommandPalette from \"../components/CommandPalette\";\r\nimport CompletePaiiDLogo from \"../components/CompletePaiiDLogo\";\r\nimport HelpPanel from \"../components/HelpPanel\";\r\nimport KeyboardShortcuts from \"../components/KeyboardShortcuts\";\r\nimport MarketScanner from \"../components/MarketScanner\";\r\nimport TradingModeIndicator from \"../components/TradingModeIndicator\";\r\nimport RiskCalculator from \"../components/trading/RiskCalculator\";\r\nimport { ToastContainer, useToast } from \"../components/ui/Toast\";\r\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\r\nimport { HelpProvider, useHelp } from \"../hooks/useHelp\";\r\nimport { initializeSession } from \"../lib/userManagement\";\r\n\r\nexport default function Dashboard() {\r\n  // Development bypass: Skip onboarding in development mode\r\n  const ENABLE_DEV_BYPASS = process.env.NODE_ENV === \"development\";\r\n\r\n  const [selectedWorkflow, setSelectedWorkflow] = useState<string>(\"\");\r\n  const [hoveredWorkflow, setHoveredWorkflow] = useState<Workflow | null>(null);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [isUserSetup, setIsUserSetup] = useState(false); // Start with onboarding\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [aiChatOpen, setAiChatOpen] = useState(false);\r\n  const [tradingMode, setTradingMode] = useState<\"paper\" | \"live\">(\"paper\");\r\n\r\n  // Help system\r\n  const { isHelpPanelOpen, openHelpPanel, closeHelpPanel } = useHelp();\r\n\r\n  // Toast notifications\r\n  const toast = useToast();\r\n\r\n  // Detect mobile viewport\r\n  const isMobile = useIsMobile();\r\n\r\n  // Check if user is set up on mount\r\n  useEffect(() => {\r\n    const setupComplete =\r\n      typeof window !== \"undefined\"\r\n        ? localStorage.getItem(\"user-setup-complete\") === \"true\"\r\n        : false;\r\n\r\n    setIsUserSetup(setupComplete);\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // Owner bypass keyboard combo (Ctrl+Shift+A or Cmd+Shift+A)\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      // Check for Ctrl+Shift+A (Windows/Linux) or Cmd+Shift+A (Mac)\r\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === \"A\") {\r\n        e.preventDefault();\r\n        console.info(\"[PaiiD] ≡ƒöô Admin bypass activated\");\r\n\r\n        // Set localStorage flags\r\n        if (typeof window !== \"undefined\") {\r\n          localStorage.setItem(\"user-setup-complete\", \"true\");\r\n          localStorage.setItem(\"admin-bypass\", \"true\");\r\n          localStorage.setItem(\"bypass-timestamp\", new Date().toISOString());\r\n        }\r\n\r\n        // Skip onboarding\r\n        setIsUserSetup(true);\r\n        initializeSession();\r\n\r\n        // Show notification (you can replace with a toast library)\r\n        alert(\"≡ƒöô Admin bypass activated! Welcome to PaiiD.\");\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  }, []);\r\n\r\n  // Handle user setup completion\r\n  const handleUserSetupComplete = () => {\r\n    setIsUserSetup(true);\r\n    initializeSession();\r\n  };\r\n\r\n  // Show loading state briefly\r\n  if (isLoading) {\r\n    return null;\r\n  }\r\n\r\n  // Show user setup modal if not set up (unless development bypass is enabled)\r\n  if (!ENABLE_DEV_BYPASS && !isUserSetup) {\r\n    return <UserSetupAI onComplete={handleUserSetupComplete} />;\r\n  }\r\n\r\n  // Use mobile dashboard for mobile devices\r\n  if (isMobile) {\r\n    return (\r\n      <MobileDashboard onWorkflowSelect={setSelectedWorkflow} selectedWorkflow={selectedWorkflow} />\r\n    );\r\n  }\r\n\r\n  const getWorkflowById = (id: string) => {\r\n    return workflows.find((w) => w.id === id);\r\n  };\r\n\r\n  const displayWorkflow = selectedWorkflow ? getWorkflowById(selectedWorkflow) : hoveredWorkflow;\r\n\r\n  // Render the active workflow component or description\r\n  const renderWorkflowContent = () => {\r\n    // If a workflow is selected, render its component\r\n    if (selectedWorkflow) {\r\n      switch (selectedWorkflow) {\r\n        case \"morning-routine\":\r\n          return <MorningRoutineAI />;\r\n\r\n        case \"active-positions\":\r\n          return <PositionManager />;\r\n\r\n        case \"execute\":\r\n          return <ExecuteTradeForm />;\r\n\r\n        case \"proposal-review\":\r\n          return <RiskCalculator onCreateProposal={() => {}} onExecuteProposal={() => {}} />;\r\n\r\n        case \"research\":\r\n          return <MarketScanner />;\r\n\r\n        case \"proposals\":\r\n          return <AIRecommendations />;\r\n\r\n        case \"settings\":\r\n          return <Settings isOpen={true} onClose={() => setSelectedWorkflow(\"\")} />;\r\n\r\n        case \"pnl-dashboard\":\r\n          return <Analytics />;\r\n\r\n        case \"news-review\":\r\n          return <NewsReview />;\r\n\r\n        case \"strategy-builder\":\r\n          return <StrategyBuilderAI />;\r\n\r\n        case \"backtesting\":\r\n          return <Backtesting />;\r\n\r\n        case \"monitor\":\r\n          return <MonitorDashboard />;\r\n\r\n        case \"ml-intelligence\":\r\n          return <MLIntelligenceWorkflow onClose={() => setSelectedWorkflow(null)} />;\r\n\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n\r\n    // If hovering (but not selected), show description\r\n    if (displayWorkflow) {\r\n      return (\r\n        <div\r\n          style={{\r\n            background: \"rgba(30, 41, 59, 0.8)\",\r\n            backdropFilter: \"blur(10px)\",\r\n            border: `1px solid ${displayWorkflow.color}40`,\r\n            borderRadius: \"16px\",\r\n            padding: \"20px\",\r\n            minHeight: \"100px\",\r\n            animation: \"slideUp 0.4s ease-out\",\r\n          }}\r\n        >\r\n          <h4\r\n            style={{\r\n              color: displayWorkflow.color,\r\n              fontSize: \"1.1rem\",\r\n              margin: 0,\r\n              marginBottom: \"10px\",\r\n            }}\r\n          >\r\n            {displayWorkflow.icon} {displayWorkflow.name.replace(\"\\n\", \" \")}\r\n          </h4>\r\n          <p\r\n            style={{\r\n              color: \"#cbd5e1\",\r\n              lineHeight: 1.5,\r\n              margin: 0,\r\n            }}\r\n          >\r\n            {displayWorkflow.description}\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Default welcome message\r\n    return (\r\n      <div\r\n        style={{\r\n          background: \"rgba(30, 41, 59, 0.8)\",\r\n          backdropFilter: \"blur(10px)\",\r\n          border: \"1px solid rgba(255, 255, 255, 0.1)\",\r\n          borderRadius: \"16px\",\r\n          padding: \"20px\",\r\n          minHeight: \"100px\",\r\n        }}\r\n      >\r\n        <h4\r\n          style={{\r\n            color: \"#7E57C2\",\r\n            fontSize: \"1.1rem\",\r\n            margin: 0,\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          Welcome to Your Trading Dashboard\r\n        </h4>\r\n        <p\r\n          style={{\r\n            color: \"#cbd5e1\",\r\n            lineHeight: 1.5,\r\n            margin: 0,\r\n          }}\r\n        >\r\n          Select a workflow stage from the radial menu above to begin. Each segment represents a key\r\n          phase in your trading routine, from morning market analysis to strategy execution.\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <HelpProvider>\r\n      {/* Command Palette (Cmd+K) */}\r\n      <CommandPalette onNavigate={setSelectedWorkflow} />\r\n\r\n      {/* Development Mode Banner */}\r\n      {ENABLE_DEV_BYPASS && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            background: \"linear-gradient(90deg, #f59e0b 0%, #ef4444 100%)\",\r\n            color: \"#fff\",\r\n            padding: \"8px 16px\",\r\n            textAlign: \"center\",\r\n            fontSize: \"13px\",\r\n            fontWeight: \"600\",\r\n            zIndex: 9999,\r\n            boxShadow: \"0 2px 8px rgba(0,0,0,0.3)\",\r\n          }}\r\n        >\r\n          ≡ƒöº DEVELOPMENT MODE | Onboarding Bypass Active | Press Ctrl+Shift+A for Manual Toggle\r\n        </div>\r\n      )}\r\n\r\n      {!selectedWorkflow ? (\r\n        // Full screen view when no workflow selected\r\n        <div\r\n          style={{\r\n            width: \"100vw\",\r\n            height: \"100vh\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-start\",\r\n            background: \"linear-gradient(135deg, #0f1828 0%, #1a2a3f 100%)\",\r\n            overflow: \"hidden\",\r\n            padding: 0,\r\n            margin: 0,\r\n            position: \"relative\",\r\n            paddingTop: ENABLE_DEV_BYPASS ? \"40px\" : \"0\",\r\n          }}\r\n        >\r\n          {/* Radial Menu Container - centered and scaled to fit */}\r\n          <div\r\n            style={{\r\n              flex: 1,\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              width: \"100%\",\r\n              maxHeight: \"calc(100vh - 60px)\",\r\n              overflow: \"hidden\",\r\n              paddingTop: \"0\",\r\n              paddingBottom: \"0\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                transform: \"scale(0.65)\",\r\n                transformOrigin: \"center center\",\r\n              }}\r\n            >\r\n              <RadialMenu\r\n                onWorkflowSelect={setSelectedWorkflow}\r\n                onWorkflowHover={setHoveredWorkflow}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Bottom Info Bar - absolute positioned */}\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              bottom: 0,\r\n              left: 0,\r\n              right: 0,\r\n              background: \"rgba(15, 24, 40, 0.95)\",\r\n              backdropFilter: \"blur(10px)\",\r\n              borderTop: \"1px solid rgba(16, 185, 129, 0.2)\",\r\n              padding: isMobile ? \"12px 16px\" : \"16px 24px\",\r\n              display: \"flex\",\r\n              justifyContent: isMobile ? \"center\" : \"space-between\",\r\n              alignItems: \"center\",\r\n              zIndex: 10,\r\n              flexDirection: isMobile ? \"column\" : \"row\",\r\n              gap: isMobile ? \"8px\" : \"0\",\r\n            }}\r\n          >\r\n            {/* Empty left space for symmetry - hide on mobile */}\r\n            {!isMobile && <div></div>}\r\n\r\n            {/* Keyboard Hints - hide on mobile (touch devices don't use keyboard) */}\r\n            {!isMobile && (\r\n              <div\r\n                style={{\r\n                  fontSize: \"0.875rem\",\r\n                  color: \"#94a3b8\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  gap: \"12px\",\r\n                }}\r\n              >\r\n                <span>\r\n                  <kbd\r\n                    style={{\r\n                      background: \"rgba(255, 255, 255, 0.1)\",\r\n                      padding: \"2px 8px\",\r\n                      borderRadius: \"4px\",\r\n                      fontFamily: \"monospace\",\r\n                      color: \"#e2e8f0\",\r\n                      marginRight: \"4px\",\r\n                    }}\r\n                  >\r\n                    Tab\r\n                  </kbd>\r\n                  focus\r\n                </span>\r\n                <span>\r\n                  <kbd\r\n                    style={{\r\n                      background: \"rgba(255, 255, 255, 0.1)\",\r\n                      padding: \"2px 8px\",\r\n                      borderRadius: \"4px\",\r\n                      fontFamily: \"monospace\",\r\n                      color: \"#e2e8f0\",\r\n                      marginRight: \"4px\",\r\n                    }}\r\n                  >\r\n                    Enter\r\n                  </kbd>\r\n                  select\r\n                </span>\r\n                <span>\r\n                  <kbd\r\n                    style={{\r\n                      background: \"rgba(255, 255, 255, 0.1)\",\r\n                      padding: \"2px 8px\",\r\n                      borderRadius: \"4px\",\r\n                      fontFamily: \"monospace\",\r\n                      color: \"#e2e8f0\",\r\n                      marginRight: \"4px\",\r\n                    }}\r\n                  >\r\n                    ΓåÉ ΓåÆ\r\n                  </kbd>\r\n                  rotate\r\n                </span>\r\n                <span>\r\n                  <kbd\r\n                    style={{\r\n                      background: \"rgba(26, 117, 96, 0.2)\",\r\n                      padding: \"2px 8px\",\r\n                      borderRadius: \"4px\",\r\n                      fontFamily: \"monospace\",\r\n                      color: \"#45f0c0\",\r\n                      marginRight: \"4px\",\r\n                      boxShadow: \"0 0 8px rgba(69, 240, 192, 0.3)\",\r\n                    }}\r\n                  >\r\n                    Ctrl+Shift+A\r\n                  </kbd>\r\n                  admin\r\n                </span>\r\n              </div>\r\n            )}\r\n\r\n            {/* Hover Description */}\r\n            <div\r\n              style={{\r\n                color: \"#cbd5e1\",\r\n                fontSize: isMobile ? \"12px\" : \"14px\",\r\n                fontStyle: \"italic\",\r\n                maxWidth: isMobile ? \"100%\" : \"300px\",\r\n                textAlign: isMobile ? \"center\" : \"right\",\r\n                padding: isMobile ? \"0 8px\" : \"0\",\r\n              }}\r\n            >\r\n              {hoveredWorkflow\r\n                ? hoveredWorkflow.description\r\n                : isMobile\r\n                  ? \"Tap a segment\"\r\n                  : \"Hover over segments for details\"}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : isMobile ? (\r\n        // Mobile: Stacked layout (no split view)\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"100vh\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            background: \"linear-gradient(135deg, #0f1828 0%, #1a2a3f 100%)\",\r\n            overflow: \"hidden\",\r\n          }}\r\n        >\r\n          {/* Mobile Header with Back Button */}\r\n          <div\r\n            style={{\r\n              padding: \"12px 16px\",\r\n              background: \"rgba(15, 24, 40, 0.95)\",\r\n              borderBottom: \"1px solid rgba(16, 185, 129, 0.2)\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              gap: \"12px\",\r\n              minHeight: \"56px\",\r\n            }}\r\n          >\r\n            {/* Back Button */}\r\n            <button\r\n              onClick={() => setSelectedWorkflow(\"\")}\r\n              style={{\r\n                background: \"rgba(16, 185, 129, 0.1)\",\r\n                border: \"1px solid rgba(16, 185, 129, 0.3)\",\r\n                borderRadius: \"8px\",\r\n                padding: \"8px 12px\",\r\n                color: \"#10b981\",\r\n                fontSize: \"14px\",\r\n                fontWeight: \"600\",\r\n                cursor: \"pointer\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                gap: \"4px\",\r\n              }}\r\n            >\r\n              ΓåÉ Menu\r\n            </button>\r\n\r\n            {/* Current Workflow Title */}\r\n            {displayWorkflow && (\r\n              <div\r\n                style={{\r\n                  flex: 1,\r\n                  fontSize: \"16px\",\r\n                  fontWeight: \"700\",\r\n                  color: displayWorkflow.color,\r\n                }}\r\n              >\r\n                {displayWorkflow.icon} {displayWorkflow.name.replace(\"\\n\", \" \")}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Workflow Content - Full Width */}\r\n          <div\r\n            style={{\r\n              flex: 1,\r\n              overflowY: \"auto\",\r\n              overflowX: \"hidden\",\r\n              padding: \"16px\",\r\n              color: \"#e2e8f0\",\r\n            }}\r\n          >\r\n            {renderWorkflowContent()}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        // Desktop/Tablet: Split view when workflow selected\r\n        <Split\r\n          sizes={[40, 60]}\r\n          minSize={[350, 400]}\r\n          expandToMin={false}\r\n          gutterSize={8}\r\n          gutterAlign=\"center\"\r\n          snapOffset={30}\r\n          dragInterval={1}\r\n          direction=\"horizontal\"\r\n          cursor=\"col-resize\"\r\n          className=\"split\"\r\n        >\r\n          {/* Left panel - radial menu with header */}\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              height: \"100vh\",\r\n              background: \"linear-gradient(135deg, #0f1828 0%, #1a2a3f 100%)\",\r\n              overflow: \"hidden\",\r\n            }}\r\n          >\r\n            {/* Header with Logo, Help, and Trading Mode */}\r\n            <div\r\n              style={{\r\n                padding: \"20px 16px 10px\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n                gap: \"12px\",\r\n              }}\r\n            >\r\n              {/* Logo */}\r\n              <CompletePaiiDLogo size={64} />\r\n\r\n              {/* Help Button */}\r\n              <button\r\n                onClick={openHelpPanel}\r\n                style={{\r\n                  background: \"rgba(59, 130, 246, 0.1)\",\r\n                  border: \"1px solid rgba(59, 130, 246, 0.3)\",\r\n                  borderRadius: \"8px\",\r\n                  padding: \"8px 12px\",\r\n                  color: \"#3b82f6\",\r\n                  fontSize: \"12px\",\r\n                  fontWeight: \"600\",\r\n                  cursor: \"pointer\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  gap: \"4px\",\r\n                  transition: \"all 0.2s ease\",\r\n                }}\r\n                onMouseEnter={(e) => {\r\n                  e.currentTarget.style.background = \"rgba(59, 130, 246, 0.2)\";\r\n                  e.currentTarget.style.transform = \"translateY(-1px)\";\r\n                }}\r\n                onMouseLeave={(e) => {\r\n                  e.currentTarget.style.background = \"rgba(59, 130, 246, 0.1)\";\r\n                  e.currentTarget.style.transform = \"translateY(0)\";\r\n                }}\r\n              >\r\n                Γ¥ô Help\r\n              </button>\r\n\r\n              {/* Trading Mode Indicator */}\r\n              <TradingModeIndicator mode={tradingMode} onModeChange={setTradingMode} />\r\n            </div>\r\n\r\n            {/* Radial Menu */}\r\n            <div\r\n              style={{\r\n                flex: 1,\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  transform: \"scale(0.5)\",\r\n                  transformOrigin: \"center center\",\r\n                }}\r\n              >\r\n                <RadialMenu\r\n                  onWorkflowSelect={setSelectedWorkflow}\r\n                  onWorkflowHover={setHoveredWorkflow}\r\n                  selectedWorkflow={selectedWorkflow}\r\n                  compact={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Right panel - workflow content */}\r\n          <div\r\n            style={{\r\n              overflowY: \"auto\",\r\n              overflowX: \"hidden\",\r\n              height: \"100vh\",\r\n              background: \"linear-gradient(135deg, #0f1828 0%, #1a2a3f 100%)\",\r\n              padding: \"20px\",\r\n              color: \"#e2e8f0\",\r\n            }}\r\n          >\r\n            {renderWorkflowContent()}\r\n          </div>\r\n        </Split>\r\n      )}\r\n\r\n      {/* Animations */}\r\n      <style jsx>{`\r\n        @keyframes fadeIn {\r\n          from {\r\n            opacity: 0;\r\n            transform: translateY(-20px);\r\n          }\r\n          to {\r\n            opacity: 1;\r\n            transform: translateY(0);\r\n          }\r\n        }\r\n\r\n        @keyframes slideUp {\r\n          from {\r\n            opacity: 0;\r\n            transform: translateY(20px);\r\n          }\r\n          to {\r\n            opacity: 1;\r\n            transform: translateY(0);\r\n          }\r\n        }\r\n\r\n        @keyframes pulse {\r\n          0%,\r\n          100% {\r\n            opacity: 1;\r\n            transform: scale(1);\r\n          }\r\n          50% {\r\n            opacity: 0.6;\r\n            transform: scale(1.2);\r\n          }\r\n        }\r\n\r\n        @keyframes slideInRight {\r\n          from {\r\n            opacity: 0;\r\n            transform: translateX(100px);\r\n          }\r\n          to {\r\n            opacity: 1;\r\n            transform: translateX(0);\r\n          }\r\n        }\r\n\r\n        ${LOGO_ANIMATION_KEYFRAME}\r\n\r\n        /* React-split gutter styles - Claude-inspired */\r\n        :global(.split-container) {\r\n          width: 100%;\r\n        }\r\n\r\n        :global(.gutter) {\r\n          background-color: rgba(30, 41, 59, 0.8) !important;\r\n          background-repeat: no-repeat;\r\n          background-position: center;\r\n          transition: all 0.2s ease;\r\n          border: none !important;\r\n          position: relative;\r\n          backdrop-filter: blur(10px);\r\n        }\r\n\r\n        :global(.gutter:hover) {\r\n          background-color: rgba(16, 185, 129, 0.15) !important;\r\n        }\r\n\r\n        :global(.gutter:active) {\r\n          background-color: rgba(16, 185, 129, 0.25) !important;\r\n        }\r\n\r\n        :global(.gutter-horizontal) {\r\n          cursor: col-resize !important;\r\n          position: relative;\r\n        }\r\n\r\n        /* Grip indicator - vertical dots like Claude */\r\n        :global(.gutter-horizontal::before) {\r\n          content: \"\";\r\n          position: absolute;\r\n          left: 50%;\r\n          top: 50%;\r\n          transform: translate(-50%, -50%);\r\n          width: 3px;\r\n          height: 40px;\r\n          background: linear-gradient(\r\n            to bottom,\r\n            transparent 0%,\r\n            rgba(16, 185, 129, 0.4) 20%,\r\n            rgba(16, 185, 129, 0.6) 50%,\r\n            rgba(16, 185, 129, 0.4) 80%,\r\n            transparent 100%\r\n          );\r\n          border-radius: 2px;\r\n          transition: all 0.2s ease;\r\n        }\r\n\r\n        :global(.gutter-horizontal:hover::before) {\r\n          background: linear-gradient(\r\n            to bottom,\r\n            transparent 0%,\r\n            rgba(16, 185, 129, 0.6) 20%,\r\n            rgba(16, 185, 129, 0.9) 50%,\r\n            rgba(16, 185, 129, 0.6) 80%,\r\n            transparent 100%\r\n          );\r\n          height: 60px;\r\n          box-shadow: 0 0 10px rgba(16, 185, 129, 0.3);\r\n        }\r\n\r\n        :global(.gutter-horizontal:active::before) {\r\n          background: rgba(16, 185, 129, 1);\r\n          height: 80px;\r\n          box-shadow: 0 0 20px rgba(16, 185, 129, 0.5);\r\n        }\r\n\r\n        :global(.left-panel),\r\n        :global(.right-panel) {\r\n          overflow-y: auto;\r\n          height: 100vh;\r\n        }\r\n      `}</style>\r\n\r\n      {/* Settings Modal */}\r\n      <Settings isOpen={showSettings} onClose={() => setShowSettings(false)} />\r\n\r\n      {/* AI Chat Modal */}\r\n      <AIChat\r\n        isOpen={aiChatOpen}\r\n        onClose={() => setAiChatOpen(false)}\r\n        initialMessage=\"Hi! I'm your PaiiD AI assistant. I can help you with trading strategies, build custom workflows, analyze market data, or adjust your preferences. What would you like to know?\"\r\n      />\r\n\r\n      {/* Keyboard Shortcuts */}\r\n      <KeyboardShortcuts\r\n        onOpenTrade={() => setSelectedWorkflow(\"execute\")}\r\n        onQuickBuy={() => setSelectedWorkflow(\"execute\")}\r\n        onQuickSell={() => setSelectedWorkflow(\"execute\")}\r\n        onCloseModal={() => setSelectedWorkflow(\"\")}\r\n      />\r\n\r\n      {/* Help Panel */}\r\n      <HelpPanel isOpen={isHelpPanelOpen} onClose={closeHelpPanel} />\r\n\r\n      {/* Toast Notifications */}\r\n      <ToastContainer toasts={toast.toasts} onRemove={toast.removeToast} />\r\n    </HelpProvider>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\services\\telemetry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\styles\\logoConstants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\styles\\paiid-theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\styles\\theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\fixtures\\options.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\global-setup.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[382,440],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[923,961],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1029,1074],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1173,1228],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1785,1836],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1927,1983],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2455,2504],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2598,2626],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2629,2687],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2690,2718],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3119,3147],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3150,3215],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3218,3246],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3249,3265],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\global-teardown.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[367,425],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[964,1012],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1151,1206],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1691,1739],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1830,1889],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2157,2191],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2297,2325],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2328,2390],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2393,2421],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2686,2714],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2717,2789],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2792,2820],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2823,2839],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\market-data.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1047,1111],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1780,1861],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2611,2696],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3524,3588],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4274,4325],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\options-chain.spec.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2808,2856],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3603,3692],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6674,6722],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7409,7457],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8357,8397],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9246,9304],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10080,10133],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\types\\OptionsContract.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\types\\lightweight-charts.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\types\\pnl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\types\\profile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\utils\\indicators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
