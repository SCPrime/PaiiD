[{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\__tests__\\services\\telemetry.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\app\\monitor\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\AIAnalysisModal.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAnalysis'. Either include it or remove the dependency array.","line":99,"column":6,"nodeType":"ArrayExpression","endLine":99,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAnalysis, isOpen, symbol]","fix":{"range":[2511,2527],"text":"[fetchAnalysis, isOpen, symbol]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\AIChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\AIChatBot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\AIRecommendations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ActivePositions.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPositions'. Either include it or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPositions]","fix":{"range":[2886,2888],"text":"[loadPositions]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\Analytics.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalytics'. Either include it or remove the dependency array.","line":419,"column":6,"nodeType":"ArrayExpression","endLine":419,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadAnalytics, timeframe]","fix":{"range":[12408,12419],"text":"[loadAnalytics, timeframe]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ApprovalQueue.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\Backtesting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ChatContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ClaudeAIChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\CommandPalette.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Database' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Command Palette Component\r\n *\r\n * Keyboard-driven command palette for quick actions (Cmd+K / Ctrl+K).\r\n *\r\n * Phase 4B: UX Polish - Command Palette\r\n */\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Search,\r\n  TrendingUp,\r\n  BarChart3,\r\n  Brain,\r\n  Settings,\r\n  Newspaper,\r\n  Target,\r\n  Activity,\r\n  Database,\r\n  MessageSquare,\r\n  CreditCard,\r\n} from 'lucide-react';\r\n\r\ninterface Command {\r\n  id: string;\r\n  label: string;\r\n  description: string;\r\n  icon: React.ElementType;\r\n  action: () => void;\r\n  keywords?: string[];\r\n}\r\n\r\ninterface CommandPaletteProps {\r\n  onNavigate: (section: string) => void;\r\n}\r\n\r\nconst CommandPalette: React.FC<CommandPaletteProps> = ({ onNavigate }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [search, setSearch] = useState('');\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n\r\n  const commands: Command[] = [\r\n    {\r\n      id: 'positions',\r\n      label: 'View Positions',\r\n      description: 'See active trading positions',\r\n      icon: TrendingUp,\r\n      action: () => onNavigate('positions'),\r\n      keywords: ['trade', 'portfolio', 'holdings'],\r\n    },\r\n    {\r\n      id: 'execute',\r\n      label: 'Execute Trade',\r\n      description: 'Place a new order',\r\n      icon: Target,\r\n      action: () => onNavigate('execute'),\r\n      keywords: ['buy', 'sell', 'order', 'trade'],\r\n    },\r\n    {\r\n      id: 'analytics',\r\n      label: 'Analytics Dashboard',\r\n      description: 'View P&L and performance',\r\n      icon: BarChart3,\r\n      action: () => onNavigate('analytics'),\r\n      keywords: ['pnl', 'profit', 'loss', 'performance', 'metrics'],\r\n    },\r\n    {\r\n      id: 'ml-training',\r\n      label: 'ML Training',\r\n      description: 'Train machine learning models',\r\n      icon: Brain,\r\n      action: () => onNavigate('ml-training'),\r\n      keywords: ['ai', 'machine learning', 'model', 'train'],\r\n    },\r\n    {\r\n      id: 'ml-analytics',\r\n      label: 'ML Analytics',\r\n      description: 'View ML model performance',\r\n      icon: Activity,\r\n      action: () => onNavigate('ml-analytics'),\r\n      keywords: ['ai', 'accuracy', 'predictions'],\r\n    },\r\n    {\r\n      id: 'portfolio-optimizer',\r\n      label: 'Portfolio Optimizer',\r\n      description: 'Optimize portfolio allocation',\r\n      icon: Target,\r\n      action: () => onNavigate('portfolio-optimizer'),\r\n      keywords: ['optimize', 'allocation', 'rebalance'],\r\n    },\r\n    {\r\n      id: 'news',\r\n      label: 'News Sentiment',\r\n      description: 'Analyze market sentiment',\r\n      icon: Newspaper,\r\n      action: () => onNavigate('news'),\r\n      keywords: ['sentiment', 'headlines', 'analysis'],\r\n    },\r\n    {\r\n      id: 'ai-chat',\r\n      label: 'AI Chat',\r\n      description: 'Chat with Claude AI',\r\n      icon: MessageSquare,\r\n      action: () => onNavigate('ai-chat'),\r\n      keywords: ['claude', 'assistant', 'help', 'chat'],\r\n    },\r\n    {\r\n      id: 'subscription',\r\n      label: 'Subscription & Billing',\r\n      description: 'Manage subscription',\r\n      icon: CreditCard,\r\n      action: () => onNavigate('subscription'),\r\n      keywords: ['billing', 'payment', 'upgrade', 'plan'],\r\n    },\r\n    {\r\n      id: 'settings',\r\n      label: 'Settings',\r\n      description: 'Configure application',\r\n      icon: Settings,\r\n      action: () => onNavigate('settings'),\r\n      keywords: ['preferences', 'config', 'options'],\r\n    },\r\n  ];\r\n\r\n  const filteredCommands = commands.filter((cmd) => {\r\n    const searchLower = search.toLowerCase();\r\n    return (\r\n      cmd.label.toLowerCase().includes(searchLower) ||\r\n      cmd.description.toLowerCase().includes(searchLower) ||\r\n      cmd.keywords?.some((k) => k.includes(searchLower))\r\n    );\r\n  });\r\n\r\n  const handleKeyDown = useCallback(\r\n    (e: KeyboardEvent) => {\r\n      // Open with Cmd+K or Ctrl+K\r\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\r\n        e.preventDefault();\r\n        setIsOpen((prev) => !prev);\r\n        setSearch('');\r\n        setSelectedIndex(0);\r\n      }\r\n\r\n      // Close with Escape\r\n      if (e.key === 'Escape') {\r\n        setIsOpen(false);\r\n      }\r\n\r\n      if (!isOpen) return;\r\n\r\n      // Navigate with arrow keys\r\n      if (e.key === 'ArrowDown') {\r\n        e.preventDefault();\r\n        setSelectedIndex((prev) => Math.min(prev + 1, filteredCommands.length - 1));\r\n      }\r\n\r\n      if (e.key === 'ArrowUp') {\r\n        e.preventDefault();\r\n        setSelectedIndex((prev) => Math.max(prev - 1, 0));\r\n      }\r\n\r\n      // Execute with Enter\r\n      if (e.key === 'Enter' && filteredCommands[selectedIndex]) {\r\n        e.preventDefault();\r\n        filteredCommands[selectedIndex].action();\r\n        setIsOpen(false);\r\n        setSearch('');\r\n      }\r\n    },\r\n    [isOpen, filteredCommands, selectedIndex]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [handleKeyDown]);\r\n\r\n  useEffect(() => {\r\n    // Reset selection when search changes\r\n    setSelectedIndex(0);\r\n  }, [search]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <>\r\n      {/* Backdrop */}\r\n      <div\r\n        style={{\r\n          position: 'fixed',\r\n          inset: 0,\r\n          zIndex: 9999,\r\n          background: 'rgba(0, 0, 0, 0.7)',\r\n          backdropFilter: 'blur(4px)',\r\n        }}\r\n        onClick={() => setIsOpen(false)}\r\n      />\r\n\r\n      {/* Command Palette */}\r\n      <div\r\n        style={{\r\n          position: 'fixed',\r\n          top: '20%',\r\n          left: '50%',\r\n          transform: 'translateX(-50%)',\r\n          zIndex: 10000,\r\n          width: '90%',\r\n          maxWidth: '600px',\r\n          background: 'rgba(15, 23, 42, 0.95)',\r\n          border: '1px solid rgba(71, 85, 105, 0.5)',\r\n          borderRadius: '16px',\r\n          boxShadow: '0 24px 48px rgba(0, 0, 0, 0.5)',\r\n          backdropFilter: 'blur(20px)',\r\n          overflow: 'hidden',\r\n        }}\r\n      >\r\n        {/* Search Input */}\r\n        <div\r\n          style={{\r\n            padding: '20px',\r\n            borderBottom: '1px solid rgba(71, 85, 105, 0.3)',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            gap: '12px',\r\n          }}\r\n        >\r\n          <Search size={20} color=\"#94a3b8\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search commands...\"\r\n            value={search}\r\n            onChange={(e) => setSearch(e.target.value)}\r\n            autoFocus\r\n            style={{\r\n              flex: 1,\r\n              background: 'transparent',\r\n              border: 'none',\r\n              outline: 'none',\r\n              color: '#fff',\r\n              fontSize: '16px',\r\n              fontFamily: 'inherit',\r\n            }}\r\n          />\r\n          <kbd\r\n            style={{\r\n              padding: '4px 8px',\r\n              background: 'rgba(51, 65, 85, 0.6)',\r\n              borderRadius: '4px',\r\n              fontSize: '12px',\r\n              color: '#94a3b8',\r\n              border: '1px solid rgba(71, 85, 105, 0.3)',\r\n            }}\r\n          >\r\n            ESC\r\n          </kbd>\r\n        </div>\r\n\r\n        {/* Command List */}\r\n        <div\r\n          style={{\r\n            maxHeight: '400px',\r\n            overflowY: 'auto',\r\n            padding: '8px',\r\n          }}\r\n        >\r\n          {filteredCommands.length === 0 ? (\r\n            <div\r\n              style={{\r\n                padding: '40px',\r\n                textAlign: 'center',\r\n                color: '#64748b',\r\n                fontSize: '14px',\r\n              }}\r\n            >\r\n              No commands found\r\n            </div>\r\n          ) : (\r\n            filteredCommands.map((cmd, idx) => {\r\n              const Icon = cmd.icon;\r\n              const isSelected = idx === selectedIndex;\r\n\r\n              return (\r\n                <div\r\n                  key={cmd.id}\r\n                  onClick={() => {\r\n                    cmd.action();\r\n                    setIsOpen(false);\r\n                    setSearch('');\r\n                  }}\r\n                  onMouseEnter={() => setSelectedIndex(idx)}\r\n                  style={{\r\n                    padding: '12px 16px',\r\n                    borderRadius: '8px',\r\n                    background: isSelected\r\n                      ? 'rgba(16, 185, 129, 0.15)'\r\n                      : 'transparent',\r\n                    border: isSelected\r\n                      ? '1px solid rgba(16, 185, 129, 0.3)'\r\n                      : '1px solid transparent',\r\n                    cursor: 'pointer',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '12px',\r\n                    marginBottom: '4px',\r\n                    transition: 'all 0.15s ease',\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      width: '40px',\r\n                      height: '40px',\r\n                      borderRadius: '8px',\r\n                      background: isSelected\r\n                        ? 'rgba(16, 185, 129, 0.2)'\r\n                        : 'rgba(51, 65, 85, 0.4)',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                    }}\r\n                  >\r\n                    <Icon\r\n                      size={20}\r\n                      color={isSelected ? '#10b981' : '#94a3b8'}\r\n                    />\r\n                  </div>\r\n                  <div style={{ flex: 1 }}>\r\n                    <div\r\n                      style={{\r\n                        fontSize: '14px',\r\n                        fontWeight: 600,\r\n                        color: isSelected ? '#10b981' : '#fff',\r\n                        marginBottom: '2px',\r\n                      }}\r\n                    >\r\n                      {cmd.label}\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        fontSize: '12px',\r\n                        color: '#94a3b8',\r\n                      }}\r\n                    >\r\n                      {cmd.description}\r\n                    </div>\r\n                  </div>\r\n                  {isSelected && (\r\n                    <kbd\r\n                      style={{\r\n                        padding: '4px 8px',\r\n                        background: 'rgba(16, 185, 129, 0.2)',\r\n                        borderRadius: '4px',\r\n                        fontSize: '11px',\r\n                        color: '#10b981',\r\n                        border: '1px solid rgba(16, 185, 129, 0.3)',\r\n                      }}\r\n                    >\r\n                      ↵\r\n                    </kbd>\r\n                  )}\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div\r\n          style={{\r\n            padding: '12px 20px',\r\n            borderTop: '1px solid rgba(71, 85, 105, 0.3)',\r\n            display: 'flex',\r\n            gap: '16px',\r\n            fontSize: '12px',\r\n            color: '#64748b',\r\n          }}\r\n        >\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n            <kbd\r\n              style={{\r\n                padding: '2px 6px',\r\n                background: 'rgba(51, 65, 85, 0.4)',\r\n                borderRadius: '3px',\r\n                fontSize: '11px',\r\n                border: '1px solid rgba(71, 85, 105, 0.3)',\r\n              }}\r\n            >\r\n              ↑↓\r\n            </kbd>\r\n            Navigate\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n            <kbd\r\n              style={{\r\n                padding: '2px 6px',\r\n                background: 'rgba(51, 65, 85, 0.4)',\r\n                borderRadius: '3px',\r\n                fontSize: '11px',\r\n                border: '1px solid rgba(71, 85, 105, 0.3)',\r\n              }}\r\n            >\r\n              ↵\r\n            </kbd>\r\n            Select\r\n          </div>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n            <kbd\r\n              style={{\r\n                padding: '2px 6px',\r\n                background: 'rgba(51, 65, 85, 0.4)',\r\n                borderRadius: '3px',\r\n                fontSize: '11px',\r\n                border: '1px solid rgba(71, 85, 105, 0.3)',\r\n              }}\r\n            >\r\n              ESC\r\n            </kbd>\r\n            Close\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommandPalette;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\CompanyHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\CompletePaiiDLogo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ExecuteTradeForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\GlassmorphicComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\IndicatorPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\KeyboardShortcuts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\KillSwitchToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MLAnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MLModelManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[686,689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[686,689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":74,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":627,"column":22,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22749,22797],"text":"Click &quot;Refresh Status\" to load model information"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22749,22797],"text":"Click &ldquo;Refresh Status\" to load model information"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22749,22797],"text":"Click &#34;Refresh Status\" to load model information"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22749,22797],"text":"Click &rdquo;Refresh Status\" to load model information"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":627,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22749,22797],"text":"Click \"Refresh Status&quot; to load model information"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22749,22797],"text":"Click \"Refresh Status&ldquo; to load model information"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22749,22797],"text":"Click \"Refresh Status&#34; to load model information"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22749,22797],"text":"Click \"Refresh Status&rdquo; to load model information"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Card, Button } from \"./ui\";\r\nimport { theme } from \"../styles/theme\";\r\nimport { showError, showSuccess } from \"../lib/toast\";\r\nimport { Database, RefreshCw, CheckCircle, AlertTriangle, TrendingUp, Calendar, Activity } from \"lucide-react\";\r\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\r\n\r\ninterface ModelMetrics {\r\n  model_id: string;\r\n  model_type: string;\r\n  version: string;\r\n  accuracy: number;\r\n  samples_trained: number;\r\n  last_trained: string;\r\n  training_duration_seconds: number;\r\n  status: \"active\" | \"training\" | \"stale\" | \"error\";\r\n  features_count: number;\r\n  hyperparameters: Record<string, any>;\r\n}\r\n\r\ninterface ModelHealth {\r\n  model_id: string;\r\n  health_score: number;\r\n  prediction_accuracy: number;\r\n  days_since_training: number;\r\n  total_predictions: number;\r\n  requires_retraining: boolean;\r\n  issues: string[];\r\n  recommendations: string[];\r\n}\r\n\r\ninterface ModelManagementData {\r\n  models: ModelMetrics[];\r\n  health_checks: ModelHealth[];\r\n  next_scheduled_training: string | null;\r\n  auto_retrain_enabled: boolean;\r\n  system_status: \"healthy\" | \"degraded\" | \"critical\";\r\n}\r\n\r\nexport default function MLModelManagement() {\r\n  const isMobile = useIsMobile();\r\n  const [data, setData] = useState<ModelManagementData | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [retrainingModel, setRetrainingModel] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadModelStatus();\r\n  }, []);\r\n\r\n  const loadModelStatus = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await fetch(\"/api/proxy/api/ml/models/status\");\r\n      if (!res.ok) throw new Error(\"Failed to load model status\");\r\n      const modelData = await res.json();\r\n      setData(modelData);\r\n    } catch (err: unknown) {\r\n      const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\r\n      showError(`Failed to load models: ${errorMessage}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const retrainModel = async (modelId: string) => {\r\n    setRetrainingModel(modelId);\r\n    try {\r\n      const res = await fetch(`/api/proxy/api/ml/models/${modelId}/retrain`, {\r\n        method: \"POST\",\r\n      });\r\n      if (!res.ok) throw new Error(\"Retraining failed\");\r\n      const result = await res.json();\r\n      showSuccess(`Model ${modelId} retrained successfully!`);\r\n      await loadModelStatus(); // Refresh data\r\n    } catch (err: unknown) {\r\n      const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\r\n      showError(`Retraining failed: ${errorMessage}`);\r\n    } finally {\r\n      setRetrainingModel(null);\r\n    }\r\n  };\r\n\r\n  const toggleAutoRetrain = async () => {\r\n    try {\r\n      const newState = !data?.auto_retrain_enabled;\r\n      const res = await fetch(\"/api/proxy/api/ml/models/auto-retrain\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ enabled: newState }),\r\n      });\r\n      if (!res.ok) throw new Error(\"Failed to toggle auto-retrain\");\r\n      showSuccess(`Auto-retrain ${newState ? \"enabled\" : \"disabled\"}`);\r\n      await loadModelStatus();\r\n    } catch (err: unknown) {\r\n      const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\r\n      showError(`Failed to toggle auto-retrain: ${errorMessage}`);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string): string => {\r\n    switch (status) {\r\n      case \"active\":\r\n      case \"healthy\":\r\n        return theme.colors.success;\r\n      case \"training\":\r\n      case \"degraded\":\r\n        return theme.colors.warning;\r\n      case \"stale\":\r\n      case \"critical\":\r\n      case \"error\":\r\n        return theme.colors.error;\r\n      default:\r\n        return theme.colors.textMuted;\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case \"active\":\r\n      case \"healthy\":\r\n        return <CheckCircle size={20} color={theme.colors.success} />;\r\n      case \"training\":\r\n        return <RefreshCw size={20} color={theme.colors.warning} className=\"animate-spin\" />;\r\n      case \"stale\":\r\n      case \"degraded\":\r\n      case \"critical\":\r\n      case \"error\":\r\n        return <AlertTriangle size={20} color={theme.colors.error} />;\r\n      default:\r\n        return <Activity size={20} />;\r\n    }\r\n  };\r\n\r\n  const getHealthScoreColor = (score: number): string => {\r\n    if (score >= 80) return theme.colors.success;\r\n    if (score >= 60) return theme.colors.warning;\r\n    return theme.colors.error;\r\n  };\r\n\r\n  const formatDuration = (seconds: number): string => {\r\n    if (seconds < 60) return `${seconds}s`;\r\n    if (seconds < 3600) return `${Math.floor(seconds / 60)}m`;\r\n    return `${Math.floor(seconds / 3600)}h ${Math.floor((seconds % 3600) / 60)}m`;\r\n  };\r\n\r\n  const formatDate = (dateString: string): string => {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - date.getTime();\r\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\r\n\r\n    if (diffDays === 0) return \"Today\";\r\n    if (diffDays === 1) return \"Yesterday\";\r\n    if (diffDays < 7) return `${diffDays} days ago`;\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: isMobile ? theme.spacing.md : theme.spacing.lg }}>\r\n      {/* Header */}\r\n      <div style={{ marginBottom: theme.spacing.lg }}>\r\n        <h2\r\n          style={{\r\n            margin: 0,\r\n            fontSize: isMobile ? \"24px\" : \"32px\",\r\n            fontWeight: \"700\",\r\n            color: theme.colors.text,\r\n            textShadow: theme.glow.green,\r\n            marginBottom: theme.spacing.xs,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            gap: theme.spacing.sm,\r\n          }}\r\n        >\r\n          <Database size={32} color={theme.colors.primary} />\r\n          ML Model Management\r\n        </h2>\r\n        <p\r\n          style={{\r\n            margin: 0,\r\n            fontSize: \"14px\",\r\n            color: theme.colors.textMuted,\r\n          }}\r\n        >\r\n          Monitor model health, versions, and performance\r\n        </p>\r\n      </div>\r\n\r\n      {/* Controls */}\r\n      <Card glow=\"green\" style={{ marginBottom: theme.spacing.lg }}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n            flexWrap: \"wrap\",\r\n            gap: theme.spacing.md,\r\n          }}\r\n        >\r\n          <Button onClick={loadModelStatus} loading={isLoading} variant=\"primary\">\r\n            <RefreshCw size={18} />\r\n            Refresh Status\r\n          </Button>\r\n\r\n          {data && (\r\n            <label\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                gap: theme.spacing.sm,\r\n                fontSize: \"14px\",\r\n                color: theme.colors.text,\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={data.auto_retrain_enabled}\r\n                onChange={toggleAutoRetrain}\r\n                style={{ cursor: \"pointer\" }}\r\n              />\r\n              <Activity size={16} />\r\n              Auto-retrain enabled\r\n            </label>\r\n          )}\r\n\r\n          {data?.next_scheduled_training && (\r\n            <div\r\n              style={{\r\n                fontSize: \"13px\",\r\n                color: theme.colors.textMuted,\r\n              }}\r\n            >\r\n              <Calendar size={14} style={{ display: \"inline\", marginRight: \"4px\" }} />\r\n              Next training: {formatDate(data.next_scheduled_training)}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Card>\r\n\r\n      {/* System Status */}\r\n      {data && (\r\n        <Card\r\n          glow={data.system_status === \"healthy\" ? \"green\" : data.system_status === \"degraded\" ? \"yellow\" : \"red\"}\r\n          style={{ marginBottom: theme.spacing.lg }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              gap: theme.spacing.md,\r\n            }}\r\n          >\r\n            {getStatusIcon(data.system_status)}\r\n            <div>\r\n              <h3\r\n                style={{\r\n                  margin: 0,\r\n                  fontSize: \"18px\",\r\n                  fontWeight: \"600\",\r\n                  color: getStatusColor(data.system_status),\r\n                  textTransform: \"uppercase\",\r\n                }}\r\n              >\r\n                System Status: {data.system_status}\r\n              </h3>\r\n              <p\r\n                style={{\r\n                  margin: 0,\r\n                  fontSize: \"13px\",\r\n                  color: theme.colors.textMuted,\r\n                  marginTop: theme.spacing.xs,\r\n                }}\r\n              >\r\n                {data.models.length} models active •{\" \"}\r\n                {data.health_checks.filter((h) => h.requires_retraining).length} require retraining\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Models Grid */}\r\n      {data && (\r\n        <div\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(auto-fit, minmax(400px, 1fr))\",\r\n            gap: theme.spacing.lg,\r\n          }}\r\n        >\r\n          {data.models.map((model, idx) => {\r\n            const health = data.health_checks.find((h) => h.model_id === model.model_id);\r\n\r\n            return (\r\n              <Card key={idx} glow=\"cyan\" style={{ position: \"relative\" }}>\r\n                {/* Model Header */}\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"flex-start\",\r\n                    marginBottom: theme.spacing.md,\r\n                  }}\r\n                >\r\n                  <div>\r\n                    <h3\r\n                      style={{\r\n                        margin: 0,\r\n                        fontSize: \"20px\",\r\n                        fontWeight: \"700\",\r\n                        color: theme.colors.text,\r\n                      }}\r\n                    >\r\n                      {model.model_type.replace(/_/g, \" \").toUpperCase()}\r\n                    </h3>\r\n                    <div\r\n                      style={{\r\n                        fontSize: \"12px\",\r\n                        color: theme.colors.textMuted,\r\n                        marginTop: theme.spacing.xs,\r\n                      }}\r\n                    >\r\n                      v{model.version} • {model.model_id}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      gap: theme.spacing.xs,\r\n                      padding: \"6px 12px\",\r\n                      background: `rgba(${model.status === \"active\" ? \"16, 185, 129\" : model.status === \"training\" ? \"251, 191, 36\" : \"239, 68, 68\"}, 0.2)`,\r\n                      border: `1px solid ${getStatusColor(model.status)}`,\r\n                      borderRadius: theme.borderRadius.sm,\r\n                    }}\r\n                  >\r\n                    {getStatusIcon(model.status)}\r\n                    <span\r\n                      style={{\r\n                        fontSize: \"12px\",\r\n                        fontWeight: \"700\",\r\n                        color: getStatusColor(model.status),\r\n                        textTransform: \"uppercase\",\r\n                      }}\r\n                    >\r\n                      {model.status}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Model Metrics */}\r\n                <div\r\n                  style={{\r\n                    display: \"grid\",\r\n                    gridTemplateColumns: \"repeat(2, 1fr)\",\r\n                    gap: theme.spacing.sm,\r\n                    marginBottom: theme.spacing.md,\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      padding: theme.spacing.sm,\r\n                      background: \"rgba(6, 182, 212, 0.1)\",\r\n                      borderRadius: theme.borderRadius.sm,\r\n                    }}\r\n                  >\r\n                    <div style={{ fontSize: \"11px\", color: theme.colors.textMuted }}>ACCURACY</div>\r\n                    <div\r\n                      style={{\r\n                        fontSize: \"24px\",\r\n                        fontWeight: \"700\",\r\n                        color: theme.colors.secondary,\r\n                      }}\r\n                    >\r\n                      {(model.accuracy * 100).toFixed(1)}%\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    style={{\r\n                      padding: theme.spacing.sm,\r\n                      background: \"rgba(139, 92, 246, 0.1)\",\r\n                      borderRadius: theme.borderRadius.sm,\r\n                    }}\r\n                  >\r\n                    <div style={{ fontSize: \"11px\", color: theme.colors.textMuted }}>SAMPLES</div>\r\n                    <div\r\n                      style={{\r\n                        fontSize: \"24px\",\r\n                        fontWeight: \"700\",\r\n                        color: theme.colors.accent,\r\n                      }}\r\n                    >\r\n                      {model.samples_trained.toLocaleString()}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    style={{\r\n                      padding: theme.spacing.sm,\r\n                      background: \"rgba(16, 185, 129, 0.1)\",\r\n                      borderRadius: theme.borderRadius.sm,\r\n                    }}\r\n                  >\r\n                    <div style={{ fontSize: \"11px\", color: theme.colors.textMuted }}>FEATURES</div>\r\n                    <div\r\n                      style={{\r\n                        fontSize: \"24px\",\r\n                        fontWeight: \"700\",\r\n                        color: theme.colors.success,\r\n                      }}\r\n                    >\r\n                      {model.features_count}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    style={{\r\n                      padding: theme.spacing.sm,\r\n                      background: \"rgba(251, 191, 36, 0.1)\",\r\n                      borderRadius: theme.borderRadius.sm,\r\n                    }}\r\n                  >\r\n                    <div style={{ fontSize: \"11px\", color: theme.colors.textMuted }}>TRAINING TIME</div>\r\n                    <div\r\n                      style={{\r\n                        fontSize: \"20px\",\r\n                        fontWeight: \"700\",\r\n                        color: theme.colors.warning,\r\n                      }}\r\n                    >\r\n                      {formatDuration(model.training_duration_seconds)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Health Info */}\r\n                {health && (\r\n                  <div\r\n                    style={{\r\n                      padding: theme.spacing.md,\r\n                      background: \"rgba(15, 23, 42, 0.5)\",\r\n                      borderRadius: theme.borderRadius.md,\r\n                      marginBottom: theme.spacing.md,\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                        marginBottom: theme.spacing.sm,\r\n                      }}\r\n                    >\r\n                      <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Health Score</span>\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"20px\",\r\n                          fontWeight: \"700\",\r\n                          color: getHealthScoreColor(health.health_score),\r\n                        }}\r\n                      >\r\n                        {health.health_score.toFixed(0)}%\r\n                      </span>\r\n                    </div>\r\n\r\n                    <div\r\n                      style={{\r\n                        width: \"100%\",\r\n                        height: \"8px\",\r\n                        background: \"rgba(15, 23, 42, 0.8)\",\r\n                        borderRadius: \"4px\",\r\n                        overflow: \"hidden\",\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          width: `${health.health_score}%`,\r\n                          height: \"100%\",\r\n                          background: `linear-gradient(90deg, ${getHealthScoreColor(health.health_score)}, ${theme.colors.primary})`,\r\n                          transition: \"width 0.3s ease\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        marginTop: theme.spacing.sm,\r\n                        fontSize: \"12px\",\r\n                        color: theme.colors.textMuted,\r\n                      }}\r\n                    >\r\n                      <span>Last trained: {formatDate(model.last_trained)}</span>\r\n                      <span>{health.total_predictions.toLocaleString()} predictions</span>\r\n                    </div>\r\n\r\n                    {/* Issues */}\r\n                    {health.issues.length > 0 && (\r\n                      <div style={{ marginTop: theme.spacing.sm }}>\r\n                        {health.issues.map((issue, issueIdx) => (\r\n                          <div\r\n                            key={issueIdx}\r\n                            style={{\r\n                              fontSize: \"12px\",\r\n                              color: theme.colors.error,\r\n                              padding: \"4px 8px\",\r\n                              background: \"rgba(239, 68, 68, 0.1)\",\r\n                              borderRadius: theme.borderRadius.xs,\r\n                              marginBottom: theme.spacing.xs,\r\n                            }}\r\n                          >\r\n                            ⚠️ {issue}\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Recommendations */}\r\n                    {health.recommendations.length > 0 && (\r\n                      <div style={{ marginTop: theme.spacing.sm }}>\r\n                        {health.recommendations.slice(0, 2).map((rec, recIdx) => (\r\n                          <div\r\n                            key={recIdx}\r\n                            style={{\r\n                              fontSize: \"12px\",\r\n                              color: theme.colors.secondary,\r\n                              padding: \"4px 8px\",\r\n                              background: \"rgba(6, 182, 212, 0.1)\",\r\n                              borderRadius: theme.borderRadius.xs,\r\n                              marginBottom: theme.spacing.xs,\r\n                            }}\r\n                          >\r\n                            💡 {rec}\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                {/* Actions */}\r\n                <div style={{ display: \"flex\", gap: theme.spacing.sm }}>\r\n                  <Button\r\n                    onClick={() => retrainModel(model.model_id)}\r\n                    loading={retrainingModel === model.model_id}\r\n                    disabled={model.status === \"training\" || retrainingModel !== null}\r\n                    variant=\"primary\"\r\n                    style={{ flex: 1 }}\r\n                  >\r\n                    {retrainingModel === model.model_id ? \"Retraining...\" : \"Retrain Model\"}\r\n                  </Button>\r\n\r\n                  {health?.requires_retraining && (\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        padding: \"0 12px\",\r\n                        background: \"rgba(239, 68, 68, 0.2)\",\r\n                        border: `1px solid ${theme.colors.error}`,\r\n                        borderRadius: theme.borderRadius.md,\r\n                        fontSize: \"12px\",\r\n                        fontWeight: \"700\",\r\n                        color: theme.colors.error,\r\n                      }}\r\n                    >\r\n                      RETRAIN NEEDED\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Hyperparameters (collapsed) */}\r\n                <details style={{ marginTop: theme.spacing.md }}>\r\n                  <summary\r\n                    style={{\r\n                      fontSize: \"12px\",\r\n                      color: theme.colors.textMuted,\r\n                      cursor: \"pointer\",\r\n                      textTransform: \"uppercase\",\r\n                      letterSpacing: \"0.5px\",\r\n                    }}\r\n                  >\r\n                    Hyperparameters\r\n                  </summary>\r\n                  <div\r\n                    style={{\r\n                      marginTop: theme.spacing.sm,\r\n                      padding: theme.spacing.sm,\r\n                      background: \"rgba(15, 23, 42, 0.5)\",\r\n                      borderRadius: theme.borderRadius.sm,\r\n                      fontSize: \"12px\",\r\n                      fontFamily: \"monospace\",\r\n                      color: theme.colors.text,\r\n                    }}\r\n                  >\r\n                    {Object.entries(model.hyperparameters).map(([key, value]) => (\r\n                      <div key={key}>\r\n                        <span style={{ color: theme.colors.secondary }}>{key}</span>:{\" \"}\r\n                        <span style={{ color: theme.colors.accent }}>{JSON.stringify(value)}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </details>\r\n              </Card>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* Empty State */}\r\n      {!isLoading && !data && (\r\n        <Card glow=\"cyan\">\r\n          <div\r\n            style={{\r\n              textAlign: \"center\",\r\n              padding: theme.spacing.xl,\r\n              color: theme.colors.textMuted,\r\n            }}\r\n          >\r\n            <Database size={48} color={theme.colors.textMuted} style={{ marginBottom: theme.spacing.md }} />\r\n            <p>Click \"Refresh Status\" to load model information</p>\r\n          </div>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MLTrainingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MarketScanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MonitorDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\MorningRoutineAI.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":432,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":432,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13238,13241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13238,13241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":444,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13724,13727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13724,13727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15527,15530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15527,15530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":507,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":507,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15920,15923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15920,15923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":572,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":572,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18662,18665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18662,18665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":896,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":896,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30044,30047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30044,30047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable no-console */\n/**\n * Morning Routine with AI Scheduler + Run Now Feature\n * Schedule custom morning trading routines with AI assistance\n * Includes \"Run Now\" button to execute routines on-demand\n */\n\nimport {\n  AlertCircle,\n  Bell,\n  Brain,\n  Calendar,\n  CheckCircle,\n  Loader2,\n  Sparkles,\n  Sun,\n  XCircle,\n  Zap,\n} from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\nimport { claudeAI } from \"../lib/aiAdapter\";\nimport { fetchUnder4Scanner } from \"../lib/marketData\";\nimport { getCurrentUser, updateUser } from \"../lib/userManagement\";\nimport { theme } from \"../styles/theme\";\nimport { GlassBadge, GlassButton, GlassCard } from \"./GlassmorphicComponents\";\n\ninterface PortfolioMetrics {\n  totalValue: number;\n  dayChange: number;\n  dayChangePercent: number;\n  buyingPower: number;\n}\n\ninterface SystemCheck {\n  name: string;\n  status: \"pass\" | \"fail\" | \"warning\";\n  message: string;\n}\n\ninterface NewsItem {\n  title: string;\n  impact: \"high\" | \"medium\" | \"low\";\n  time: string;\n}\n\n// Helper function to fetch real market data\nasync function fetchLiveMarketData() {\n  try {\n    console.info(\"[MorningRoutine] 🔴 Fetching LIVE market data...\");\n    const scanner = await fetchUnder4Scanner();\n\n    console.info(\"[MorningRoutine] ✅ Received live data:\", scanner);\n\n    return {\n      candidates: scanner.candidates || [],\n      count: scanner.count || 0,\n      timestamp: new Date().toISOString(),\n    };\n  } catch (error) {\n    console.error(\"[MorningRoutine] ❌ Failed to fetch live market data:\", error);\n    return null;\n  }\n}\n\n// Helper function to format live data into markdown\nfunction formatLiveMarketData(\n  data: {\n    count: number;\n    candidates: Array<{\n      symbol: string;\n      price: number;\n      change: number;\n      changePercent: number;\n      volume: number;\n      marketCap: number;\n    }>;\n  } | null\n) {\n  if (!data || data.count === 0) {\n    return `# ❌ No Live Data Available\n\nUnable to fetch real-time market data from backend.\n\n**Troubleshooting:**\n- Check backend is running on port 8001\n- Verify /api/market/scanner/under4 endpoint\n- Check browser console for errors\n`;\n  }\n\n  return `# 🔴 LIVE MARKET DATA\n\n## Stocks Under $4 Scanner (Real-Time)\n\n**Found ${data.count} candidates meeting criteria:**\n\n${data.candidates\n  .map(\n    (stock, idx: number) => `\n### ${idx + 1}. ${stock.symbol} - **$${stock.price.toFixed(2)}**\n\n| Metric | Value |\n|--------|-------|\n| **Bid** | $${stock.bid.toFixed(2)} |\n| **Ask** | $${stock.ask.toFixed(2)} |\n| **Spread** | $${(stock.ask - stock.bid).toFixed(3)} (${(((stock.ask - stock.bid) / stock.ask) * 100).toFixed(2)}%) |\n\n**Next Steps:**\n- [ ] Check options chain liquidity (OI > 500)\n- [ ] Verify bid-ask spread on options < 10%\n- [ ] Check earnings date (avoid if within 2 weeks)\n- [ ] Analyze technical setup (support/resistance)\n\n---\n`\n  )\n  .join(\"\\n\")}\n\n**🕐 Last Updated:** ${new Date(data.timestamp).toLocaleTimeString()} ET\n\n---\n\n## ⚠️ Trading Notes\n\n- All prices are LIVE from Alpaca Paper Trading API\n- Spreads indicate liquidity (tighter = better)\n- Under $4 stocks carry higher risk - use defined-risk strategies\n- Always verify options liquidity before entering positions\n`;\n}\n\nexport default function MorningRoutineAI() {\n  const isMobile = useIsMobile();\n  const [view, setView] = useState<\"dashboard\" | \"scheduler\">(\"dashboard\");\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [loading, setLoading] = useState(false);\n\n  // \"Run Now\" feature state\n  const [isRunning, setIsRunning] = useState(false);\n  const [executionLog, setExecutionLog] = useState<string[]>([]);\n  const [showExecutionLog, setShowExecutionLog] = useState(false);\n\n  // Live data preview state\n  const [liveDataPreview, setLiveDataPreview] = useState<{\n    candidates: Array<{\n      symbol: string;\n      price: number;\n      change: number;\n      changePercent: number;\n      volume: number;\n      marketCap: number;\n      bid: number;\n      ask: number;\n    }>;\n    count: number;\n    timestamp: string;\n  } | null>(null);\n  const [isLoadingLiveData, setIsLoadingLiveData] = useState(false);\n\n  // Dashboard data\n  const [systemChecks] = useState<SystemCheck[]>([\n    { name: \"API Connection\", status: \"pass\", message: \"Connected to Alpaca\" },\n    { name: \"Market Data\", status: \"pass\", message: \"Real-time feed active\" },\n    { name: \"Account Status\", status: \"pass\", message: \"Paper trading account active\" },\n    { name: \"Risk Limits\", status: \"warning\", message: \"Daily loss at 75%\" },\n  ]);\n\n  const [portfolio, setPortfolio] = useState<PortfolioMetrics>({\n    totalValue: 0,\n    dayChange: 0,\n    dayChangePercent: 0,\n    buyingPower: 0,\n  });\n\n  const [todaysNews] = useState<NewsItem[]>([\n    { title: \"Fed Interest Rate Decision\", impact: \"high\", time: \"2:00 PM ET\" },\n    { title: \"Tech Earnings: AAPL, MSFT\", impact: \"high\", time: \"After Close\" },\n    { title: \"Unemployment Claims\", impact: \"medium\", time: \"8:30 AM ET\" },\n    { title: \"Oil Inventory Report\", impact: \"low\", time: \"10:30 AM ET\" },\n  ]);\n\n  // Scheduler data\n  const [scheduleEnabled, setScheduleEnabled] = useState(false);\n  const [scheduleTime, setScheduleTime] = useState(\"07:00\");\n  const [scheduleFrequency, setScheduleFrequency] = useState<\"daily\" | \"weekdays\" | \"custom\">(\n    \"weekdays\"\n  );\n  const [_customDays, _setCustomDays] = useState<string[]>([\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"]);\n  const [selectedSteps, setSelectedSteps] = useState<string[]>([\n    \"briefing\",\n    \"recommendations\",\n    \"portfolio\",\n  ]);\n\n  // AI Routine Builder\n  const [showAIBuilder, setShowAIBuilder] = useState(false);\n  const [aiInput, setAiInput] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // ✅ EXTENSION VERIFICATION: lucide-react\n    console.info(\"[Extension Verification] ✅ lucide-react icons loaded successfully:\", {\n      icons: [\n        \"Sun\",\n        \"Calendar\",\n        \"Sparkles\",\n        \"AlertCircle\",\n        \"CheckCircle\",\n        \"XCircle\",\n        \"Bell\",\n        \"Loader2\",\n        \"Brain\",\n        \"Zap\",\n      ],\n      status: \"FUNCTIONAL\",\n    });\n\n    const timer = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Load saved schedule from user profile\n  useEffect(() => {\n    const user = getCurrentUser();\n    if (user?.onboarding?.morningRoutine) {\n      const routine = user.onboarding.morningRoutine;\n      setScheduleEnabled(routine.enabled);\n      setScheduleTime(routine.time);\n      if (routine.briefing) setSelectedSteps((prev) => [...prev, \"briefing\"]);\n      if (routine.recommendations) setSelectedSteps((prev) => [...prev, \"recommendations\"]);\n      if (routine.portfolioReview) setSelectedSteps((prev) => [...prev, \"portfolio\"]);\n    }\n  }, []);\n\n  // Load portfolio data from user profile or API\n  useEffect(() => {\n    const loadPortfolioData = async () => {\n      try {\n        // Try to get real account data from API first\n        const response = await fetch(\"/api/proxy/api/account\");\n\n        if (response.ok) {\n          const accountData = await response.json();\n          setPortfolio({\n            totalValue: parseFloat(accountData.portfolio_value || accountData.equity || \"0\"),\n            dayChange:\n              parseFloat(accountData.equity || \"0\") - parseFloat(accountData.last_equity || \"0\"),\n            dayChangePercent:\n              accountData.equity && accountData.last_equity\n                ? ((parseFloat(accountData.equity) - parseFloat(accountData.last_equity)) /\n                    parseFloat(accountData.last_equity)) *\n                  100\n                : 0,\n            buyingPower: parseFloat(accountData.buying_power || accountData.cash || \"0\"),\n          });\n          console.info(\"[MorningRoutine] ✅ Loaded real portfolio data from API\");\n        } else {\n          // Fallback to user profile if API fails\n          const user = getCurrentUser();\n          if (user?.onboarding?.investmentAmount) {\n            const amount =\n              typeof user.onboarding.investmentAmount === \"object\"\n                ? user.onboarding.investmentAmount.value || 0\n                : user.onboarding.investmentAmount;\n\n            setPortfolio({\n              totalValue: amount,\n              dayChange: 0,\n              dayChangePercent: 0,\n              buyingPower: amount,\n            });\n            console.info(\"[MorningRoutine] ✅ Loaded portfolio data from user profile\");\n          }\n        }\n      } catch (error) {\n        console.error(\"[MorningRoutine] Failed to load portfolio data:\", error);\n      }\n    };\n\n    loadPortfolioData();\n  }, []);\n\n  // Fetch live data preview on mount\n  useEffect(() => {\n    const loadLiveDataPreview = async () => {\n      setIsLoadingLiveData(true);\n      try {\n        const data = await fetchLiveMarketData();\n        if (data) {\n          setLiveDataPreview(data);\n          console.info(\"[MorningRoutine] ✅ Loaded live data preview\");\n        }\n      } catch (error) {\n        console.error(\"[MorningRoutine] Failed to load live data preview:\", error);\n      } finally {\n        setIsLoadingLiveData(false);\n      }\n    };\n\n    loadLiveDataPreview();\n  }, []);\n\n  // Manual refresh function for live data\n  const refreshLiveData = async () => {\n    setIsLoadingLiveData(true);\n    try {\n      const data = await fetchLiveMarketData();\n      if (data) {\n        setLiveDataPreview(data);\n      }\n    } catch (error) {\n      console.error(\"[MorningRoutine] Failed to refresh live data:\", error);\n    } finally {\n      setIsLoadingLiveData(false);\n    }\n  };\n\n  const getMarketStatus = () => {\n    const now = new Date();\n    const day = now.getDay();\n    const hour = now.getHours();\n    const isWeekday = day >= 1 && day <= 5;\n    const isMarketHours = hour >= 9 && hour < 16;\n\n    return {\n      isOpen: isWeekday && isMarketHours,\n      nextEvent: isWeekday && !isMarketHours ? \"Opens at 9:30 AM ET\" : \"Closes at 4:00 PM ET\",\n      currentTime: now.toLocaleTimeString(\"en-US\"),\n    };\n  };\n\n  const runMorningChecks = async () => {\n    setLoading(true);\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n    setLoading(false);\n  };\n\n  const handleSaveSchedule = () => {\n    const user = getCurrentUser();\n    if (!user) return;\n\n    updateUser({\n      onboarding: {\n        ...user.onboarding,\n        morningRoutine: {\n          enabled: scheduleEnabled,\n          time: scheduleTime,\n          briefing: selectedSteps.includes(\"briefing\"),\n          recommendations: selectedSteps.includes(\"recommendations\"),\n          portfolioReview: selectedSteps.includes(\"portfolio\"),\n        },\n      },\n    });\n\n    alert(\"Morning routine schedule saved!\");\n    setView(\"dashboard\");\n  };\n\n  const handleGenerateAIRoutine = async () => {\n    if (!aiInput.trim()) return;\n\n    setIsGenerating(true);\n    setError(null);\n\n    try {\n      console.info(\"[MorningRoutine] Generating routine from input:\", aiInput);\n      const response = await claudeAI.generateMorningRoutine({\n        wakeTime: \"7:00 AM\",\n        marketOpen: true,\n        checkNews: true,\n        reviewPositions: true,\n        aiRecommendations: true,\n      });\n      console.info(\"[MorningRoutine] Raw AI response:\", response);\n\n      // Try to parse JSON from the response\n      let routine: {\n        title: string;\n        steps: Array<{\n          time: string;\n          task: string;\n          description: string;\n          priority: string;\n        }>;\n        summary: string;\n      } | null = null;\n      let parsed = response.trim();\n\n      // Remove markdown code blocks if present\n      parsed = parsed\n        .replace(/```json\\n?/g, \"\")\n        .replace(/```\\n?/g, \"\")\n        .trim();\n\n      // Try to extract JSON object\n      const jsonMatch = parsed.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        try {\n          routine = JSON.parse(jsonMatch[0]);\n          console.info(\"[MorningRoutine] Successfully parsed JSON:\", routine);\n        } catch (parseError) {\n          console.error(\"[MorningRoutine] JSON parse error:\", parseError);\n        }\n      }\n\n      // If we couldn't parse JSON, create a simple routine from the response\n      if (!routine) {\n        console.info(\"[MorningRoutine] Could not parse JSON, using fallback with defaults\");\n        // Just use default values and keep the selected steps\n        alert(\"AI generated a routine suggestion. Using default schedule settings.\");\n        setShowAIBuilder(false);\n        setAiInput(\"\");\n        return;\n      }\n\n      // Map AI-generated routine to schedule settings with fallbacks\n      if (routine.schedule?.startTime) {\n        console.info(\"[MorningRoutine] Setting schedule time:\", routine.schedule.startTime);\n        setScheduleTime(routine.schedule.startTime);\n      }\n\n      if (routine.schedule?.frequency) {\n        console.info(\"[MorningRoutine] Setting frequency:\", routine.schedule.frequency);\n        setScheduleFrequency(routine.schedule.frequency);\n      }\n\n      // Extract step types from AI routine\n      if (routine.steps && Array.isArray(routine.steps)) {\n        const stepTypes = routine.steps\n          .map((step: any) => step.type)\n          .filter((type: string) => availableSteps.some((s) => s.id === type));\n        console.info(\"[MorningRoutine] Setting step types:\", stepTypes);\n        if (stepTypes.length > 0) {\n          setSelectedSteps(stepTypes);\n        }\n      }\n\n      setShowAIBuilder(false);\n      setAiInput(\"\");\n      alert(`AI generated routine: \"${routine.name || \"Custom Routine\"}\"`);\n      console.info(\"[MorningRoutine] ✅ Routine generated successfully\");\n    } catch (err: any) {\n      console.error(\"[MorningRoutine] Error generating routine:\", err);\n      setError(err.message || \"Failed to generate routine. Please try again.\");\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  /**\n   * Run Now Feature - Execute the \"Under-$4 Multileg Workflow\" routine\n   */\n  const handleRunNow = async () => {\n    setIsRunning(true);\n    setShowExecutionLog(true);\n    setExecutionLog([]);\n\n    const addLog = (message: string) => {\n      setExecutionLog((prev) => [...prev, `[${new Date().toLocaleTimeString()}] ${message}`]);\n    };\n\n    try {\n      addLog(\"🚀 Starting Morning Routine: Under-$4 Multileg Workflow\");\n      addLog(\"\");\n\n      // Step 1: Market Briefing\n      addLog(\"📊 Step 1: Market Briefing\");\n      addLog(\"Analyzing pre-market conditions...\");\n\n      const briefingPrompt = `Provide a concise pre-market briefing for today. Include:\n1. S&P 500 futures direction\n2. Key market movers\n3. Important economic events today\n4. Overall market sentiment\n\nKeep it brief and actionable for a day trader.`;\n\n      const briefingResponse = await claudeAI.chat(briefingPrompt);\n      addLog(\"✅ Market Briefing Complete\");\n      addLog(briefingResponse);\n      addLog(\"\");\n\n      // Step 2: Under-$4 Multileg Scan (LIVE DATA)\n      addLog(\"🔍 Step 2: Scanning for Under-$4 Multileg Opportunities\");\n      addLog(\"🔴 Fetching LIVE market data from backend API...\");\n\n      // Fetch REAL market data\n      const liveData = await fetchLiveMarketData();\n\n      if (liveData && liveData.count > 0) {\n        addLog(`✅ Retrieved ${liveData.count} stocks with real-time prices`);\n        addLog(`Prices as of: ${new Date(liveData.timestamp).toLocaleTimeString()}`);\n\n        // Extract stock symbols for AI analysis\n        const stockSymbols = liveData.candidates.map((s: any) => s.symbol);\n        addLog(`📋 Symbols found: ${stockSymbols.join(\", \")}`);\n\n        // **CRITICAL FIX:** Pass stock data to AI for actionable analysis\n        addLog(\"🤖 Sending stock data to AI for option strategy analysis...\");\n\n        const aiAnalysisPrompt = `I found ${liveData.count} stocks under $4 trading now. Here are the details:\n\n${liveData.candidates\n  .map(\n    (stock: any) => `\n**${stock.symbol}** - $${stock.price.toFixed(2)}\n- Bid: $${stock.bid.toFixed(2)} | Ask: $${stock.ask.toFixed(2)}\n- Spread: $${(stock.ask - stock.bid).toFixed(3)} (${(((stock.ask - stock.bid) / stock.ask) * 100).toFixed(2)}%)\n`\n  )\n  .join(\"\\n\")}\n\nFor each stock, analyze:\n1. **Options Liquidity:** Check if likely to have liquid options (typical OI > 500 for under-$4 stocks)\n2. **Bid-Ask Spread Quality:** Is the ${(((liveData.candidates[0].ask - liveData.candidates[0].bid) / liveData.candidates[0].ask) * 100).toFixed(1)}% spread acceptable for options trading?\n3. **Multileg Strategy:** Recommend specific iron condor, butterfly, or credit spread strikes\n4. **Risk Assessment:** Max risk/reward for each trade\n5. **Earnings Risk:** Flag if earnings likely within 2 weeks\n\nProvide 2-3 actionable multileg trade recommendations with exact strikes and expirations.`;\n\n        const aiAnalysis = await claudeAI.chat(aiAnalysisPrompt);\n        addLog(\"✅ AI Analysis Complete:\");\n        addLog(aiAnalysis);\n      } else {\n        addLog(\"⚠️ Live data fetch failed or no stocks found - check backend connection\");\n      }\n\n      const scanResult = formatLiveMarketData(liveData);\n      addLog(\"✅ Scan Complete - Full Data Below:\");\n      addLog(scanResult);\n      addLog(\"\");\n\n      // Step 3: Portfolio Review\n      addLog(\"💼 Step 3: Portfolio Review\");\n      addLog(\"Checking overnight changes and open positions...\");\n\n      const portfolioPrompt = `Review this portfolio status:\n- Total Value: $${portfolio.totalValue.toLocaleString()}\n- Day Change: ${portfolio.dayChange >= 0 ? \"+\" : \"\"}$${portfolio.dayChange.toFixed(2)} (${portfolio.dayChangePercent.toFixed(2)}%)\n- Buying Power: $${portfolio.buyingPower.toLocaleString()}\n\nProvide:\n1. Any recommended actions for existing positions\n2. Risk assessment\n3. Available capital for new trades`;\n\n      const portfolioResponse = await claudeAI.chat(portfolioPrompt);\n      addLog(\"✅ Portfolio Review Complete\");\n      addLog(portfolioResponse);\n      addLog(\"\");\n\n      // Step 4: AI Recommendations\n      addLog(\"🤖 Step 4: AI Trade Recommendations\");\n      addLog(\"Generating personalized trade ideas...\");\n\n      const recommendationsPrompt = `Based on the market briefing and under-$4 scan, recommend 2-3 specific multileg option trades for today. For each:\n- Entry strategy (exact legs and strikes)\n- Max risk and max profit\n- Exit plan\n- Why this trade makes sense today`;\n\n      const recommendationsResponse = await claudeAI.chat(recommendationsPrompt);\n      addLog(\"✅ Recommendations Generated\");\n      addLog(recommendationsResponse);\n      addLog(\"\");\n\n      addLog(\"🎉 Morning Routine Complete!\");\n      addLog(\"Ready to trade. Good luck today! 🚀\");\n    } catch (err: any) {\n      addLog(`❌ Error: ${err.message}`);\n      addLog(\"Routine execution failed. Please try again.\");\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const toggleStep = (step: string) => {\n    setSelectedSteps((prev) =>\n      prev.includes(step) ? prev.filter((s) => s !== step) : [...prev, step]\n    );\n  };\n\n  const market = getMarketStatus();\n  const accentColor = theme.workflow.morningRoutine;\n\n  const availableSteps = [\n    { id: \"briefing\", label: \"Market Overview\", icon: \"📊\", desc: \"Pre-market analysis and news\" },\n    {\n      id: \"recommendations\",\n      label: \"AI Recommendations\",\n      icon: \"🤖\",\n      desc: \"Personalized stock picks\",\n    },\n    { id: \"portfolio\", label: \"Portfolio Review\", icon: \"💼\", desc: \"Overnight changes\" },\n    { id: \"news\", label: \"News Review\", icon: \"📰\", desc: \"Breaking market news\" },\n    { id: \"alerts\", label: \"Check Alerts\", icon: \"🔔\", desc: \"Price and volume alerts\" },\n    { id: \"scan\", label: \"Pre-Market Scan\", icon: \"🔍\", desc: \"Top movers and volume\" },\n  ];\n\n  // Dashboard View\n  if (view === \"dashboard\") {\n    return (\n      <div\n        style={{\n          height: \"100%\",\n          background: theme.background.primary,\n          padding: isMobile ? theme.spacing.md : theme.spacing.lg,\n          overflowY: \"auto\",\n        }}\n      >\n        <div\n          style={{\n            maxWidth: \"1400px\",\n            margin: \"0 auto\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: theme.spacing.lg,\n          }}\n        >\n          {/* Header */}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: isMobile ? \"column\" : \"row\",\n              alignItems: isMobile ? \"stretch\" : \"center\",\n              justifyContent: \"space-between\",\n              gap: isMobile ? theme.spacing.md : 0,\n            }}\n          >\n            <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.md }}>\n              <div\n                style={{\n                  padding: theme.spacing.md,\n                  background: `${accentColor}20`,\n                  borderRadius: theme.borderRadius.lg,\n                  boxShadow: theme.glow.teal,\n                }}\n              >\n                <Sun\n                  style={{\n                    width: isMobile ? \"24px\" : \"32px\",\n                    height: isMobile ? \"24px\" : \"32px\",\n                    color: accentColor,\n                  }}\n                />\n              </div>\n              <div>\n                <h1\n                  style={{\n                    fontSize: isMobile ? \"24px\" : \"32px\",\n                    fontWeight: \"bold\",\n                    color: theme.colors.text,\n                    margin: 0,\n                  }}\n                >\n                  Morning Routine\n                </h1>\n                <p\n                  style={{\n                    color: theme.colors.textMuted,\n                    margin: \"4px 0 0 0\",\n                    fontSize: \"14px\",\n                  }}\n                >\n                  {currentTime.toLocaleTimeString(\"en-US\")} • {market.nextEvent}\n                </p>\n              </div>\n            </div>\n\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: isMobile ? \"column\" : \"row\",\n                gap: theme.spacing.sm,\n                width: isMobile ? \"100%\" : \"auto\",\n              }}\n            >\n              {/* Run Now Button - Prominent with gradient */}\n              <GlassButton\n                onClick={handleRunNow}\n                disabled={isRunning}\n                style={{\n                  background: isRunning\n                    ? theme.colors.border\n                    : `linear-gradient(135deg, ${theme.workflow.morningRoutine} 0%, ${theme.workflow.strategyBuilder} 100%)`,\n                  boxShadow: isRunning ? \"none\" : `${theme.glow.teal}, ${theme.glow.purple}`,\n                  border: \"none\",\n                  fontWeight: \"600\",\n                  width: isMobile ? \"100%\" : \"auto\",\n                }}\n              >\n                {isRunning ? (\n                  <>\n                    <Loader2 className=\"animate-spin\" style={{ width: \"18px\", height: \"18px\" }} />\n                    Running...\n                  </>\n                ) : (\n                  <>\n                    <Zap style={{ width: \"18px\", height: \"18px\" }} />\n                    Run Now\n                  </>\n                )}\n              </GlassButton>\n\n              <GlassButton\n                onClick={() => setView(\"scheduler\")}\n                variant=\"workflow\"\n                workflowColor=\"morningRoutine\"\n                style={{ width: isMobile ? \"100%\" : \"auto\" }}\n              >\n                <Calendar style={{ width: \"18px\", height: \"18px\" }} />\n                Schedule\n              </GlassButton>\n            </div>\n          </div>\n\n          {/* Execution Log - Show when running or completed */}\n          {showExecutionLog && executionLog.length > 0 && (\n            <GlassCard>\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                  marginBottom: theme.spacing.md,\n                }}\n              >\n                <h3\n                  style={{\n                    fontSize: \"18px\",\n                    fontWeight: \"600\",\n                    color: theme.colors.text,\n                    margin: 0,\n                  }}\n                >\n                  Routine Execution Log\n                </h3>\n                <GlassButton onClick={() => setShowExecutionLog(false)} variant=\"secondary\">\n                  Hide\n                </GlassButton>\n              </div>\n              <div\n                style={{\n                  maxHeight: \"400px\",\n                  overflowY: \"auto\",\n                  padding: theme.spacing.md,\n                  background: theme.background.input,\n                  borderRadius: theme.borderRadius.md,\n                  fontFamily: \"monospace\",\n                  fontSize: \"13px\",\n                  lineHeight: \"1.6\",\n                  color: theme.colors.text,\n                  whiteSpace: \"pre-wrap\",\n                }}\n              >\n                {executionLog.map((log, idx) => (\n                  <div key={idx} style={{ marginBottom: \"4px\" }}>\n                    {log}\n                  </div>\n                ))}\n              </div>\n            </GlassCard>\n          )}\n\n          {/* Market Status */}\n          <GlassCard glow=\"teal\">\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n                marginBottom: theme.spacing.md,\n              }}\n            >\n              <h3\n                style={{ fontSize: \"18px\", fontWeight: \"600\", color: theme.colors.text, margin: 0 }}\n              >\n                Market Status\n              </h3>\n              <GlassBadge variant={market.isOpen ? \"success\" : \"warning\"}>\n                {market.isOpen ? \"OPEN\" : \"CLOSED\"}\n              </GlassBadge>\n            </div>\n            <p style={{ color: theme.colors.textMuted, margin: 0 }}>{market.nextEvent}</p>\n          </GlassCard>\n\n          {/* Live Data Preview - Under $4 Scanner */}\n          <GlassCard>\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n                marginBottom: theme.spacing.md,\n              }}\n            >\n              <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.sm }}>\n                <h3\n                  style={{\n                    fontSize: \"18px\",\n                    fontWeight: \"600\",\n                    color: theme.colors.text,\n                    margin: 0,\n                  }}\n                >\n                  Live Market Scan\n                </h3>\n                <GlassBadge variant=\"info\">Under $4</GlassBadge>\n              </div>\n              <GlassButton\n                onClick={refreshLiveData}\n                disabled={isLoadingLiveData}\n                variant=\"secondary\"\n                style={{ fontSize: \"12px\", padding: \"6px 12px\" }}\n              >\n                {isLoadingLiveData ? (\n                  <Loader2 className=\"animate-spin\" style={{ width: \"14px\", height: \"14px\" }} />\n                ) : (\n                  \"Refresh\"\n                )}\n              </GlassButton>\n            </div>\n\n            {isLoadingLiveData && !liveDataPreview ? (\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  padding: theme.spacing.xl,\n                  color: theme.colors.textMuted,\n                }}\n              >\n                <Loader2\n                  className=\"animate-spin\"\n                  style={{ width: \"24px\", height: \"24px\", marginRight: theme.spacing.sm }}\n                />\n                Loading live data...\n              </div>\n            ) : liveDataPreview && liveDataPreview.count > 0 ? (\n              <>\n                {/* Summary Stats */}\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: theme.spacing.md,\n                    marginBottom: theme.spacing.md,\n                    padding: theme.spacing.sm,\n                    background: `${theme.colors.primary}10`,\n                    borderRadius: theme.borderRadius.md,\n                    border: `1px solid ${theme.colors.primary}30`,\n                  }}\n                >\n                  <div>\n                    <p style={{ fontSize: \"12px\", color: theme.colors.textMuted, margin: 0 }}>\n                      Candidates Found\n                    </p>\n                    <p\n                      style={{\n                        fontSize: \"24px\",\n                        fontWeight: \"600\",\n                        color: theme.colors.primary,\n                        margin: 0,\n                      }}\n                    >\n                      {liveDataPreview.count}\n                    </p>\n                  </div>\n                  <div style={{ flex: 1 }}>\n                    <p style={{ fontSize: \"12px\", color: theme.colors.textMuted, margin: 0 }}>\n                      Last Updated\n                    </p>\n                    <p style={{ fontSize: \"14px\", color: theme.colors.text, margin: 0 }}>\n                      {new Date(liveDataPreview.timestamp).toLocaleTimeString()} ET\n                    </p>\n                  </div>\n                </div>\n\n                {/* Top 3 Stocks Preview */}\n                <div style={{ display: \"flex\", flexDirection: \"column\", gap: theme.spacing.sm }}>\n                  <p\n                    style={{\n                      fontSize: \"12px\",\n                      color: theme.colors.textMuted,\n                      fontWeight: \"600\",\n                      textTransform: \"uppercase\",\n                      margin: 0,\n                    }}\n                  >\n                    Top Candidates:\n                  </p>\n                  {liveDataPreview.candidates.slice(0, 3).map((stock: any, idx: number) => (\n                    <div\n                      key={idx}\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"space-between\",\n                        padding: theme.spacing.sm,\n                        background: theme.background.glass,\n                        borderRadius: theme.borderRadius.sm,\n                        border: `1px solid ${theme.colors.border}`,\n                      }}\n                    >\n                      <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.sm }}>\n                        <span\n                          style={{\n                            fontSize: \"16px\",\n                            fontWeight: \"700\",\n                            color: theme.colors.text,\n                            minWidth: \"60px\",\n                          }}\n                        >\n                          {stock.symbol}\n                        </span>\n                        <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"2px\" }}>\n                          <span style={{ fontSize: \"11px\", color: theme.colors.textMuted }}>\n                            Bid/Ask: ${stock.bid.toFixed(2)} / ${stock.ask.toFixed(2)}\n                          </span>\n                          <span style={{ fontSize: \"11px\", color: theme.colors.textMuted }}>\n                            Spread: ${(stock.ask - stock.bid).toFixed(3)} (\n                            {(((stock.ask - stock.bid) / stock.ask) * 100).toFixed(2)}%)\n                          </span>\n                        </div>\n                      </div>\n                      <span\n                        style={{\n                          fontSize: \"20px\",\n                          fontWeight: \"700\",\n                          color: theme.colors.primary,\n                        }}\n                      >\n                        ${stock.price.toFixed(2)}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n\n                {liveDataPreview.count > 3 && (\n                  <p\n                    style={{\n                      fontSize: \"12px\",\n                      color: theme.colors.textMuted,\n                      marginTop: theme.spacing.sm,\n                      textAlign: \"center\",\n                    }}\n                  >\n                    +{liveDataPreview.count - 3} more candidates • Click &quot;Run Now&quot; for\n                    full details\n                  </p>\n                )}\n              </>\n            ) : (\n              <div\n                style={{\n                  padding: theme.spacing.lg,\n                  textAlign: \"center\",\n                  color: theme.colors.textMuted,\n                  background: theme.background.glass,\n                  borderRadius: theme.borderRadius.md,\n                }}\n              >\n                <p style={{ margin: 0, fontSize: \"14px\" }}>\n                  No candidates found or unable to fetch data. Check backend connection.\n                </p>\n              </div>\n            )}\n          </GlassCard>\n\n          {/* Portfolio Snapshot */}\n          <GlassCard>\n            <h3\n              style={{\n                fontSize: \"18px\",\n                fontWeight: \"600\",\n                color: theme.colors.text,\n                marginBottom: theme.spacing.md,\n              }}\n            >\n              Portfolio Snapshot\n            </h3>\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: isMobile ? \"repeat(2, 1fr)\" : \"repeat(4, 1fr)\",\n                gap: theme.spacing.md,\n              }}\n            >\n              <div>\n                <p style={{ fontSize: \"12px\", color: theme.colors.textMuted, margin: 0 }}>\n                  Total Value\n                </p>\n                <p\n                  style={{\n                    fontSize: \"24px\",\n                    fontWeight: \"600\",\n                    color: theme.colors.text,\n                    margin: 0,\n                  }}\n                >\n                  ${portfolio.totalValue.toLocaleString()}\n                </p>\n              </div>\n              <div>\n                <p style={{ fontSize: \"12px\", color: theme.colors.textMuted, margin: 0 }}>\n                  Day Change\n                </p>\n                <p\n                  style={{\n                    fontSize: \"24px\",\n                    fontWeight: \"600\",\n                    color: portfolio.dayChange >= 0 ? theme.colors.primary : theme.colors.danger,\n                    margin: 0,\n                  }}\n                >\n                  {portfolio.dayChange >= 0 ? \"+\" : \"\"}${portfolio.dayChange.toFixed(2)}\n                </p>\n              </div>\n              <div>\n                <p style={{ fontSize: \"12px\", color: theme.colors.textMuted, margin: 0 }}>Day %</p>\n                <p\n                  style={{\n                    fontSize: \"24px\",\n                    fontWeight: \"600\",\n                    color:\n                      portfolio.dayChangePercent >= 0 ? theme.colors.primary : theme.colors.danger,\n                    margin: 0,\n                  }}\n                >\n                  {portfolio.dayChangePercent >= 0 ? \"+\" : \"\"}\n                  {portfolio.dayChangePercent.toFixed(2)}%\n                </p>\n              </div>\n              <div>\n                <p style={{ fontSize: \"12px\", color: theme.colors.textMuted, margin: 0 }}>\n                  Buying Power\n                </p>\n                <p\n                  style={{\n                    fontSize: \"24px\",\n                    fontWeight: \"600\",\n                    color: theme.colors.text,\n                    margin: 0,\n                  }}\n                >\n                  ${portfolio.buyingPower.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </GlassCard>\n\n          {/* System Checks */}\n          <GlassCard>\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n                marginBottom: theme.spacing.md,\n              }}\n            >\n              <h3\n                style={{ fontSize: \"18px\", fontWeight: \"600\", color: theme.colors.text, margin: 0 }}\n              >\n                System Checks\n              </h3>\n              <GlassButton onClick={runMorningChecks} disabled={loading}>\n                {loading ? (\n                  <Loader2 className=\"animate-spin\" style={{ width: \"18px\", height: \"18px\" }} />\n                ) : (\n                  \"Run Checks\"\n                )}\n              </GlassButton>\n            </div>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: theme.spacing.sm }}>\n              {systemChecks.map((check, idx) => (\n                <div\n                  key={idx}\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    padding: theme.spacing.sm,\n                    background: `${\n                      check.status === \"pass\"\n                        ? theme.colors.primary\n                        : check.status === \"warning\"\n                          ? theme.colors.warning\n                          : theme.colors.danger\n                    }10`,\n                    border: `1px solid ${\n                      check.status === \"pass\"\n                        ? theme.colors.primary\n                        : check.status === \"warning\"\n                          ? theme.colors.warning\n                          : theme.colors.danger\n                    }30`,\n                    borderRadius: theme.borderRadius.md,\n                  }}\n                >\n                  <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.sm }}>\n                    {check.status === \"pass\" && (\n                      <CheckCircle\n                        style={{ width: \"18px\", height: \"18px\", color: theme.colors.primary }}\n                      />\n                    )}\n                    {check.status === \"warning\" && (\n                      <AlertCircle\n                        style={{ width: \"18px\", height: \"18px\", color: theme.colors.warning }}\n                      />\n                    )}\n                    {check.status === \"fail\" && (\n                      <XCircle\n                        style={{ width: \"18px\", height: \"18px\", color: theme.colors.danger }}\n                      />\n                    )}\n                    <span style={{ color: theme.colors.text, fontWeight: \"600\" }}>\n                      {check.name}\n                    </span>\n                  </div>\n                  <span style={{ color: theme.colors.textMuted, fontSize: \"14px\" }}>\n                    {check.message}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n\n          {/* Today's News */}\n          <GlassCard>\n            <h3\n              style={{\n                fontSize: \"18px\",\n                fontWeight: \"600\",\n                color: theme.colors.text,\n                marginBottom: theme.spacing.md,\n              }}\n            >\n              Today&apos;s Market Events\n            </h3>\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: theme.spacing.sm }}>\n              {todaysNews.map((news, idx) => (\n                <div\n                  key={idx}\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    padding: theme.spacing.sm,\n                    background: theme.background.glass,\n                    borderRadius: theme.borderRadius.sm,\n                  }}\n                >\n                  <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.sm }}>\n                    <GlassBadge\n                      variant={\n                        news.impact === \"high\"\n                          ? \"danger\"\n                          : news.impact === \"medium\"\n                            ? \"warning\"\n                            : \"info\"\n                      }\n                    >\n                      {news.impact}\n                    </GlassBadge>\n                    <span style={{ color: theme.colors.text }}>{news.title}</span>\n                  </div>\n                  <span style={{ color: theme.colors.textMuted, fontSize: \"14px\" }}>\n                    {news.time}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n        </div>\n      </div>\n    );\n  }\n\n  // Scheduler View\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        background: theme.background.primary,\n        padding: isMobile ? theme.spacing.md : theme.spacing.lg,\n        overflowY: \"auto\",\n      }}\n    >\n      <div\n        style={{\n          maxWidth: \"900px\",\n          margin: \"0 auto\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: theme.spacing.lg,\n        }}\n      >\n        {/* Header */}\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: isMobile ? \"column\" : \"row\",\n            alignItems: isMobile ? \"stretch\" : \"center\",\n            justifyContent: \"space-between\",\n            gap: isMobile ? theme.spacing.md : 0,\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.md }}>\n            <div\n              style={{\n                padding: theme.spacing.md,\n                background: `${accentColor}20`,\n                borderRadius: theme.borderRadius.lg,\n                boxShadow: theme.glow.teal,\n              }}\n            >\n              <Calendar\n                style={{\n                  width: isMobile ? \"24px\" : \"32px\",\n                  height: isMobile ? \"24px\" : \"32px\",\n                  color: accentColor,\n                }}\n              />\n            </div>\n            <div>\n              <h1\n                style={{\n                  fontSize: isMobile ? \"24px\" : \"32px\",\n                  fontWeight: \"bold\",\n                  color: theme.colors.text,\n                  margin: 0,\n                }}\n              >\n                Morning Routine Scheduler\n              </h1>\n              <p\n                style={{\n                  color: theme.colors.textMuted,\n                  margin: \"4px 0 0 0\",\n                  fontSize: \"14px\",\n                }}\n              >\n                Automate your daily trading routine\n              </p>\n            </div>\n          </div>\n\n          <GlassButton\n            onClick={() => setView(\"dashboard\")}\n            variant=\"secondary\"\n            style={{ width: isMobile ? \"100%\" : \"auto\" }}\n          >\n            Back to Dashboard\n          </GlassButton>\n        </div>\n\n        {/* Enable Toggle */}\n        <GlassCard>\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n            <div>\n              <h3\n                style={{\n                  fontSize: \"18px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.text,\n                  margin: `0 0 ${theme.spacing.xs} 0`,\n                }}\n              >\n                Enable Morning Routine\n              </h3>\n              <p style={{ color: theme.colors.textMuted, margin: 0, fontSize: \"14px\" }}>\n                Get daily briefings and recommendations at your scheduled time\n              </p>\n            </div>\n            <button\n              onClick={() => setScheduleEnabled(!scheduleEnabled)}\n              style={{\n                width: \"56px\",\n                height: \"32px\",\n                borderRadius: \"16px\",\n                border: \"none\",\n                background: scheduleEnabled ? theme.colors.primary : theme.colors.border,\n                cursor: \"pointer\",\n                position: \"relative\",\n                transition: theme.transitions.fast,\n              }}\n            >\n              <div\n                style={{\n                  width: \"24px\",\n                  height: \"24px\",\n                  borderRadius: \"50%\",\n                  background: \"#ffffff\",\n                  position: \"absolute\",\n                  top: \"4px\",\n                  left: scheduleEnabled ? \"28px\" : \"4px\",\n                  transition: theme.transitions.fast,\n                }}\n              />\n            </button>\n          </div>\n        </GlassCard>\n\n        {scheduleEnabled && (\n          <>\n            {/* Schedule Time */}\n            <GlassCard>\n              <h3\n                style={{\n                  fontSize: \"18px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.text,\n                  marginBottom: theme.spacing.md,\n                }}\n              >\n                Schedule Time\n              </h3>\n              <input\n                type=\"time\"\n                value={scheduleTime}\n                onChange={(e) => setScheduleTime(e.target.value)}\n                style={{\n                  width: \"100%\",\n                  padding: theme.spacing.md,\n                  fontSize: \"24px\",\n                  fontWeight: \"600\",\n                  textAlign: \"center\",\n                  background: theme.background.input,\n                  border: `1px solid ${theme.colors.border}`,\n                  borderRadius: theme.borderRadius.md,\n                  color: theme.colors.text,\n                  outline: \"none\",\n                }}\n              />\n            </GlassCard>\n\n            {/* Frequency */}\n            <GlassCard>\n              <h3\n                style={{\n                  fontSize: \"18px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.text,\n                  marginBottom: theme.spacing.md,\n                }}\n              >\n                Frequency\n              </h3>\n              <div\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(3, 1fr)\",\n                  gap: theme.spacing.sm,\n                }}\n              >\n                {([\"daily\", \"weekdays\", \"custom\"] as const).map((freq) => (\n                  <button\n                    key={freq}\n                    onClick={() => setScheduleFrequency(freq)}\n                    style={{\n                      padding: theme.spacing.md,\n                      background:\n                        scheduleFrequency === freq ? `${accentColor}20` : theme.background.glass,\n                      border: `2px solid ${scheduleFrequency === freq ? accentColor : theme.colors.border}`,\n                      borderRadius: theme.borderRadius.md,\n                      color: theme.colors.text,\n                      fontWeight: \"600\",\n                      cursor: \"pointer\",\n                      textTransform: \"capitalize\",\n                      transition: theme.transitions.fast,\n                    }}\n                  >\n                    {freq}\n                  </button>\n                ))}\n              </div>\n            </GlassCard>\n\n            {/* Routine Steps */}\n            <GlassCard>\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                  marginBottom: theme.spacing.md,\n                }}\n              >\n                <h3\n                  style={{\n                    fontSize: \"18px\",\n                    fontWeight: \"600\",\n                    color: theme.colors.text,\n                    margin: 0,\n                  }}\n                >\n                  Routine Steps\n                </h3>\n                <GlassButton\n                  onClick={() => setShowAIBuilder(!showAIBuilder)}\n                  variant=\"workflow\"\n                  workflowColor=\"strategyBuilder\"\n                >\n                  <Sparkles style={{ width: \"16px\", height: \"16px\" }} />\n                  AI Builder\n                </GlassButton>\n              </div>\n\n              {showAIBuilder && (\n                <div\n                  style={{\n                    marginBottom: theme.spacing.md,\n                    padding: theme.spacing.md,\n                    background: `${accentColor}10`,\n                    borderRadius: theme.borderRadius.md,\n                  }}\n                >\n                  <p\n                    style={{\n                      color: theme.colors.textMuted,\n                      margin: `0 0 ${theme.spacing.sm} 0`,\n                      fontSize: \"14px\",\n                    }}\n                  >\n                    Describe your ideal morning routine:\n                  </p>\n                  <textarea\n                    value={aiInput}\n                    onChange={(e) => setAiInput(e.target.value)}\n                    placeholder=\"Example: Show me top 3 pre-market movers, check news on my positions, alert me if any earnings today\"\n                    disabled={isGenerating}\n                    style={{\n                      width: \"100%\",\n                      minHeight: \"80px\",\n                      padding: theme.spacing.sm,\n                      background: theme.background.input,\n                      border: `1px solid ${theme.colors.border}`,\n                      borderRadius: theme.borderRadius.sm,\n                      color: theme.colors.text,\n                      fontSize: \"14px\",\n                      fontFamily: \"inherit\",\n                      resize: \"vertical\",\n                      outline: \"none\",\n                      marginBottom: theme.spacing.sm,\n                    }}\n                  />\n                  <GlassButton\n                    onClick={handleGenerateAIRoutine}\n                    disabled={!aiInput.trim() || isGenerating}\n                  >\n                    {isGenerating ? (\n                      <>\n                        <Loader2\n                          className=\"animate-spin\"\n                          style={{ width: \"16px\", height: \"16px\" }}\n                        />\n                        Generating...\n                      </>\n                    ) : (\n                      <>\n                        <Brain style={{ width: \"16px\", height: \"16px\" }} />\n                        Generate Routine\n                      </>\n                    )}\n                  </GlassButton>\n                  {error && (\n                    <p\n                      style={{\n                        color: theme.colors.danger,\n                        margin: `${theme.spacing.sm} 0 0 0`,\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      {error}\n                    </p>\n                  )}\n                </div>\n              )}\n\n              <div\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(2, 1fr)\",\n                  gap: theme.spacing.sm,\n                }}\n              >\n                {availableSteps.map((step) => (\n                  <button\n                    key={step.id}\n                    onClick={() => toggleStep(step.id)}\n                    style={{\n                      padding: theme.spacing.md,\n                      background: selectedSteps.includes(step.id)\n                        ? `${accentColor}20`\n                        : theme.background.glass,\n                      border: `2px solid ${selectedSteps.includes(step.id) ? accentColor : theme.colors.border}`,\n                      borderRadius: theme.borderRadius.md,\n                      cursor: \"pointer\",\n                      textAlign: \"left\",\n                      transition: theme.transitions.fast,\n                    }}\n                  >\n                    <div style={{ fontSize: \"24px\", marginBottom: theme.spacing.xs }}>\n                      {step.icon}\n                    </div>\n                    <div\n                      style={{ color: theme.colors.text, fontWeight: \"600\", marginBottom: \"4px\" }}\n                    >\n                      {step.label}\n                    </div>\n                    <div style={{ color: theme.colors.textMuted, fontSize: \"12px\" }}>\n                      {step.desc}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </GlassCard>\n\n            {/* Preview */}\n            <GlassCard\n              style={{ background: `${accentColor}10`, border: `1px solid ${accentColor}40` }}\n            >\n              <h3\n                style={{\n                  fontSize: \"18px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.text,\n                  marginBottom: theme.spacing.md,\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: theme.spacing.sm,\n                }}\n              >\n                <Bell style={{ width: \"20px\", height: \"20px\", color: accentColor }} />\n                Morning Briefing Preview\n              </h3>\n              <div\n                style={{\n                  padding: theme.spacing.md,\n                  background: theme.background.glass,\n                  borderRadius: theme.borderRadius.md,\n                }}\n              >\n                <p\n                  style={{\n                    color: theme.colors.text,\n                    fontWeight: \"600\",\n                    marginBottom: theme.spacing.sm,\n                  }}\n                >\n                  Good morning! Here&apos;s your {scheduleTime} briefing:\n                </p>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    gap: theme.spacing.xs,\n                    color: theme.colors.textMuted,\n                    fontSize: \"14px\",\n                  }}\n                >\n                  {selectedSteps.map((stepId) => {\n                    const step = availableSteps.find((s) => s.id === stepId);\n                    return step ? (\n                      <div key={stepId}>\n                        {step.icon} {step.label}\n                      </div>\n                    ) : null;\n                  })}\n                </div>\n              </div>\n            </GlassCard>\n\n            {/* Save Button */}\n            <GlassButton onClick={handleSaveSchedule}>\n              <CheckCircle style={{ width: \"18px\", height: \"18px\" }} />\n              Save Morning Routine\n            </GlassButton>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\NewsArticleList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\NewsReview.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchNews' and 'searchSymbol'. Either include them or remove the dependency array.","line":156,"column":6,"nodeType":"ArrayExpression","endLine":156,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchNews, searchSymbol]","fix":{"range":[4947,4949],"text":"[fetchNews, searchSymbol]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":654,"column":21,"nodeType":"JSXOpeningElement","endLine":667,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\OptionsGreeksDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\OrderHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\PatternBacktestDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":75}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Card, Button } from \"./ui\";\r\nimport { theme } from \"../styles/theme\";\r\nimport { showError, showSuccess } from \"../lib/toast\";\r\nimport { TrendingUp, TrendingDown, BarChart3, Target, DollarSign, Calendar } from \"lucide-react\";\r\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\r\n\r\ninterface PatternPerformance {\r\n  pattern_type: string;\r\n  total_occurrences: number;\r\n  successful_trades: number;\r\n  failed_trades: number;\r\n  win_rate: number;\r\n  avg_roi: number;\r\n  avg_hold_days: number;\r\n  best_roi: number;\r\n  worst_roi: number;\r\n  last_seen: string;\r\n}\r\n\r\ninterface BacktestResult {\r\n  symbol: string;\r\n  start_date: string;\r\n  end_date: string;\r\n  patterns: PatternPerformance[];\r\n  total_patterns: number;\r\n  overall_win_rate: number;\r\n  overall_avg_roi: number;\r\n}\r\n\r\nexport default function PatternBacktestDashboard() {\r\n  const isMobile = useIsMobile();\r\n  const [symbol, setSymbol] = useState(\"SPY\");\r\n  const [lookbackDays, setLookbackDays] = useState(365);\r\n  const [minConfidence, setMinConfidence] = useState(0.7);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [result, setResult] = useState<BacktestResult | null>(null);\r\n\r\n  const runBacktest = async () => {\r\n    if (!symbol.trim()) {\r\n      showError(\"Please enter a symbol\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setResult(null);\r\n\r\n    try {\r\n      const res = await fetch(\r\n        `/api/proxy/api/ml/backtest-patterns?symbol=${symbol.toUpperCase()}&lookback_days=${lookbackDays}&min_confidence=${minConfidence}`,\r\n        { method: \"POST\" }\r\n      );\r\n\r\n      if (!res.ok) {\r\n        throw new Error(`Backtest failed: ${res.statusText}`);\r\n      }\r\n\r\n      const data = await res.json();\r\n      setResult(data);\r\n      showSuccess(`Backtest complete! Found ${data.total_patterns} patterns.`);\r\n    } catch (err: unknown) {\r\n      const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\r\n      showError(`Backtest failed: ${errorMessage}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getWinRateColor = (winRate: number): string => {\r\n    if (winRate >= 70) return theme.colors.success;\r\n    if (winRate >= 50) return theme.colors.warning;\r\n    return theme.colors.error;\r\n  };\r\n\r\n  const getROIColor = (roi: number): string => {\r\n    if (roi >= 5) return theme.colors.success;\r\n    if (roi >= 0) return theme.colors.warning;\r\n    return theme.colors.error;\r\n  };\r\n\r\n  const formatPatternName = (pattern: string): string => {\r\n    return pattern\r\n      .split(\"_\")\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(\" \");\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: isMobile ? theme.spacing.md : theme.spacing.lg }}>\r\n      {/* Header */}\r\n      <div style={{ marginBottom: theme.spacing.lg }}>\r\n        <h2\r\n          style={{\r\n            margin: 0,\r\n            fontSize: isMobile ? \"24px\" : \"32px\",\r\n            fontWeight: \"700\",\r\n            color: theme.colors.text,\r\n            textShadow: theme.glow.green,\r\n            marginBottom: theme.spacing.xs,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            gap: theme.spacing.sm,\r\n          }}\r\n        >\r\n          <BarChart3 size={32} color={theme.colors.primary} />\r\n          Pattern Backtesting Dashboard\r\n        </h2>\r\n        <p\r\n          style={{\r\n            margin: 0,\r\n            fontSize: \"14px\",\r\n            color: theme.colors.textMuted,\r\n          }}\r\n        >\r\n          Analyze historical performance of detected chart patterns\r\n        </p>\r\n      </div>\r\n\r\n      {/* Configuration Card */}\r\n      <Card glow=\"green\" style={{ marginBottom: theme.spacing.lg }}>\r\n        <h3\r\n          style={{\r\n            fontSize: isMobile ? \"18px\" : \"20px\",\r\n            fontWeight: \"600\",\r\n            color: theme.colors.text,\r\n            marginBottom: theme.spacing.lg,\r\n          }}\r\n        >\r\n          Backtest Configuration\r\n        </h3>\r\n\r\n        <div\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(3, 1fr)\",\r\n            gap: theme.spacing.md,\r\n            marginBottom: theme.spacing.lg,\r\n          }}\r\n        >\r\n          {/* Symbol Input */}\r\n          <div>\r\n            <label\r\n              style={{\r\n                display: \"block\",\r\n                fontSize: \"12px\",\r\n                color: theme.colors.textMuted,\r\n                marginBottom: theme.spacing.xs,\r\n                textTransform: \"uppercase\",\r\n                letterSpacing: \"0.5px\",\r\n              }}\r\n            >\r\n              Symbol\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={symbol}\r\n              onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n              disabled={isLoading}\r\n              placeholder=\"SPY\"\r\n              style={{\r\n                width: \"100%\",\r\n                padding: \"12px\",\r\n                background: \"rgba(15, 23, 42, 0.5)\",\r\n                border: `1px solid ${theme.colors.border}`,\r\n                borderRadius: theme.borderRadius.md,\r\n                color: theme.colors.text,\r\n                fontSize: \"14px\",\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          {/* Lookback Days */}\r\n          <div>\r\n            <label\r\n              style={{\r\n                display: \"block\",\r\n                fontSize: \"12px\",\r\n                color: theme.colors.textMuted,\r\n                marginBottom: theme.spacing.xs,\r\n                textTransform: \"uppercase\",\r\n                letterSpacing: \"0.5px\",\r\n              }}\r\n            >\r\n              Lookback Days: {lookbackDays}\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"30\"\r\n              max=\"730\"\r\n              step=\"30\"\r\n              value={lookbackDays}\r\n              onChange={(e) => setLookbackDays(Number(e.target.value))}\r\n              disabled={isLoading}\r\n              style={{\r\n                width: \"100%\",\r\n                height: \"8px\",\r\n                borderRadius: \"4px\",\r\n                outline: \"none\",\r\n                opacity: isLoading ? 0.5 : 1,\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                fontSize: \"11px\",\r\n                color: theme.colors.textMuted,\r\n                marginTop: theme.spacing.xs,\r\n              }}\r\n            >\r\n              30 days - 2 years\r\n            </div>\r\n          </div>\r\n\r\n          {/* Min Confidence */}\r\n          <div>\r\n            <label\r\n              style={{\r\n                display: \"block\",\r\n                fontSize: \"12px\",\r\n                color: theme.colors.textMuted,\r\n                marginBottom: theme.spacing.xs,\r\n                textTransform: \"uppercase\",\r\n                letterSpacing: \"0.5px\",\r\n              }}\r\n            >\r\n              Min Confidence: {(minConfidence * 100).toFixed(0)}%\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0.5\"\r\n              max=\"0.95\"\r\n              step=\"0.05\"\r\n              value={minConfidence}\r\n              onChange={(e) => setMinConfidence(Number(e.target.value))}\r\n              disabled={isLoading}\r\n              style={{\r\n                width: \"100%\",\r\n                height: \"8px\",\r\n                borderRadius: \"4px\",\r\n                outline: \"none\",\r\n                opacity: isLoading ? 0.5 : 1,\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                fontSize: \"11px\",\r\n                color: theme.colors.textMuted,\r\n                marginTop: theme.spacing.xs,\r\n              }}\r\n            >\r\n              50% - 95%\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Button\r\n          onClick={runBacktest}\r\n          loading={isLoading}\r\n          disabled={isLoading || !symbol.trim()}\r\n          variant=\"primary\"\r\n          style={{ width: isMobile ? \"100%\" : \"auto\" }}\r\n        >\r\n          {isLoading ? \"Running Backtest...\" : \"Run Pattern Backtest\"}\r\n        </Button>\r\n      </Card>\r\n\r\n      {/* Results */}\r\n      {result && (\r\n        <>\r\n          {/* Summary Card */}\r\n          <Card glow=\"cyan\" style={{ marginBottom: theme.spacing.lg }}>\r\n            <h3\r\n              style={{\r\n                fontSize: isMobile ? \"18px\" : \"20px\",\r\n                fontWeight: \"600\",\r\n                color: theme.colors.text,\r\n                marginBottom: theme.spacing.lg,\r\n              }}\r\n            >\r\n              📊 Backtest Summary - {result.symbol}\r\n            </h3>\r\n\r\n            <div\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(4, 1fr)\",\r\n                gap: theme.spacing.md,\r\n              }}\r\n            >\r\n              {/* Total Patterns */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: \"rgba(6, 182, 212, 0.1)\",\r\n                  border: `1px solid ${theme.colors.secondary}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.xs,\r\n                  }}\r\n                >\r\n                  TOTAL PATTERNS\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"32px\",\r\n                    fontWeight: \"700\",\r\n                    color: theme.colors.secondary,\r\n                  }}\r\n                >\r\n                  {result.total_patterns}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Overall Win Rate */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: `rgba(${result.overall_win_rate >= 50 ? \"16, 185, 129\" : \"239, 68, 68\"}, 0.1)`,\r\n                  border: `1px solid ${getWinRateColor(result.overall_win_rate)}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.xs,\r\n                  }}\r\n                >\r\n                  WIN RATE\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"32px\",\r\n                    fontWeight: \"700\",\r\n                    color: getWinRateColor(result.overall_win_rate),\r\n                  }}\r\n                >\r\n                  {result.overall_win_rate.toFixed(1)}%\r\n                </div>\r\n              </div>\r\n\r\n              {/* Overall Avg ROI */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: `rgba(${result.overall_avg_roi >= 0 ? \"16, 185, 129\" : \"239, 68, 68\"}, 0.1)`,\r\n                  border: `1px solid ${getROIColor(result.overall_avg_roi)}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.xs,\r\n                  }}\r\n                >\r\n                  AVG ROI\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"32px\",\r\n                    fontWeight: \"700\",\r\n                    color: getROIColor(result.overall_avg_roi),\r\n                  }}\r\n                >\r\n                  {result.overall_avg_roi >= 0 ? \"+\" : \"\"}\r\n                  {result.overall_avg_roi.toFixed(2)}%\r\n                </div>\r\n              </div>\r\n\r\n              {/* Date Range */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: \"rgba(139, 92, 246, 0.1)\",\r\n                  border: `1px solid ${theme.colors.accent}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.xs,\r\n                  }}\r\n                >\r\n                  DATE RANGE\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"11px\",\r\n                    fontWeight: \"600\",\r\n                    color: theme.colors.accent,\r\n                  }}\r\n                >\r\n                  {new Date(result.start_date).toLocaleDateString()}\r\n                  <br />→{\" \"}\r\n                  {new Date(result.end_date).toLocaleDateString()}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n\r\n          {/* Pattern Performance Table */}\r\n          <Card glow=\"purple\" style={{ marginBottom: theme.spacing.lg }}>\r\n            <h3\r\n              style={{\r\n                fontSize: isMobile ? \"18px\" : \"20px\",\r\n                fontWeight: \"600\",\r\n                color: theme.colors.text,\r\n                marginBottom: theme.spacing.lg,\r\n              }}\r\n            >\r\n              📈 Pattern Performance Breakdown\r\n            </h3>\r\n\r\n            {result.patterns.length === 0 ? (\r\n              <div\r\n                style={{\r\n                  textAlign: \"center\",\r\n                  padding: theme.spacing.xl,\r\n                  color: theme.colors.textMuted,\r\n                }}\r\n              >\r\n                No patterns detected during the backtest period.\r\n                <br />\r\n                Try adjusting the lookback days or minimum confidence.\r\n              </div>\r\n            ) : (\r\n              <div style={{ overflowX: \"auto\" }}>\r\n                <table\r\n                  style={{\r\n                    width: \"100%\",\r\n                    borderCollapse: \"collapse\",\r\n                    fontSize: isMobile ? \"12px\" : \"14px\",\r\n                  }}\r\n                >\r\n                  <thead>\r\n                    <tr\r\n                      style={{\r\n                        borderBottom: `1px solid ${theme.colors.border}`,\r\n                      }}\r\n                    >\r\n                      <th\r\n                        style={{\r\n                          padding: theme.spacing.sm,\r\n                          textAlign: \"left\",\r\n                          color: theme.colors.textMuted,\r\n                          fontWeight: \"600\",\r\n                          textTransform: \"uppercase\",\r\n                          fontSize: \"11px\",\r\n                        }}\r\n                      >\r\n                        Pattern\r\n                      </th>\r\n                      <th\r\n                        style={{\r\n                          padding: theme.spacing.sm,\r\n                          textAlign: \"center\",\r\n                          color: theme.colors.textMuted,\r\n                          fontWeight: \"600\",\r\n                          textTransform: \"uppercase\",\r\n                          fontSize: \"11px\",\r\n                        }}\r\n                      >\r\n                        Count\r\n                      </th>\r\n                      <th\r\n                        style={{\r\n                          padding: theme.spacing.sm,\r\n                          textAlign: \"center\",\r\n                          color: theme.colors.textMuted,\r\n                          fontWeight: \"600\",\r\n                          textTransform: \"uppercase\",\r\n                          fontSize: \"11px\",\r\n                        }}\r\n                      >\r\n                        Win/Loss\r\n                      </th>\r\n                      <th\r\n                        style={{\r\n                          padding: theme.spacing.sm,\r\n                          textAlign: \"center\",\r\n                          color: theme.colors.textMuted,\r\n                          fontWeight: \"600\",\r\n                          textTransform: \"uppercase\",\r\n                          fontSize: \"11px\",\r\n                        }}\r\n                      >\r\n                        Win Rate\r\n                      </th>\r\n                      <th\r\n                        style={{\r\n                          padding: theme.spacing.sm,\r\n                          textAlign: \"center\",\r\n                          color: theme.colors.textMuted,\r\n                          fontWeight: \"600\",\r\n                          textTransform: \"uppercase\",\r\n                          fontSize: \"11px\",\r\n                        }}\r\n                      >\r\n                        Avg ROI\r\n                      </th>\r\n                      <th\r\n                        style={{\r\n                          padding: theme.spacing.sm,\r\n                          textAlign: \"center\",\r\n                          color: theme.colors.textMuted,\r\n                          fontWeight: \"600\",\r\n                          textTransform: \"uppercase\",\r\n                          fontSize: \"11px\",\r\n                        }}\r\n                      >\r\n                        Best/Worst\r\n                      </th>\r\n                      <th\r\n                        style={{\r\n                          padding: theme.spacing.sm,\r\n                          textAlign: \"center\",\r\n                          color: theme.colors.textMuted,\r\n                          fontWeight: \"600\",\r\n                          textTransform: \"uppercase\",\r\n                          fontSize: \"11px\",\r\n                        }}\r\n                      >\r\n                        Avg Hold\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {result.patterns\r\n                      .sort((a, b) => b.win_rate - a.win_rate)\r\n                      .map((pattern, idx) => (\r\n                        <tr\r\n                          key={idx}\r\n                          style={{\r\n                            borderBottom: `1px solid ${theme.colors.border}`,\r\n                          }}\r\n                        >\r\n                          {/* Pattern Name */}\r\n                          <td\r\n                            style={{\r\n                              padding: theme.spacing.sm,\r\n                              color: theme.colors.text,\r\n                              fontWeight: \"600\",\r\n                            }}\r\n                          >\r\n                            {formatPatternName(pattern.pattern_type)}\r\n                          </td>\r\n\r\n                          {/* Count */}\r\n                          <td\r\n                            style={{\r\n                              padding: theme.spacing.sm,\r\n                              textAlign: \"center\",\r\n                              color: theme.colors.secondary,\r\n                              fontWeight: \"600\",\r\n                            }}\r\n                          >\r\n                            {pattern.total_occurrences}\r\n                          </td>\r\n\r\n                          {/* Win/Loss */}\r\n                          <td\r\n                            style={{\r\n                              padding: theme.spacing.sm,\r\n                              textAlign: \"center\",\r\n                            }}\r\n                          >\r\n                            <span style={{ color: theme.colors.success }}>\r\n                              {pattern.successful_trades}\r\n                            </span>\r\n                            {\" / \"}\r\n                            <span style={{ color: theme.colors.error }}>\r\n                              {pattern.failed_trades}\r\n                            </span>\r\n                          </td>\r\n\r\n                          {/* Win Rate */}\r\n                          <td\r\n                            style={{\r\n                              padding: theme.spacing.sm,\r\n                              textAlign: \"center\",\r\n                            }}\r\n                          >\r\n                            <div\r\n                              style={{\r\n                                display: \"inline-block\",\r\n                                padding: \"4px 12px\",\r\n                                background: `rgba(${pattern.win_rate >= 50 ? \"16, 185, 129\" : \"239, 68, 68\"}, 0.2)`,\r\n                                border: `1px solid ${getWinRateColor(pattern.win_rate)}`,\r\n                                borderRadius: theme.borderRadius.sm,\r\n                                color: getWinRateColor(pattern.win_rate),\r\n                                fontWeight: \"700\",\r\n                              }}\r\n                            >\r\n                              {pattern.win_rate.toFixed(1)}%\r\n                            </div>\r\n                          </td>\r\n\r\n                          {/* Avg ROI */}\r\n                          <td\r\n                            style={{\r\n                              padding: theme.spacing.sm,\r\n                              textAlign: \"center\",\r\n                              color: getROIColor(pattern.avg_roi),\r\n                              fontWeight: \"700\",\r\n                            }}\r\n                          >\r\n                            {pattern.avg_roi >= 0 ? \"+\" : \"\"}\r\n                            {pattern.avg_roi.toFixed(2)}%\r\n                          </td>\r\n\r\n                          {/* Best/Worst */}\r\n                          <td\r\n                            style={{\r\n                              padding: theme.spacing.sm,\r\n                              textAlign: \"center\",\r\n                              fontSize: \"12px\",\r\n                            }}\r\n                          >\r\n                            <div style={{ color: theme.colors.success }}>\r\n                              +{pattern.best_roi.toFixed(1)}%\r\n                            </div>\r\n                            <div style={{ color: theme.colors.error }}>\r\n                              {pattern.worst_roi.toFixed(1)}%\r\n                            </div>\r\n                          </td>\r\n\r\n                          {/* Avg Hold */}\r\n                          <td\r\n                            style={{\r\n                              padding: theme.spacing.sm,\r\n                              textAlign: \"center\",\r\n                              color: theme.colors.textMuted,\r\n                            }}\r\n                          >\r\n                            {pattern.avg_hold_days.toFixed(1)}d\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </Card>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\PortfolioOptimizer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":83},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Position' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Card, Button } from \"./ui\";\r\nimport { theme } from \"../styles/theme\";\r\nimport { showError, showSuccess } from \"../lib/toast\";\r\nimport { Target, TrendingUp, Shield, PieChart, AlertTriangle, Sparkles, DollarSign } from \"lucide-react\";\r\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\r\n\r\ninterface Position {\r\n  symbol: string;\r\n  shares: number;\r\n  current_price: number;\r\n  market_value: number;\r\n  weight: number;\r\n}\r\n\r\ninterface OptimizationSuggestion {\r\n  symbol: string;\r\n  action: \"buy\" | \"sell\" | \"hold\";\r\n  current_shares: number;\r\n  suggested_shares: number;\r\n  shares_delta: number;\r\n  current_weight: number;\r\n  target_weight: number;\r\n  reasoning: string;\r\n  expected_return: number;\r\n  risk_score: number;\r\n}\r\n\r\ninterface PortfolioMetrics {\r\n  total_value: number;\r\n  expected_return: number;\r\n  volatility: number;\r\n  sharpe_ratio: number;\r\n  diversification_score: number;\r\n  risk_level: \"low\" | \"moderate\" | \"high\";\r\n}\r\n\r\ninterface OptimizationResult {\r\n  current_portfolio: PortfolioMetrics;\r\n  optimized_portfolio: PortfolioMetrics;\r\n  suggestions: OptimizationSuggestion[];\r\n  risk_adjusted: boolean;\r\n  optimization_method: string;\r\n  estimated_improvement: number;\r\n}\r\n\r\nexport default function PortfolioOptimizer() {\r\n  const isMobile = useIsMobile();\r\n  const [riskTolerance, setRiskTolerance] = useState<\"conservative\" | \"moderate\" | \"aggressive\">(\"moderate\");\r\n  const [targetReturn, setTargetReturn] = useState(12);\r\n  const [isOptimizing, setIsOptimizing] = useState(false);\r\n  const [result, setResult] = useState<OptimizationResult | null>(null);\r\n\r\n  const optimizePortfolio = async () => {\r\n    setIsOptimizing(true);\r\n    try {\r\n      const res = await fetch(\r\n        `/api/proxy/api/ml/optimize-portfolio?risk_tolerance=${riskTolerance}&target_return=${targetReturn}`,\r\n        { method: \"POST\" }\r\n      );\r\n\r\n      if (!res.ok) throw new Error(\"Optimization failed\");\r\n      const data = await res.json();\r\n      setResult(data);\r\n      showSuccess(\"Portfolio optimization complete!\");\r\n    } catch (err: unknown) {\r\n      const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\r\n      showError(`Optimization failed: ${errorMessage}`);\r\n    } finally {\r\n      setIsOptimizing(false);\r\n    }\r\n  };\r\n\r\n  const getRiskColor = (riskLevel: string): string => {\r\n    switch (riskLevel) {\r\n      case \"low\":\r\n        return theme.colors.success;\r\n      case \"moderate\":\r\n        return theme.colors.warning;\r\n      case \"high\":\r\n        return theme.colors.error;\r\n      default:\r\n        return theme.colors.text;\r\n    }\r\n  };\r\n\r\n  const getActionColor = (action: string): string => {\r\n    switch (action) {\r\n      case \"buy\":\r\n        return theme.colors.success;\r\n      case \"sell\":\r\n        return theme.colors.error;\r\n      case \"hold\":\r\n        return theme.colors.textMuted;\r\n      default:\r\n        return theme.colors.text;\r\n    }\r\n  };\r\n\r\n  const getActionIcon = (action: string) => {\r\n    switch (action) {\r\n      case \"buy\":\r\n        return <TrendingUp size={18} color={theme.colors.success} />;\r\n      case \"sell\":\r\n        return <AlertTriangle size={18} color={theme.colors.error} />;\r\n      case \"hold\":\r\n        return <Shield size={18} color={theme.colors.textMuted} />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: isMobile ? theme.spacing.md : theme.spacing.lg }}>\r\n      {/* Header */}\r\n      <div style={{ marginBottom: theme.spacing.lg }}>\r\n        <h2\r\n          style={{\r\n            margin: 0,\r\n            fontSize: isMobile ? \"24px\" : \"32px\",\r\n            fontWeight: \"700\",\r\n            color: theme.colors.text,\r\n            textShadow: theme.glow.cyan,\r\n            marginBottom: theme.spacing.xs,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            gap: theme.spacing.sm,\r\n          }}\r\n        >\r\n          <Target size={32} color={theme.colors.secondary} />\r\n          AI Portfolio Optimizer\r\n        </h2>\r\n        <p\r\n          style={{\r\n            margin: 0,\r\n            fontSize: \"14px\",\r\n            color: theme.colors.textMuted,\r\n          }}\r\n        >\r\n          ML-powered portfolio rebalancing and risk optimization\r\n        </p>\r\n      </div>\r\n\r\n      {/* Configuration Card */}\r\n      <Card glow=\"cyan\" style={{ marginBottom: theme.spacing.lg }}>\r\n        <h3\r\n          style={{\r\n            fontSize: isMobile ? \"18px\" : \"20px\",\r\n            fontWeight: \"600\",\r\n            color: theme.colors.text,\r\n            marginBottom: theme.spacing.lg,\r\n          }}\r\n        >\r\n          Optimization Parameters\r\n        </h3>\r\n\r\n        <div\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(2, 1fr)\",\r\n            gap: theme.spacing.lg,\r\n            marginBottom: theme.spacing.lg,\r\n          }}\r\n        >\r\n          {/* Risk Tolerance */}\r\n          <div>\r\n            <label\r\n              style={{\r\n                display: \"block\",\r\n                fontSize: \"12px\",\r\n                color: theme.colors.textMuted,\r\n                marginBottom: theme.spacing.sm,\r\n                textTransform: \"uppercase\",\r\n                letterSpacing: \"0.5px\",\r\n              }}\r\n            >\r\n              Risk Tolerance\r\n            </label>\r\n            <div style={{ display: \"flex\", gap: theme.spacing.xs }}>\r\n              {[\"conservative\", \"moderate\", \"aggressive\"].map((level) => (\r\n                <button\r\n                  key={level}\r\n                  onClick={() => setRiskTolerance(level as typeof riskTolerance)}\r\n                  disabled={isOptimizing}\r\n                  style={{\r\n                    flex: 1,\r\n                    padding: \"12px\",\r\n                    background:\r\n                      riskTolerance === level\r\n                        ? `linear-gradient(135deg, ${theme.colors.secondary}, ${theme.colors.primary})`\r\n                        : \"rgba(15, 23, 42, 0.5)\",\r\n                    border: `1px solid ${riskTolerance === level ? theme.colors.secondary : theme.colors.border}`,\r\n                    borderRadius: theme.borderRadius.md,\r\n                    color: theme.colors.text,\r\n                    fontSize: \"13px\",\r\n                    fontWeight: riskTolerance === level ? \"700\" : \"400\",\r\n                    cursor: isOptimizing ? \"not-allowed\" : \"pointer\",\r\n                    textTransform: \"capitalize\",\r\n                    transition: \"all 0.2s\",\r\n                  }}\r\n                >\r\n                  {level}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Target Return */}\r\n          <div>\r\n            <label\r\n              style={{\r\n                display: \"block\",\r\n                fontSize: \"12px\",\r\n                color: theme.colors.textMuted,\r\n                marginBottom: theme.spacing.sm,\r\n                textTransform: \"uppercase\",\r\n                letterSpacing: \"0.5px\",\r\n              }}\r\n            >\r\n              Target Annual Return: {targetReturn}%\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"5\"\r\n              max=\"30\"\r\n              step=\"1\"\r\n              value={targetReturn}\r\n              onChange={(e) => setTargetReturn(Number(e.target.value))}\r\n              disabled={isOptimizing}\r\n              style={{\r\n                width: \"100%\",\r\n                height: \"8px\",\r\n                borderRadius: \"4px\",\r\n                outline: \"none\",\r\n                opacity: isOptimizing ? 0.5 : 1,\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                fontSize: \"11px\",\r\n                color: theme.colors.textMuted,\r\n                marginTop: theme.spacing.xs,\r\n              }}\r\n            >\r\n              5% (conservative) - 30% (aggressive)\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Button\r\n          onClick={optimizePortfolio}\r\n          loading={isOptimizing}\r\n          disabled={isOptimizing}\r\n          variant=\"primary\"\r\n          style={{ width: isMobile ? \"100%\" : \"auto\" }}\r\n        >\r\n          {isOptimizing ? \"Optimizing...\" : \"Optimize Portfolio\"}\r\n        </Button>\r\n      </Card>\r\n\r\n      {/* Results */}\r\n      {result && (\r\n        <>\r\n          {/* Comparison Card */}\r\n          <Card glow=\"purple\" style={{ marginBottom: theme.spacing.lg }}>\r\n            <h3\r\n              style={{\r\n                fontSize: isMobile ? \"18px\" : \"20px\",\r\n                fontWeight: \"600\",\r\n                color: theme.colors.text,\r\n                marginBottom: theme.spacing.lg,\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                gap: theme.spacing.sm,\r\n              }}\r\n            >\r\n              <Sparkles size={24} color={theme.colors.accent} />\r\n              Portfolio Comparison\r\n            </h3>\r\n\r\n            <div\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(2, 1fr)\",\r\n                gap: theme.spacing.lg,\r\n              }}\r\n            >\r\n              {/* Current Portfolio */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: \"rgba(15, 23, 42, 0.5)\",\r\n                  border: `1px solid ${theme.colors.border}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                }}\r\n              >\r\n                <h4\r\n                  style={{\r\n                    margin: 0,\r\n                    fontSize: \"16px\",\r\n                    fontWeight: \"600\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.md,\r\n                  }}\r\n                >\r\n                  Current Portfolio\r\n                </h4>\r\n\r\n                <div style={{ display: \"grid\", gap: theme.spacing.sm }}>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Total Value</span>\r\n                    <span style={{ fontSize: \"16px\", fontWeight: \"700\", color: theme.colors.text }}>\r\n                      ${result.current_portfolio.total_value.toLocaleString()}\r\n                    </span>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Expected Return</span>\r\n                    <span style={{ fontSize: \"16px\", fontWeight: \"700\", color: theme.colors.text }}>\r\n                      {result.current_portfolio.expected_return.toFixed(2)}%\r\n                    </span>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Volatility</span>\r\n                    <span style={{ fontSize: \"16px\", fontWeight: \"700\", color: theme.colors.warning }}>\r\n                      {result.current_portfolio.volatility.toFixed(2)}%\r\n                    </span>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Sharpe Ratio</span>\r\n                    <span style={{ fontSize: \"16px\", fontWeight: \"700\", color: theme.colors.secondary }}>\r\n                      {result.current_portfolio.sharpe_ratio.toFixed(2)}\r\n                    </span>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Diversification</span>\r\n                    <span\r\n                      style={{\r\n                        fontSize: \"16px\",\r\n                        fontWeight: \"700\",\r\n                        color: getRiskColor(result.current_portfolio.risk_level),\r\n                      }}\r\n                    >\r\n                      {result.current_portfolio.diversification_score.toFixed(0)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Optimized Portfolio */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: `linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(6, 182, 212, 0.1))`,\r\n                  border: `2px solid ${theme.colors.success}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                  boxShadow: theme.glow.green,\r\n                }}\r\n              >\r\n                <h4\r\n                  style={{\r\n                    margin: 0,\r\n                    fontSize: \"16px\",\r\n                    fontWeight: \"600\",\r\n                    color: theme.colors.success,\r\n                    marginBottom: theme.spacing.md,\r\n                  }}\r\n                >\r\n                  ✨ Optimized Portfolio\r\n                </h4>\r\n\r\n                <div style={{ display: \"grid\", gap: theme.spacing.sm }}>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Total Value</span>\r\n                    <span style={{ fontSize: \"16px\", fontWeight: \"700\", color: theme.colors.text }}>\r\n                      ${result.optimized_portfolio.total_value.toLocaleString()}\r\n                    </span>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Expected Return</span>\r\n                    <span style={{ fontSize: \"16px\", fontWeight: \"700\", color: theme.colors.success }}>\r\n                      {result.optimized_portfolio.expected_return.toFixed(2)}%{\" \"}\r\n                      <span style={{ fontSize: \"12px\" }}>\r\n                        (+{(result.optimized_portfolio.expected_return - result.current_portfolio.expected_return).toFixed(2)}%)\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Volatility</span>\r\n                    <span style={{ fontSize: \"16px\", fontWeight: \"700\", color: theme.colors.success }}>\r\n                      {result.optimized_portfolio.volatility.toFixed(2)}%{\" \"}\r\n                      <span style={{ fontSize: \"12px\" }}>\r\n                        ({result.optimized_portfolio.volatility < result.current_portfolio.volatility ? \"-\" : \"+\"}\r\n                        {Math.abs(result.optimized_portfolio.volatility - result.current_portfolio.volatility).toFixed(2)}%)\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Sharpe Ratio</span>\r\n                    <span style={{ fontSize: \"16px\", fontWeight: \"700\", color: theme.colors.success }}>\r\n                      {result.optimized_portfolio.sharpe_ratio.toFixed(2)}{\" \"}\r\n                      <span style={{ fontSize: \"12px\" }}>\r\n                        (+{(result.optimized_portfolio.sharpe_ratio - result.current_portfolio.sharpe_ratio).toFixed(2)})\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <span style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>Diversification</span>\r\n                    <span style={{ fontSize: \"16px\", fontWeight: \"700\", color: theme.colors.success }}>\r\n                      {result.optimized_portfolio.diversification_score.toFixed(0)}%{\" \"}\r\n                      <span style={{ fontSize: \"12px\" }}>\r\n                        (+{(result.optimized_portfolio.diversification_score - result.current_portfolio.diversification_score).toFixed(0)}%)\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Improvement Badge */}\r\n            <div\r\n              style={{\r\n                marginTop: theme.spacing.lg,\r\n                padding: theme.spacing.md,\r\n                background: \"rgba(16, 185, 129, 0.1)\",\r\n                border: `1px solid ${theme.colors.success}`,\r\n                borderRadius: theme.borderRadius.md,\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              <div style={{ fontSize: \"13px\", color: theme.colors.textMuted, marginBottom: theme.spacing.xs }}>\r\n                Estimated Improvement\r\n              </div>\r\n              <div\r\n                style={{\r\n                  fontSize: \"32px\",\r\n                  fontWeight: \"700\",\r\n                  color: theme.colors.success,\r\n                }}\r\n              >\r\n                +{result.estimated_improvement.toFixed(1)}%\r\n              </div>\r\n              <div style={{ fontSize: \"12px\", color: theme.colors.textMuted, marginTop: theme.spacing.xs }}>\r\n                Risk-adjusted annual return improvement\r\n              </div>\r\n            </div>\r\n          </Card>\r\n\r\n          {/* Suggestions */}\r\n          <Card glow=\"green\" style={{ marginBottom: theme.spacing.lg }}>\r\n            <h3\r\n              style={{\r\n                fontSize: isMobile ? \"18px\" : \"20px\",\r\n                fontWeight: \"600\",\r\n                color: theme.colors.text,\r\n                marginBottom: theme.spacing.lg,\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                gap: theme.spacing.sm,\r\n              }}\r\n            >\r\n              <PieChart size={24} color={theme.colors.primary} />\r\n              Rebalancing Suggestions\r\n            </h3>\r\n\r\n            <div style={{ display: \"grid\", gap: theme.spacing.md }}>\r\n              {result.suggestions.map((suggestion, idx) => (\r\n                <div\r\n                  key={idx}\r\n                  style={{\r\n                    padding: theme.spacing.md,\r\n                    background: \"rgba(15, 23, 42, 0.5)\",\r\n                    border: `1px solid ${getActionColor(suggestion.action)}`,\r\n                    borderRadius: theme.borderRadius.md,\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"space-between\",\r\n                      alignItems: \"flex-start\",\r\n                      marginBottom: theme.spacing.sm,\r\n                    }}\r\n                  >\r\n                    <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.sm }}>\r\n                      <div\r\n                        style={{\r\n                          fontSize: \"20px\",\r\n                          fontWeight: \"700\",\r\n                          color: theme.colors.text,\r\n                        }}\r\n                      >\r\n                        {suggestion.symbol}\r\n                      </div>\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          gap: \"4px\",\r\n                          padding: \"4px 12px\",\r\n                          background: `rgba(${\r\n                            suggestion.action === \"buy\"\r\n                              ? \"16, 185, 129\"\r\n                              : suggestion.action === \"sell\"\r\n                                ? \"239, 68, 68\"\r\n                                : \"148, 163, 184\"\r\n                          }, 0.2)`,\r\n                          border: `1px solid ${getActionColor(suggestion.action)}`,\r\n                          borderRadius: theme.borderRadius.sm,\r\n                        }}\r\n                      >\r\n                        {getActionIcon(suggestion.action)}\r\n                        <span\r\n                          style={{\r\n                            fontSize: \"12px\",\r\n                            fontWeight: \"700\",\r\n                            color: getActionColor(suggestion.action),\r\n                            textTransform: \"uppercase\",\r\n                          }}\r\n                        >\r\n                          {suggestion.action}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div style={{ textAlign: \"right\" }}>\r\n                      <div style={{ fontSize: \"12px\", color: theme.colors.textMuted }}>\r\n                        {suggestion.current_shares} → {suggestion.suggested_shares} shares\r\n                      </div>\r\n                      <div\r\n                        style={{\r\n                          fontSize: \"16px\",\r\n                          fontWeight: \"700\",\r\n                          color: suggestion.shares_delta >= 0 ? theme.colors.success : theme.colors.error,\r\n                        }}\r\n                      >\r\n                        {suggestion.shares_delta >= 0 ? \"+\" : \"\"}\r\n                        {suggestion.shares_delta}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    style={{\r\n                      fontSize: \"13px\",\r\n                      color: theme.colors.text,\r\n                      marginBottom: theme.spacing.sm,\r\n                      lineHeight: \"1.6\",\r\n                    }}\r\n                  >\r\n                    {suggestion.reasoning}\r\n                  </div>\r\n\r\n                  <div\r\n                    style={{\r\n                      display: \"grid\",\r\n                      gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(4, 1fr)\",\r\n                      gap: theme.spacing.sm,\r\n                      fontSize: \"12px\",\r\n                    }}\r\n                  >\r\n                    <div>\r\n                      <span style={{ color: theme.colors.textMuted }}>Current Weight: </span>\r\n                      <span style={{ color: theme.colors.text, fontWeight: \"600\" }}>\r\n                        {suggestion.current_weight.toFixed(1)}%\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      <span style={{ color: theme.colors.textMuted }}>Target Weight: </span>\r\n                      <span style={{ color: theme.colors.secondary, fontWeight: \"600\" }}>\r\n                        {suggestion.target_weight.toFixed(1)}%\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      <span style={{ color: theme.colors.textMuted }}>Expected Return: </span>\r\n                      <span style={{ color: theme.colors.success, fontWeight: \"600\" }}>\r\n                        {suggestion.expected_return.toFixed(1)}%\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      <span style={{ color: theme.colors.textMuted }}>Risk Score: </span>\r\n                      <span style={{ color: getRiskColor(suggestion.risk_score > 0.7 ? \"high\" : suggestion.risk_score > 0.4 ? \"moderate\" : \"low\"), fontWeight: \"600\" }}>\r\n                        {(suggestion.risk_score * 100).toFixed(0)}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Card>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\PositionsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\RadialMenu.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":192,"column":34,"nodeType":"Identifier","endLine":192,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7949,8015],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[9226,9299],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\RadialMenuNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ResearchDashboardSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\RiskDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\SchedulerSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\SentimentDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'analyzeSentiment'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [analyzeSentiment, autoRefresh, result]","fix":{"range":[1648,1669],"text":"[analyzeSentiment, autoRefresh, result]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Card, Button } from \"./ui\";\r\nimport { theme } from \"../styles/theme\";\r\nimport { showError, showSuccess } from \"../lib/toast\";\r\nimport { Newspaper, TrendingUp, TrendingDown, Minus, RefreshCw, Sparkles } from \"lucide-react\";\r\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\r\n\r\ninterface NewsSentiment {\r\n  article_id: string;\r\n  title: string;\r\n  source: string;\r\n  published_at: string;\r\n  url: string;\r\n  sentiment: \"bullish\" | \"bearish\" | \"neutral\";\r\n  sentiment_score: number;\r\n  confidence: number;\r\n  key_topics: string[];\r\n  impact_score: number;\r\n}\r\n\r\ninterface SentimentAnalysis {\r\n  symbol: string;\r\n  overall_sentiment: \"bullish\" | \"bearish\" | \"neutral\";\r\n  sentiment_score: number;\r\n  confidence: number;\r\n  bullish_count: number;\r\n  bearish_count: number;\r\n  neutral_count: number;\r\n  total_articles: number;\r\n  avg_impact: number;\r\n  top_topics: string[];\r\n  articles: NewsSentiment[];\r\n  timestamp: string;\r\n}\r\n\r\nexport default function SentimentDashboard() {\r\n  const isMobile = useIsMobile();\r\n  const [symbol, setSymbol] = useState(\"SPY\");\r\n  const [lookbackHours, setLookbackHours] = useState(24);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [result, setResult] = useState<SentimentAnalysis | null>(null);\r\n  const [autoRefresh, setAutoRefresh] = useState(false);\r\n\r\n  // Auto-refresh every 5 minutes if enabled\r\n  useEffect(() => {\r\n    if (!autoRefresh || !result) return;\r\n\r\n    const interval = setInterval(() => {\r\n      analyzeSentiment();\r\n    }, 5 * 60 * 1000); // 5 minutes\r\n\r\n    return () => clearInterval(interval);\r\n  }, [autoRefresh, result]);\r\n\r\n  const analyzeSentiment = async () => {\r\n    if (!symbol.trim()) {\r\n      showError(\"Please enter a symbol\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const res = await fetch(\r\n        `/api/proxy/api/sentiment/analyze?symbol=${symbol.toUpperCase()}&lookback_hours=${lookbackHours}`\r\n      );\r\n\r\n      if (!res.ok) {\r\n        throw new Error(`Sentiment analysis failed: ${res.statusText}`);\r\n      }\r\n\r\n      const data = await res.json();\r\n      setResult(data);\r\n      showSuccess(`Analyzed ${data.total_articles} articles for ${data.symbol}`);\r\n    } catch (err: unknown) {\r\n      const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\r\n      showError(`Analysis failed: ${errorMessage}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getSentimentColor = (sentiment: string): string => {\r\n    switch (sentiment) {\r\n      case \"bullish\":\r\n        return theme.colors.success;\r\n      case \"bearish\":\r\n        return theme.colors.error;\r\n      case \"neutral\":\r\n        return theme.colors.textMuted;\r\n      default:\r\n        return theme.colors.text;\r\n    }\r\n  };\r\n\r\n  const getSentimentIcon = (sentiment: string) => {\r\n    switch (sentiment) {\r\n      case \"bullish\":\r\n        return <TrendingUp size={24} color={theme.colors.success} />;\r\n      case \"bearish\":\r\n        return <TrendingDown size={24} color={theme.colors.error} />;\r\n      case \"neutral\":\r\n        return <Minus size={24} color={theme.colors.textMuted} />;\r\n      default:\r\n        return <Minus size={24} />;\r\n    }\r\n  };\r\n\r\n  const getSentimentEmoji = (sentiment: string): string => {\r\n    switch (sentiment) {\r\n      case \"bullish\":\r\n        return \"🚀\";\r\n      case \"bearish\":\r\n        return \"📉\";\r\n      case \"neutral\":\r\n        return \"➡️\";\r\n      default:\r\n        return \"❓\";\r\n    }\r\n  };\r\n\r\n  const formatTimestamp = (timestamp: string): string => {\r\n    const date = new Date(timestamp);\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - date.getTime();\r\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n    const diffMins = Math.floor(diffMs / (1000 * 60));\r\n\r\n    if (diffMins < 60) return `${diffMins}m ago`;\r\n    if (diffHours < 24) return `${diffHours}h ago`;\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: isMobile ? theme.spacing.md : theme.spacing.lg }}>\r\n      {/* Header */}\r\n      <div style={{ marginBottom: theme.spacing.lg }}>\r\n        <h2\r\n          style={{\r\n            margin: 0,\r\n            fontSize: isMobile ? \"24px\" : \"32px\",\r\n            fontWeight: \"700\",\r\n            color: theme.colors.text,\r\n            textShadow: theme.glow.cyan,\r\n            marginBottom: theme.spacing.xs,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            gap: theme.spacing.sm,\r\n          }}\r\n        >\r\n          <Newspaper size={32} color={theme.colors.secondary} />\r\n          News Sentiment Dashboard\r\n        </h2>\r\n        <p\r\n          style={{\r\n            margin: 0,\r\n            fontSize: \"14px\",\r\n            color: theme.colors.textMuted,\r\n          }}\r\n        >\r\n          Real-time AI-powered news sentiment analysis\r\n        </p>\r\n      </div>\r\n\r\n      {/* Configuration Card */}\r\n      <Card glow=\"cyan\" style={{ marginBottom: theme.spacing.lg }}>\r\n        <h3\r\n          style={{\r\n            fontSize: isMobile ? \"18px\" : \"20px\",\r\n            fontWeight: \"600\",\r\n            color: theme.colors.text,\r\n            marginBottom: theme.spacing.lg,\r\n          }}\r\n        >\r\n          Analysis Configuration\r\n        </h3>\r\n\r\n        <div\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(2, 1fr)\",\r\n            gap: theme.spacing.md,\r\n            marginBottom: theme.spacing.lg,\r\n          }}\r\n        >\r\n          {/* Symbol Input */}\r\n          <div>\r\n            <label\r\n              style={{\r\n                display: \"block\",\r\n                fontSize: \"12px\",\r\n                color: theme.colors.textMuted,\r\n                marginBottom: theme.spacing.xs,\r\n                textTransform: \"uppercase\",\r\n                letterSpacing: \"0.5px\",\r\n              }}\r\n            >\r\n              Symbol\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={symbol}\r\n              onChange={(e) => setSymbol(e.target.value.toUpperCase())}\r\n              disabled={isLoading}\r\n              placeholder=\"SPY\"\r\n              style={{\r\n                width: \"100%\",\r\n                padding: \"12px\",\r\n                background: \"rgba(15, 23, 42, 0.5)\",\r\n                border: `1px solid ${theme.colors.border}`,\r\n                borderRadius: theme.borderRadius.md,\r\n                color: theme.colors.text,\r\n                fontSize: \"14px\",\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          {/* Lookback Hours */}\r\n          <div>\r\n            <label\r\n              style={{\r\n                display: \"block\",\r\n                fontSize: \"12px\",\r\n                color: theme.colors.textMuted,\r\n                marginBottom: theme.spacing.xs,\r\n                textTransform: \"uppercase\",\r\n                letterSpacing: \"0.5px\",\r\n              }}\r\n            >\r\n              Lookback Period: {lookbackHours} hours\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"6\"\r\n              max=\"168\"\r\n              step=\"6\"\r\n              value={lookbackHours}\r\n              onChange={(e) => setLookbackHours(Number(e.target.value))}\r\n              disabled={isLoading}\r\n              style={{\r\n                width: \"100%\",\r\n                height: \"8px\",\r\n                borderRadius: \"4px\",\r\n                outline: \"none\",\r\n                opacity: isLoading ? 0.5 : 1,\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                fontSize: \"11px\",\r\n                color: theme.colors.textMuted,\r\n                marginTop: theme.spacing.xs,\r\n              }}\r\n            >\r\n              6 hours - 7 days\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            gap: theme.spacing.sm,\r\n            alignItems: \"center\",\r\n            flexWrap: \"wrap\",\r\n          }}\r\n        >\r\n          <Button\r\n            onClick={analyzeSentiment}\r\n            loading={isLoading}\r\n            disabled={isLoading || !symbol.trim()}\r\n            variant=\"primary\"\r\n            style={{ flex: isMobile ? \"1\" : \"0\" }}\r\n          >\r\n            {isLoading ? \"Analyzing...\" : \"Analyze Sentiment\"}\r\n          </Button>\r\n\r\n          {result && (\r\n            <label\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                gap: theme.spacing.xs,\r\n                fontSize: \"14px\",\r\n                color: theme.colors.text,\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={autoRefresh}\r\n                onChange={(e) => setAutoRefresh(e.target.checked)}\r\n                style={{ cursor: \"pointer\" }}\r\n              />\r\n              <RefreshCw size={16} />\r\n              Auto-refresh (5min)\r\n            </label>\r\n          )}\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Results */}\r\n      {result && (\r\n        <>\r\n          {/* Overall Sentiment Card */}\r\n          <Card glow=\"purple\" style={{ marginBottom: theme.spacing.lg }}>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"space-between\",\r\n                marginBottom: theme.spacing.lg,\r\n              }}\r\n            >\r\n              <h3\r\n                style={{\r\n                  fontSize: isMobile ? \"18px\" : \"20px\",\r\n                  fontWeight: \"600\",\r\n                  color: theme.colors.text,\r\n                  margin: 0,\r\n                }}\r\n              >\r\n                {getSentimentEmoji(result.overall_sentiment)} Market Sentiment - {result.symbol}\r\n              </h3>\r\n              <div\r\n                style={{\r\n                  fontSize: \"12px\",\r\n                  color: theme.colors.textMuted,\r\n                }}\r\n              >\r\n                {formatTimestamp(result.timestamp)}\r\n              </div>\r\n            </div>\r\n\r\n            <div\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(4, 1fr)\",\r\n                gap: theme.spacing.md,\r\n                marginBottom: theme.spacing.lg,\r\n              }}\r\n            >\r\n              {/* Overall Sentiment */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: `rgba(${\r\n                    result.overall_sentiment === \"bullish\"\r\n                      ? \"16, 185, 129\"\r\n                      : result.overall_sentiment === \"bearish\"\r\n                        ? \"239, 68, 68\"\r\n                        : \"148, 163, 184\"\r\n                  }, 0.1)`,\r\n                  border: `2px solid ${getSentimentColor(result.overall_sentiment)}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <div style={{ marginBottom: theme.spacing.sm }}>\r\n                  {getSentimentIcon(result.overall_sentiment)}\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"24px\",\r\n                    fontWeight: \"700\",\r\n                    color: getSentimentColor(result.overall_sentiment),\r\n                    textTransform: \"uppercase\",\r\n                  }}\r\n                >\r\n                  {result.overall_sentiment}\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginTop: theme.spacing.xs,\r\n                  }}\r\n                >\r\n                  {(result.confidence * 100).toFixed(0)}% confidence\r\n                </div>\r\n              </div>\r\n\r\n              {/* Sentiment Score */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: \"rgba(139, 92, 246, 0.1)\",\r\n                  border: `1px solid ${theme.colors.accent}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.xs,\r\n                  }}\r\n                >\r\n                  SENTIMENT SCORE\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"32px\",\r\n                    fontWeight: \"700\",\r\n                    color: theme.colors.accent,\r\n                  }}\r\n                >\r\n                  {result.sentiment_score >= 0 ? \"+\" : \"\"}\r\n                  {result.sentiment_score.toFixed(2)}\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"11px\",\r\n                    color: theme.colors.textMuted,\r\n                  }}\r\n                >\r\n                  -1.0 (bearish) to +1.0 (bullish)\r\n                </div>\r\n              </div>\r\n\r\n              {/* Article Breakdown */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: \"rgba(6, 182, 212, 0.1)\",\r\n                  border: `1px solid ${theme.colors.secondary}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.xs,\r\n                  }}\r\n                >\r\n                  ARTICLES ANALYZED\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"32px\",\r\n                    fontWeight: \"700\",\r\n                    color: theme.colors.secondary,\r\n                  }}\r\n                >\r\n                  {result.total_articles}\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"11px\",\r\n                    color: theme.colors.textMuted,\r\n                  }}\r\n                >\r\n                  <span style={{ color: theme.colors.success }}>{result.bullish_count} 🚀</span> /{\" \"}\r\n                  <span style={{ color: theme.colors.error }}>{result.bearish_count} 📉</span> /{\" \"}\r\n                  <span>{result.neutral_count} ➡️</span>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Impact Score */}\r\n              <div\r\n                style={{\r\n                  padding: theme.spacing.md,\r\n                  background: \"rgba(16, 185, 129, 0.1)\",\r\n                  border: `1px solid ${theme.colors.success}`,\r\n                  borderRadius: theme.borderRadius.md,\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.xs,\r\n                  }}\r\n                >\r\n                  AVG IMPACT\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"32px\",\r\n                    fontWeight: \"700\",\r\n                    color: theme.colors.success,\r\n                  }}\r\n                >\r\n                  {(result.avg_impact * 100).toFixed(0)}%\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"11px\",\r\n                    color: theme.colors.textMuted,\r\n                  }}\r\n                >\r\n                  Market moving potential\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Top Topics */}\r\n            {result.top_topics.length > 0 && (\r\n              <div>\r\n                <div\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    color: theme.colors.textMuted,\r\n                    marginBottom: theme.spacing.sm,\r\n                    textTransform: \"uppercase\",\r\n                    letterSpacing: \"0.5px\",\r\n                  }}\r\n                >\r\n                  <Sparkles size={14} style={{ display: \"inline\", marginRight: \"4px\" }} />\r\n                  Trending Topics:\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    gap: theme.spacing.xs,\r\n                    flexWrap: \"wrap\",\r\n                  }}\r\n                >\r\n                  {result.top_topics.map((topic, idx) => (\r\n                    <div\r\n                      key={idx}\r\n                      style={{\r\n                        padding: \"6px 12px\",\r\n                        background: \"rgba(139, 92, 246, 0.2)\",\r\n                        border: `1px solid ${theme.colors.accent}`,\r\n                        borderRadius: theme.borderRadius.sm,\r\n                        fontSize: \"13px\",\r\n                        color: theme.colors.accent,\r\n                        fontWeight: \"600\",\r\n                      }}\r\n                    >\r\n                      {topic}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Card>\r\n\r\n          {/* News Articles */}\r\n          <Card glow=\"green\" style={{ marginBottom: theme.spacing.lg }}>\r\n            <h3\r\n              style={{\r\n                fontSize: isMobile ? \"18px\" : \"20px\",\r\n                fontWeight: \"600\",\r\n                color: theme.colors.text,\r\n                marginBottom: theme.spacing.lg,\r\n              }}\r\n            >\r\n              📰 Recent News Articles\r\n            </h3>\r\n\r\n            {result.articles.length === 0 ? (\r\n              <div\r\n                style={{\r\n                  textAlign: \"center\",\r\n                  padding: theme.spacing.xl,\r\n                  color: theme.colors.textMuted,\r\n                }}\r\n              >\r\n                No articles found for this symbol in the selected time period.\r\n              </div>\r\n            ) : (\r\n              <div\r\n                style={{\r\n                  display: \"grid\",\r\n                  gridTemplateColumns: \"1fr\",\r\n                  gap: theme.spacing.md,\r\n                }}\r\n              >\r\n                {result.articles.slice(0, 10).map((article, idx) => (\r\n                  <a\r\n                    key={idx}\r\n                    href={article.url}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    style={{\r\n                      padding: theme.spacing.md,\r\n                      background: \"rgba(15, 23, 42, 0.5)\",\r\n                      border: `1px solid ${getSentimentColor(article.sentiment)}`,\r\n                      borderRadius: theme.borderRadius.md,\r\n                      textDecoration: \"none\",\r\n                      display: \"block\",\r\n                      transition: \"all 0.2s\",\r\n                    }}\r\n                    onMouseEnter={(e) => {\r\n                      e.currentTarget.style.background = \"rgba(15, 23, 42, 0.8)\";\r\n                      e.currentTarget.style.transform = \"translateY(-2px)\";\r\n                    }}\r\n                    onMouseLeave={(e) => {\r\n                      e.currentTarget.style.background = \"rgba(15, 23, 42, 0.5)\";\r\n                      e.currentTarget.style.transform = \"translateY(0)\";\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"flex-start\",\r\n                        marginBottom: theme.spacing.sm,\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          flex: 1,\r\n                          fontSize: \"16px\",\r\n                          fontWeight: \"600\",\r\n                          color: theme.colors.text,\r\n                          lineHeight: \"1.4\",\r\n                        }}\r\n                      >\r\n                        {article.title}\r\n                      </div>\r\n                      <div\r\n                        style={{\r\n                          marginLeft: theme.spacing.sm,\r\n                          padding: \"4px 12px\",\r\n                          background: `rgba(${\r\n                            article.sentiment === \"bullish\"\r\n                              ? \"16, 185, 129\"\r\n                              : article.sentiment === \"bearish\"\r\n                                ? \"239, 68, 68\"\r\n                                : \"148, 163, 184\"\r\n                          }, 0.2)`,\r\n                          border: `1px solid ${getSentimentColor(article.sentiment)}`,\r\n                          borderRadius: theme.borderRadius.sm,\r\n                          fontSize: \"12px\",\r\n                          color: getSentimentColor(article.sentiment),\r\n                          fontWeight: \"700\",\r\n                          textTransform: \"uppercase\",\r\n                          whiteSpace: \"nowrap\",\r\n                        }}\r\n                      >\r\n                        {article.sentiment}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                        fontSize: \"12px\",\r\n                        color: theme.colors.textMuted,\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        {article.source} • {formatTimestamp(article.published_at)}\r\n                      </div>\r\n                      <div>\r\n                        Confidence: {(article.confidence * 100).toFixed(0)}% | Impact:{\" \"}\r\n                        {(article.impact_score * 100).toFixed(0)}%\r\n                      </div>\r\n                    </div>\r\n\r\n                    {article.key_topics.length > 0 && (\r\n                      <div\r\n                        style={{\r\n                          marginTop: theme.spacing.sm,\r\n                          display: \"flex\",\r\n                          gap: theme.spacing.xs,\r\n                          flexWrap: \"wrap\",\r\n                        }}\r\n                      >\r\n                        {article.key_topics.slice(0, 3).map((topic, topicIdx) => (\r\n                          <span\r\n                            key={topicIdx}\r\n                            style={{\r\n                              padding: \"2px 8px\",\r\n                              background: \"rgba(139, 92, 246, 0.15)\",\r\n                              border: `1px solid ${theme.colors.accent}`,\r\n                              borderRadius: theme.borderRadius.xs,\r\n                              fontSize: \"11px\",\r\n                              color: theme.colors.accent,\r\n                            }}\r\n                          >\r\n                            {topic}\r\n                          </span>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </a>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </Card>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\Settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":782,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":782,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27602,27605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27602,27605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport {\n  Activity,\n  AlertTriangle,\n  BarChart3,\n  Bell,\n  BookOpen,\n  Brain,\n  CheckCircle2,\n  Clock,\n  CreditCard,\n  Database,\n  FileText,\n  Lock,\n  MessageSquare,\n  Newspaper,\n  Palette,\n  Save,\n  Settings as SettingsIcon,\n  Shield,\n  Target,\n  ToggleLeft,\n  ToggleRight,\n  Users,\n} from \"lucide-react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\nimport { clearUserData, getCurrentUser, getUserAnalytics } from \"../lib/userManagement\";\nimport ApprovalQueue from \"./ApprovalQueue\";\nimport ClaudeAIChat from \"./ClaudeAIChat\";\nimport KillSwitchToggle from \"./KillSwitchToggle\";\nimport MLAnalyticsDashboard from \"./MLAnalyticsDashboard\";\nimport MLModelManagement from \"./MLModelManagement\";\nimport MLTrainingDashboard from \"./MLTrainingDashboard\";\nimport PatternBacktestDashboard from \"./PatternBacktestDashboard\";\nimport PortfolioOptimizer from \"./PortfolioOptimizer\";\nimport RiskDashboard from \"./RiskDashboard\";\nimport SchedulerSettings from \"./SchedulerSettings\";\nimport SentimentDashboard from \"./SentimentDashboard\";\nimport SubscriptionManager from \"./SubscriptionManager\";\nimport TradingJournal from \"./TradingJournal\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst _MLTrainingDashboard = MLTrainingDashboard; // Reserved for future ML training feature\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  role: \"owner\" | \"admin\" | \"beta\" | \"alpha\" | \"user\";\n  tradingMode: \"paper\" | \"live\";\n  permissions: {\n    canTrade: boolean;\n    canBacktest: boolean;\n    canViewAnalytics: boolean;\n    canModifyStrategies: boolean;\n  };\n  status: \"active\" | \"suspended\";\n  createdAt: string;\n  lastLogin: string;\n}\n\ninterface ThemeCustomization {\n  primaryColor: string;\n  accentColor: string;\n  successColor: string;\n  errorColor: string;\n  warningColor: string;\n  infoColor: string;\n}\n\ninterface TelemetryData {\n  sessionId: string;\n  userId: string;\n  action: string;\n  component: string;\n  timestamp: string;\n  metadata: Record<string, unknown>;\n}\n\ninterface SettingsData {\n  defaultExecutionMode: \"requires_approval\" | \"autopilot\";\n  enableSMSAlerts: boolean;\n  enableEmailAlerts: boolean;\n  enablePushNotifications: boolean;\n  enablePerformanceTracking: boolean;\n  minTradesForPerformanceData: number;\n  defaultSlippageBudget: number;\n  defaultMaxReprices: number;\n}\n\ninterface SettingsProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function Settings({ isOpen, onClose }: SettingsProps) {\n  const isMobile = useIsMobile();\n  const currentUserData = getCurrentUser();\n  const [currentUser] = useState({\n    id: currentUserData?.userId || \"owner-001\",\n    role: \"owner\" as const,\n  });\n  const isOwner = currentUser.role === \"owner\";\n  const isAdmin = currentUser.role === \"owner\" || currentUser.role === \"admin\";\n\n  const [activeTab, setActiveTab] = useState<\n    | \"personal\"\n    | \"users\"\n    | \"theme\"\n    | \"permissions\"\n    | \"telemetry\"\n    | \"trading\"\n    | \"journal\"\n    | \"risk\"\n    | \"automation\"\n    | \"approvals\"\n  >(\"personal\");\n\n  const [settings, setSettings] = useState<SettingsData>({\n    defaultExecutionMode: \"requires_approval\",\n    enableSMSAlerts: true,\n    enableEmailAlerts: true,\n    enablePushNotifications: false,\n    enablePerformanceTracking: true,\n    minTradesForPerformanceData: 10,\n    defaultSlippageBudget: 0.4,\n    defaultMaxReprices: 4,\n  });\n\n  const [users, setUsers] = useState<User[]>([]);\n  const [themeCustom, setThemeCustom] = useState<ThemeCustomization>({\n    primaryColor: \"#10b981\",\n    accentColor: \"#7E57C2\",\n    successColor: \"#10b981\",\n    errorColor: \"#ef4444\",\n    warningColor: \"#f59e0b\",\n    infoColor: \"#14b8a6\",\n  });\n  const [telemetryEnabled, setTelemetryEnabled] = useState(true);\n  const [telemetryData, setTelemetryData] = useState<TelemetryData[]>([]);\n\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveMessage, setSaveMessage] = useState(\"\");\n\n  // Risk Tolerance State\n  const [riskTolerance, setRiskTolerance] = useState<number>(50);\n  const [riskLimits, setRiskLimits] = useState<{\n    risk_category: string;\n    max_position_size_percent: number;\n    max_positions: number;\n    description: string;\n  } | null>(null);\n  const [isLoadingRisk, setIsLoadingRisk] = useState(false);\n\n  // Paper Trading Account Balance State\n  const [paperAccountBalance, setPaperAccountBalance] = useState<number>(100000);\n  const [accountInfo, setAccountInfo] = useState<{\n    equity: number;\n    cash: number;\n    buying_power: number;\n  } | null>(null);\n  const [isLoadingBalance, setIsLoadingBalance] = useState(false);\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const savedSettings = localStorage.getItem(\"allessandra_settings\");\n    if (savedSettings) {\n      try {\n        setSettings(JSON.parse(savedSettings));\n      } catch (error) {\n        console.error(\"Failed to load settings:\", error);\n      }\n    }\n\n    // Fetch risk tolerance and account balance from backend\n    fetchRiskTolerance();\n    fetchAccountBalance();\n\n    if (isAdmin) {\n      loadMockUsers();\n      loadTelemetryData();\n    }\n  }, [isOpen, isAdmin]);\n\n  const loadMockUsers = () => {\n    setUsers([\n      {\n        id: \"owner-001\",\n        email: \"owner@paid.com\",\n        name: \"System Owner\",\n        role: \"owner\",\n        tradingMode: \"paper\",\n        permissions: {\n          canTrade: true,\n          canBacktest: true,\n          canViewAnalytics: true,\n          canModifyStrategies: true,\n        },\n        status: \"active\",\n        createdAt: \"2025-01-01\",\n        lastLogin: new Date().toISOString().split(\"T\")[0],\n      },\n      {\n        id: \"beta-001\",\n        email: \"beta.tester1@paid.com\",\n        name: \"Beta Tester 1\",\n        role: \"beta\",\n        tradingMode: \"paper\",\n        permissions: {\n          canTrade: true,\n          canBacktest: true,\n          canViewAnalytics: true,\n          canModifyStrategies: false,\n        },\n        status: \"active\",\n        createdAt: \"2025-09-15\",\n        lastLogin: \"2025-10-05\",\n      },\n    ]);\n  };\n\n  const loadTelemetryData = () => {\n    const mockData: TelemetryData[] = [\n      {\n        sessionId: \"sess-001\",\n        userId: \"beta-001\",\n        action: \"execute_trade\",\n        component: \"ExecuteTradeForm\",\n        timestamp: new Date().toISOString(),\n        metadata: { symbol: \"AAPL\", side: \"buy\", quantity: 10 },\n      },\n    ];\n    setTelemetryData(mockData);\n  };\n\n  // Fetch Risk Tolerance from Backend\n  const fetchRiskTolerance = async () => {\n    try {\n      const apiToken = process.env.NEXT_PUBLIC_API_TOKEN;\n      const baseUrl = process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL || \"/api/proxy/api\";\n\n      const response = await fetch(`${baseUrl}/users/preferences`, {\n        headers: {\n          Authorization: `Bearer ${apiToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setRiskTolerance(data.risk_tolerance || 50);\n\n        // Fetch risk limits\n        const limitsResponse = await fetch(`${baseUrl}/users/risk-limits`, {\n          headers: {\n            Authorization: `Bearer ${apiToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n        if (limitsResponse.ok) {\n          const limitsData = await limitsResponse.json();\n          setRiskLimits(limitsData);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch risk tolerance:\", error);\n    }\n  };\n\n  // Fetch Account Balance from Backend\n  const fetchAccountBalance = async () => {\n    try {\n      const apiToken = process.env.NEXT_PUBLIC_API_TOKEN;\n      const baseUrl = process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL || \"/api/proxy/api\";\n\n      const response = await fetch(`${baseUrl}/account`, {\n        headers: {\n          Authorization: `Bearer ${apiToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setAccountInfo({\n          equity: parseFloat(data.equity || data.portfolio_value || \"0\"),\n          cash: parseFloat(data.cash || \"0\"),\n          buying_power: parseFloat(data.buying_power || \"0\"),\n        });\n        setPaperAccountBalance(parseFloat(data.equity || data.portfolio_value || \"100000\"));\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch account balance:\", error);\n    }\n  };\n\n  // Update Risk Tolerance with Debounce\n  const updateRiskTolerance = useCallback(async (newValue: number) => {\n    setIsLoadingRisk(true);\n\n    try {\n      const apiToken = process.env.NEXT_PUBLIC_API_TOKEN;\n      const baseUrl = process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL || \"/api/proxy/api\";\n\n      const response = await fetch(`${baseUrl}/users/preferences`, {\n        method: \"PATCH\",\n        headers: {\n          Authorization: `Bearer ${apiToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ risk_tolerance: newValue }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setRiskTolerance(data.risk_tolerance);\n\n        // Refresh risk limits\n        const limitsResponse = await fetch(`${baseUrl}/users/risk-limits`, {\n          headers: {\n            Authorization: `Bearer ${apiToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n        let limitsData = null;\n        if (limitsResponse.ok) {\n          limitsData = await limitsResponse.json();\n          setRiskLimits(limitsData);\n        }\n\n        const riskCategory =\n          limitsData?.risk_category ||\n          (newValue <= 33 ? \"Conservative\" : newValue <= 66 ? \"Moderate\" : \"Aggressive\");\n        toast.success(`Risk tolerance updated to ${newValue}% (${riskCategory})`);\n      } else {\n        toast.error(\"Failed to update risk tolerance\");\n      }\n    } catch (error) {\n      console.error(\"Failed to update risk tolerance:\", error);\n      toast.error(\"Failed to update risk tolerance\");\n    } finally {\n      setIsLoadingRisk(false);\n    }\n  }, []);\n\n  // Update Paper Account Balance\n  const updatePaperAccountBalance = async () => {\n    setIsLoadingBalance(true);\n\n    try {\n      const apiToken = process.env.NEXT_PUBLIC_API_TOKEN;\n      const baseUrl = process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL || \"/api/proxy/api\";\n\n      const response = await fetch(`${baseUrl}/users/preferences`, {\n        method: \"PATCH\",\n        headers: {\n          Authorization: `Bearer ${apiToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ paper_account_balance: paperAccountBalance }),\n      });\n\n      if (response.ok) {\n        toast.success(`Paper account balance updated to $${paperAccountBalance.toLocaleString()}`);\n        // Refresh account info after update\n        await fetchAccountBalance();\n      } else {\n        toast.error(\"Failed to update paper account balance\");\n      }\n    } catch (error) {\n      console.error(\"Failed to update paper account balance:\", error);\n      toast.error(\"Failed to update paper account balance\");\n    } finally {\n      setIsLoadingBalance(false);\n    }\n  };\n\n  const updateSetting = <K extends keyof SettingsData>(key: K, value: SettingsData[K]) => {\n    setSettings((prev) => ({ ...prev, [key]: value }));\n    setHasUnsavedChanges(true);\n  };\n\n  const handleSaveSettings = async () => {\n    setIsSaving(true);\n    setSaveMessage(\"\");\n\n    localStorage.setItem(\"allessandra_settings\", JSON.stringify(settings));\n\n    await new Promise((resolve) => setTimeout(resolve, 1500));\n\n    setIsSaving(false);\n    setHasUnsavedChanges(false);\n    setSaveMessage(\"Settings saved successfully!\");\n\n    setTimeout(() => {\n      setSaveMessage(\"\");\n    }, 3000);\n  };\n\n  const handleReset = () => {\n    const defaultSettings: SettingsData = {\n      defaultExecutionMode: \"requires_approval\",\n      enableSMSAlerts: true,\n      enableEmailAlerts: true,\n      enablePushNotifications: false,\n      enablePerformanceTracking: true,\n      minTradesForPerformanceData: 10,\n      defaultSlippageBudget: 0.4,\n      defaultMaxReprices: 4,\n    };\n    setSettings(defaultSettings);\n    setHasUnsavedChanges(true);\n  };\n\n  const toggleUserStatus = (userId: string) => {\n    if (!isOwner) return;\n    setUsers(\n      users.map((user) =>\n        user.id === userId\n          ? { ...user, status: user.status === \"active\" ? \"suspended\" : \"active\" }\n          : user\n      )\n    );\n    setHasUnsavedChanges(true);\n  };\n\n  const updateUserPermission = (\n    userId: string,\n    permission: keyof User[\"permissions\"],\n    value: boolean\n  ) => {\n    if (!isOwner) return;\n    setUsers(\n      users.map((user) =>\n        user.id === userId\n          ? { ...user, permissions: { ...user.permissions, [permission]: value } }\n          : user\n      )\n    );\n    setHasUnsavedChanges(true);\n  };\n\n  const toggleTradingMode = (userId: string) => {\n    if (!isOwner && userId !== currentUser.id) return;\n    setUsers(\n      users.map((user) =>\n        user.id === userId\n          ? { ...user, tradingMode: user.tradingMode === \"paper\" ? \"live\" : \"paper\" }\n          : user\n      )\n    );\n    setHasUnsavedChanges(true);\n  };\n\n  const exportTelemetryReport = () => {\n    const dataStr = JSON.stringify(telemetryData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: \"application/json\" });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `telemetry-${new Date().toISOString()}.json`;\n    link.click();\n  };\n\n  if (!isOpen) return null;\n\n  const analytics = currentUserData ? getUserAnalytics() : null;\n\n  const tabs = [\n    { id: \"personal\", label: \"Personal Settings\", icon: SettingsIcon, alwaysShow: true },\n    { id: \"subscription\", label: \"Subscription & Billing\", icon: CreditCard, alwaysShow: true },\n    { id: \"journal\", label: \"Trading Journal\", icon: BookOpen, alwaysShow: true },\n    { id: \"risk\", label: \"Risk Control\", icon: Shield, alwaysShow: true },\n    { id: \"ml-training\", label: \"ML Training\", icon: Brain, alwaysShow: true },\n    { id: \"pattern-backtest\", label: \"Pattern Backtest\", icon: BarChart3, alwaysShow: true },\n    { id: \"ml-models\", label: \"ML Models\", icon: Database, alwaysShow: true },\n    { id: \"ml-analytics\", label: \"ML Analytics\", icon: Activity, alwaysShow: true },\n    { id: \"portfolio-optimizer\", label: \"Portfolio Optimizer\", icon: Target, alwaysShow: true },\n    { id: \"sentiment\", label: \"News Sentiment\", icon: Newspaper, alwaysShow: true },\n    { id: \"ai-chat\", label: \"AI Chat\", icon: MessageSquare, alwaysShow: true },\n    { id: \"automation\", label: \"Automation\", icon: Clock, alwaysShow: true },\n    { id: \"approvals\", label: \"Approvals\", icon: CheckCircle2, alwaysShow: true },\n    { id: \"users\", label: \"User Management\", icon: Users, adminOnly: true },\n    { id: \"theme\", label: \"Theme\", icon: Palette, adminOnly: true },\n    { id: \"permissions\", label: \"Permissions\", icon: Lock, adminOnly: true },\n    { id: \"telemetry\", label: \"Telemetry\", icon: Database, adminOnly: true },\n    { id: \"trading\", label: \"Trading Control\", icon: Activity, adminOnly: true },\n  ].filter((tab) => tab.alwaysShow || (tab.adminOnly && isAdmin));\n\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        inset: 0,\n        zIndex: 50,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: \"16px\",\n        background: \"rgba(0, 0, 0, 0.7)\",\n        backdropFilter: \"blur(10px)\",\n        overflowY: \"auto\",\n        color: \"#e2e8f0\",\n      }}\n    >\n      <div\n        style={{\n          background: \"rgba(30, 41, 59, 0.8)\",\n          backdropFilter: \"blur(20px)\",\n          border: \"1px solid rgba(16, 185, 129, 0.3)\",\n          borderRadius: \"20px\",\n          boxShadow: \"0 0 40px rgba(16, 185, 129, 0.15)\",\n          maxWidth: isMobile ? \"95vw\" : \"1200px\",\n          width: \"100%\",\n          maxHeight: \"90vh\",\n          overflow: \"hidden\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          margin: isMobile ? \"16px 0\" : \"32px 0\",\n        }}\n      >\n        {/* Header */}\n        <div\n          style={{\n            padding: \"16px 24px\",\n            borderBottom: \"1px solid rgba(0, 172, 193, 0.2)\",\n            background:\n              \"linear-gradient(to right, rgba(0, 172, 193, 0.1), rgba(126, 87, 194, 0.1), rgba(0, 172, 193, 0.1))\",\n          }}\n        >\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n            <div>\n              <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\n                <SettingsIcon size={28} style={{ color: \"#00ACC1\" }} />\n                <h2 style={{ fontSize: \"24px\", fontWeight: \"bold\", color: \"#ffffff\", margin: 0 }}>\n                  {isOwner ? \"Master Control Panel\" : \"Settings\"}\n                </h2>\n              </div>\n              <p style={{ fontSize: \"14px\", color: \"#cbd5e1\", marginTop: \"4px\", marginBottom: 0 }}>\n                {isOwner\n                  ? \"System-wide configuration and user management\"\n                  : \"Configure your trading preferences and automation\"}\n              </p>\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                padding: \"8px 16px\",\n                background: \"rgba(30, 41, 59, 0.8)\",\n                border: \"1px solid rgba(100, 116, 139, 0.5)\",\n                color: \"#ffffff\",\n                borderRadius: \"8px\",\n                cursor: \"pointer\",\n                transition: \"all 0.15s ease\",\n              }}\n            >\n              ✕ Close\n            </button>\n          </div>\n\n          {isOwner && (\n            <div className=\"mt-3 px-3 py-2 bg-purple-500/20 border border-purple-500/30 rounded flex items-center gap-2\">\n              <Shield size={16} className=\"text-purple-400\" />\n              <p className=\"text-sm text-purple-400 font-semibold\">\n                System Owner Access - Full Control Enabled\n              </p>\n            </div>\n          )}\n\n          {saveMessage && (\n            <div className=\"mt-3 px-3 py-2 bg-green-500/20 border border-green-500/30 rounded flex items-center gap-2\">\n              <CheckCircle2 size={16} className=\"text-green-400\" />\n              <p className=\"text-sm text-green-400 font-semibold\">{saveMessage}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Tabs */}\n        <div className=\"px-6 py-3 border-b border-cyan-500/20 bg-slate-900/50 flex gap-2 overflow-x-auto\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            const isActive = activeTab === tab.id;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as string)}\n                className={`\n                  px-4 py-2.5 rounded-lg font-medium text-sm transition-all flex items-center gap-2 whitespace-nowrap\n                  ${\n                    isActive\n                      ? \"text-white border-2 shadow-lg\"\n                      : \"text-slate-400 hover:bg-slate-700/80 border-2 border-slate-700/30 hover:border-cyan-400/30\"\n                  }\n                `}\n                style={\n                  isActive\n                    ? {\n                        background:\n                          \"linear-gradient(to right, rgba(0, 172, 193, 0.2), rgba(126, 87, 194, 0.2))\",\n                        borderColor: \"rgba(0, 172, 193, 0.5)\",\n                        backdropFilter: \"blur(10px)\",\n                        boxShadow: \"0 0 20px rgba(0, 172, 193, 0.15)\",\n                      }\n                    : {\n                        background: \"rgba(30, 41, 59, 0.6)\",\n                        backdropFilter: \"blur(8px)\",\n                      }\n                }\n              >\n                <Icon size={16} />\n                {tab.label}\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Content */}\n        <div\n          style={{\n            flex: 1,\n            overflowY: \"auto\",\n            padding: \"24px\",\n            background: \"rgba(15, 23, 42, 0.2)\",\n            color: \"#e2e8f0\",\n          }}\n        >\n          {activeTab === \"personal\" && (\n            <div className=\"space-y-6\">\n              {currentUserData && (\n                <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-xl p-5\">\n                  <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n                    <span className=\"text-xl\">👤</span>\n                    User Information\n                  </h3>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-slate-900/40 border border-slate-700/30 rounded-lg\">\n                      <div>\n                        <div className=\"text-xs text-slate-400 mb-1\">Display Name</div>\n                        <div className=\"text-sm font-medium text-white\">\n                          {currentUserData.displayName}\n                        </div>\n                      </div>\n                    </div>\n\n                    {currentUserData.email && (\n                      <div className=\"flex items-center justify-between p-3 bg-slate-900/40 border border-slate-700/30 rounded-lg\">\n                        <div>\n                          <div className=\"text-xs text-slate-400 mb-1\">Email</div>\n                          <div className=\"text-sm font-medium text-white\">\n                            {currentUserData.email}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {analytics && (\n                      <div\n                        className=\"grid gap-3\"\n                        style={{ gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(2, 1fr)\" }}\n                      >\n                        <div className=\"p-3 bg-slate-900/40 border border-slate-700/30 rounded-lg\">\n                          <div className=\"text-xs text-slate-400 mb-1\">Account Age</div>\n                          <div className=\"text-sm font-semibold text-cyan-400\">\n                            {analytics.accountAge}\n                          </div>\n                        </div>\n                        <div className=\"p-3 bg-slate-900/40 border border-slate-700/30 rounded-lg\">\n                          <div className=\"text-xs text-slate-400 mb-1\">Total Sessions</div>\n                          <div className=\"text-sm font-semibold text-purple-400\">\n                            {analytics.totalSessions}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    <button\n                      onClick={() => {\n                        if (\n                          window.confirm(\n                            \"Are you sure you want to clear all user data? This will log you out.\"\n                          )\n                        ) {\n                          clearUserData();\n                          window.location.reload();\n                        }\n                      }}\n                      className=\"w-full mt-2 px-4 py-2 bg-red-500/10 hover:bg-red-500/20 border border-red-500/30 text-red-400 rounded-lg transition-all text-sm font-medium\"\n                    >\n                      🗑️ Clear User Data & Logout\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-xl p-5\">\n                <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n                  <span className=\"text-xl\">🤖</span>\n                  Trading Mode\n                </h3>\n\n                <div className=\"space-y-3\">\n                  <label className=\"flex items-start gap-3 p-4 bg-slate-900/40 border border-slate-700/30 rounded-lg cursor-pointer hover:border-cyan-500/50 transition-all\">\n                    <input\n                      type=\"radio\"\n                      name=\"executionMode\"\n                      value=\"requires_approval\"\n                      checked={settings.defaultExecutionMode === \"requires_approval\"}\n                      onChange={() => updateSetting(\"defaultExecutionMode\", \"requires_approval\")}\n                      className=\"mt-1\"\n                    />\n                    <div>\n                      <div className=\"text-sm font-semibold text-white mb-1\">\n                        Requires Approval (Recommended)\n                      </div>\n                      <div className=\"text-xs text-slate-400\">\n                        All trades require your manual approval via SMS/Email before execution.\n                      </div>\n                    </div>\n                  </label>\n\n                  <label className=\"flex items-start gap-3 p-4 bg-slate-900/40 border border-slate-700/30 rounded-lg cursor-pointer hover:border-purple-500/50 transition-all\">\n                    <input\n                      type=\"radio\"\n                      name=\"executionMode\"\n                      value=\"autopilot\"\n                      checked={settings.defaultExecutionMode === \"autopilot\"}\n                      onChange={() => updateSetting(\"defaultExecutionMode\", \"autopilot\")}\n                      className=\"mt-1\"\n                    />\n                    <div>\n                      <div className=\"text-sm font-semibold text-white mb-1\">Autopilot Mode</div>\n                      <div className=\"text-xs text-slate-400\">\n                        Trades execute automatically based on strategy rules.\n                      </div>\n                    </div>\n                  </label>\n                </div>\n              </div>\n\n              <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-xl p-5\">\n                <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n                  <Bell size={20} />\n                  Notifications\n                </h3>\n\n                <div className=\"space-y-3\">\n                  {[\n                    {\n                      key: \"enableSMSAlerts\",\n                      label: \"SMS Alerts\",\n                      desc: \"Text messages for trade proposals\",\n                    },\n                    {\n                      key: \"enableEmailAlerts\",\n                      label: \"Email Alerts\",\n                      desc: \"Email notifications for trades\",\n                    },\n                    {\n                      key: \"enablePushNotifications\",\n                      label: \"Push Notifications\",\n                      desc: \"Browser push notifications\",\n                    },\n                  ].map(({ key, label, desc }) => (\n                    <label\n                      key={key}\n                      className=\"flex items-center justify-between p-3 bg-slate-900/40 border border-slate-700/30 rounded-lg cursor-pointer hover:border-cyan-500/30 transition-all\"\n                    >\n                      <div>\n                        <div className=\"text-sm font-medium text-white\">{label}</div>\n                        <div className=\"text-xs text-slate-400\">{desc}</div>\n                      </div>\n                      <input\n                        type=\"checkbox\"\n                        checked={settings[key as keyof SettingsData] as boolean}\n                        onChange={(e) => updateSetting(key as any, e.target.checked)}\n                        className=\"w-5 h-5\"\n                      />\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Paper Trading Account Balance Section */}\n              <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-xl p-5\">\n                <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n                  <span className=\"text-xl\">💵</span>\n                  Paper Trading Account Balance\n                </h3>\n\n                <div className=\"space-y-4\">\n                  {/* Current Account Info Display */}\n                  {accountInfo && (\n                    <div className=\"p-4 bg-slate-900/40 border border-slate-700/30 rounded-lg\">\n                      <div\n                        className=\"grid gap-3\"\n                        style={{ gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(3, 1fr)\" }}\n                      >\n                        <div>\n                          <div className=\"text-xs text-slate-400 mb-1\">Total Equity</div>\n                          <div className=\"text-lg font-semibold text-white\">\n                            ${accountInfo.equity.toLocaleString()}\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-xs text-slate-400 mb-1\">Available Cash</div>\n                          <div className=\"text-lg font-semibold text-cyan-400\">\n                            ${accountInfo.cash.toLocaleString()}\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-xs text-slate-400 mb-1\">Buying Power</div>\n                          <div className=\"text-lg font-semibold text-purple-400\">\n                            ${accountInfo.buying_power.toLocaleString()}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Balance Input */}\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <label className=\"block text-sm font-medium text-slate-300\">\n                        Set Paper Account Balance ($)\n                      </label>\n                      {isLoadingBalance && (\n                        <div className=\"text-xs text-cyan-400 animate-pulse\">Updating...</div>\n                      )}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <input\n                        type=\"number\"\n                        min=\"1000\"\n                        max=\"10000000\"\n                        step=\"1000\"\n                        value={paperAccountBalance}\n                        onChange={(e) => setPaperAccountBalance(Number(e.target.value))}\n                        className=\"flex-1 px-4 py-3 bg-slate-900/60 border border-slate-700/50 rounded-lg text-white font-semibold text-lg outline-none focus:ring-2 focus:ring-cyan-500/50\"\n                        placeholder=\"100000\"\n                      />\n                      <button\n                        onClick={updatePaperAccountBalance}\n                        disabled={isLoadingBalance}\n                        className=\"px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        {isLoadingBalance ? \"Updating...\" : \"Update\"}\n                      </button>\n                    </div>\n                    <div className=\"flex justify-between text-xs text-slate-400 mt-2\">\n                      <span>Min: $1,000</span>\n                      <span>Default: $100,000</span>\n                      <span>Max: $10,000,000</span>\n                    </div>\n                  </div>\n\n                  {/* Info Banner */}\n                  <div className=\"p-3 bg-yellow-500/10 border border-yellow-500/30 rounded flex items-start gap-2\">\n                    <AlertTriangle size={16} className=\"text-yellow-400 mt-0.5\" />\n                    <p className=\"text-xs text-yellow-400\">\n                      <strong>Paper Trading Only:</strong> This setting controls your simulated\n                      account balance for paper trading. Real money trading requires separate\n                      authentication and approval.\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-xl p-5\">\n                <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n                  <Lock size={20} />\n                  Risk Parameters\n                </h3>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Slippage Budget (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"1\"\n                      step=\"0.05\"\n                      value={settings.defaultSlippageBudget}\n                      onChange={(e) =>\n                        updateSetting(\"defaultSlippageBudget\", Number(e.target.value))\n                      }\n                      className=\"w-full px-4 py-3 bg-slate-900/60 border border-slate-700/50 rounded-lg text-white outline-none focus:ring-2 focus:ring-cyan-500/50\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Max Order Reprices\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"10\"\n                      value={settings.defaultMaxReprices}\n                      onChange={(e) => updateSetting(\"defaultMaxReprices\", Number(e.target.value))}\n                      className=\"w-full px-4 py-3 bg-slate-900/60 border border-slate-700/50 rounded-lg text-white outline-none focus:ring-2 focus:ring-cyan-500/50\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Risk Tolerance Slider Section */}\n              <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-xl p-5\">\n                <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n                  <Target size={20} className=\"text-cyan-400\" />\n                  Risk Tolerance Profile\n                </h3>\n\n                <div className=\"space-y-4\">\n                  {/* Current Risk Level Display */}\n                  <div className=\"p-4 bg-slate-900/40 border border-slate-700/30 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"text-sm font-medium text-slate-300\">Current Risk Level</div>\n                      <div\n                        className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                          riskTolerance <= 33\n                            ? \"bg-green-500/20 text-green-400 border border-green-500/30\"\n                            : riskTolerance <= 66\n                              ? \"bg-yellow-500/20 text-yellow-400 border border-yellow-500/30\"\n                              : \"bg-red-500/20 text-red-400 border border-red-500/30\"\n                        }`}\n                      >\n                        {riskLimits?.risk_category ||\n                          (riskTolerance <= 33\n                            ? \"Conservative\"\n                            : riskTolerance <= 66\n                              ? \"Moderate\"\n                              : \"Aggressive\")}\n                      </div>\n                    </div>\n                    <div className=\"text-2xl font-bold text-white\">{riskTolerance}%</div>\n                    <div className=\"text-xs text-slate-400 mt-1\">\n                      {riskLimits?.description || \"Loading limits...\"}\n                    </div>\n                  </div>\n\n                  {/* Risk Tolerance Slider */}\n                  <div>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <label className=\"block text-sm font-medium text-slate-300\">\n                        Adjust Risk Tolerance (0-100%)\n                      </label>\n                      {isLoadingRisk && (\n                        <div className=\"text-xs text-cyan-400 animate-pulse\">Updating...</div>\n                      )}\n                    </div>\n\n                    {/* Color-coded slider background */}\n                    <div className=\"relative h-3 rounded-full bg-gradient-to-r from-green-500/30 via-yellow-500/30 to-red-500/30 mb-2\">\n                      {/* Slider track markers */}\n                      <div className=\"absolute top-0 left-1/3 w-px h-full bg-slate-600\"></div>\n                      <div className=\"absolute top-0 left-2/3 w-px h-full bg-slate-600\"></div>\n                    </div>\n\n                    <input\n                      type=\"range\"\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"1\"\n                      value={riskTolerance}\n                      onChange={(e) => {\n                        const newValue = Number(e.target.value);\n                        setRiskTolerance(newValue);\n                      }}\n                      onMouseUp={(e) => {\n                        const newValue = Number((e.target as HTMLInputElement).value);\n                        updateRiskTolerance(newValue);\n                      }}\n                      onTouchEnd={(e) => {\n                        const newValue = Number((e.target as HTMLInputElement).value);\n                        updateRiskTolerance(newValue);\n                      }}\n                      className=\"w-full h-2 rounded-lg appearance-none cursor-pointer\"\n                      style={{\n                        background: `linear-gradient(to right,\n                          ${\n                            riskTolerance <= 33\n                              ? \"#10b981\"\n                              : riskTolerance <= 66\n                                ? \"#f59e0b\"\n                                : \"#ef4444\"\n                          } ${riskTolerance}%,\n                          rgba(100, 116, 139, 0.3) ${riskTolerance}%)`,\n                      }}\n                    />\n\n                    <div className=\"flex justify-between text-xs text-slate-400 mt-2\">\n                      <span className=\"text-green-400\">Conservative (0-33%)</span>\n                      <span className=\"text-yellow-400\">Moderate (34-66%)</span>\n                      <span className=\"text-red-400\">Aggressive (67-100%)</span>\n                    </div>\n                  </div>\n\n                  {/* Position Sizing Limits Display */}\n                  {riskLimits && (\n                    <div\n                      className=\"grid gap-3 mt-4\"\n                      style={{ gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(2, 1fr)\" }}\n                    >\n                      <div className=\"p-3 bg-slate-900/40 border border-slate-700/30 rounded-lg\">\n                        <div className=\"text-xs text-slate-400 mb-1\">Max Position Size</div>\n                        <div className=\"text-lg font-semibold text-cyan-400\">\n                          {riskLimits.max_position_size_percent}%\n                        </div>\n                      </div>\n                      <div className=\"p-3 bg-slate-900/40 border border-slate-700/30 rounded-lg\">\n                        <div className=\"text-xs text-slate-400 mb-1\">Max Concurrent Positions</div>\n                        <div className=\"text-lg font-semibold text-purple-400\">\n                          {riskLimits.max_positions}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Info Banner */}\n                  <div className=\"p-3 bg-cyan-500/10 border border-cyan-500/30 rounded flex items-start gap-2 mt-4\">\n                    <Shield size={16} className=\"text-cyan-400 mt-0.5\" />\n                    <p className=\"text-xs text-cyan-400\">\n                      <strong>Backend Safeguards:</strong> Position sizing limits are enforced\n                      server-side to prevent excessive risk exposure. Strategy templates\n                      automatically adjust to your risk profile.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === \"subscription\" && <SubscriptionManager />}\n          {activeTab === \"journal\" && <TradingJournal />}\n          {activeTab === \"risk\" && <RiskDashboard />}\n          {activeTab === \"ml-training\" && (\n            <div className=\"min-h-[500px]\">\n              <MLTrainingDashboard />\n            </div>\n          )}\n          {activeTab === \"pattern-backtest\" && (\n            <div className=\"min-h-[500px]\">\n              <PatternBacktestDashboard />\n            </div>\n          )}\n          {activeTab === \"ml-models\" && (\n            <div className=\"min-h-[500px]\">\n              <MLModelManagement />\n            </div>\n          )}\n          {activeTab === \"ml-analytics\" && (\n            <div className=\"min-h-[500px]\">\n              <MLAnalyticsDashboard />\n            </div>\n          )}\n          {activeTab === \"portfolio-optimizer\" && (\n            <div className=\"min-h-[500px]\">\n              <PortfolioOptimizer />\n            </div>\n          )}\n          {activeTab === \"sentiment\" && (\n            <div className=\"min-h-[500px]\">\n              <SentimentDashboard />\n            </div>\n          )}\n          {activeTab === \"ai-chat\" && (\n            <div className=\"min-h-[500px]\">\n              <ClaudeAIChat />\n            </div>\n          )}\n          {activeTab === \"automation\" && (\n            <div className=\"min-h-[500px]\">\n              <SchedulerSettings />\n            </div>\n          )}\n          {activeTab === \"approvals\" && (\n            <div className=\"min-h-[500px]\">\n              <ApprovalQueue />\n            </div>\n          )}\n\n          {activeTab === \"users\" && isAdmin && (\n            <UserManagementTab\n              users={users}\n              isOwner={isOwner}\n              currentUserId={currentUser.id}\n              onToggleStatus={toggleUserStatus}\n            />\n          )}\n\n          {activeTab === \"theme\" && isAdmin && (\n            <ThemeCustomizationTab\n              themeCustom={themeCustom}\n              onUpdate={(key: keyof ThemeCustomization, value: string) => {\n                setThemeCustom({ ...themeCustom, [key]: value });\n                setHasUnsavedChanges(true);\n              }}\n            />\n          )}\n\n          {activeTab === \"permissions\" && isAdmin && (\n            <PermissionsTab\n              users={users}\n              isOwner={isOwner}\n              onUpdatePermission={updateUserPermission}\n            />\n          )}\n\n          {activeTab === \"telemetry\" && isAdmin && (\n            <TelemetryTab\n              enabled={telemetryEnabled}\n              data={telemetryData}\n              users={users}\n              onToggle={() => setTelemetryEnabled(!telemetryEnabled)}\n              onExport={exportTelemetryReport}\n            />\n          )}\n\n          {activeTab === \"trading\" && isAdmin && (\n            <TradingControlTab\n              users={users}\n              isOwner={isOwner}\n              currentUserId={currentUser.id}\n              onToggleTradingMode={toggleTradingMode}\n            />\n          )}\n        </div>\n\n        {/* Footer */}\n        <div\n          style={{\n            padding: \"16px 24px\",\n            borderTop: \"1px solid rgba(0, 172, 193, 0.2)\",\n            background: \"rgba(15, 23, 42, 0.5)\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <button\n            onClick={handleReset}\n            style={{\n              padding: \"8px 16px\",\n              background: \"rgba(30, 41, 59, 0.8)\",\n              border: \"1px solid rgba(100, 116, 139, 0.5)\",\n              color: \"#ffffff\",\n              borderRadius: \"8px\",\n              cursor: \"pointer\",\n              transition: \"all 0.15s ease\",\n              fontSize: \"14px\",\n            }}\n          >\n            Reset to Defaults\n          </button>\n          <div style={{ display: \"flex\", gap: \"12px\" }}>\n            <button\n              onClick={onClose}\n              style={{\n                padding: \"8px 20px\",\n                background: \"rgba(30, 41, 59, 0.8)\",\n                border: \"1px solid rgba(100, 116, 139, 0.5)\",\n                color: \"#ffffff\",\n                borderRadius: \"8px\",\n                cursor: \"pointer\",\n                transition: \"all 0.15s ease\",\n              }}\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleSaveSettings}\n              disabled={isSaving}\n              style={{\n                padding: \"8px 20px\",\n                background: \"linear-gradient(to right, #00ACC1, #7E57C2)\",\n                color: \"#ffffff\",\n                fontWeight: \"600\",\n                borderRadius: \"8px\",\n                border: \"none\",\n                cursor: isSaving ? \"not-allowed\" : \"pointer\",\n                opacity: isSaving ? 0.5 : 1,\n                transition: \"all 0.15s ease\",\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: \"8px\",\n              }}\n            >\n              <Save size={18} />\n              {isSaving ? \"Saving...\" : hasUnsavedChanges ? \"Save Changes\" : \"✓ Saved\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction UserManagementTab({ users, isOwner, currentUserId, onToggleStatus }: unknown) {\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n        <Users size={20} />\n        User Management\n      </h3>\n\n      {users.map((user: User) => (\n        <div key={user.id} className=\"p-4 bg-slate-800/50 border border-slate-700/50 rounded-xl\">\n          <div className=\"flex justify-between items-start mb-3\">\n            <div>\n              <div className=\"flex items-center gap-2 mb-1\">\n                <h4 className=\"text-white font-semibold\">{user.name}</h4>\n                <span\n                  className={`px-2 py-1 rounded text-xs font-semibold ${\n                    user.role === \"owner\"\n                      ? \"bg-purple-500/20 text-purple-400\"\n                      : user.role === \"beta\"\n                        ? \"bg-cyan-500/20 text-cyan-400\"\n                        : user.role === \"alpha\"\n                          ? \"bg-yellow-500/20 text-yellow-400\"\n                          : \"bg-slate-500/20 text-slate-400\"\n                  }`}\n                >\n                  {user.role.toUpperCase()}\n                </span>\n                <span\n                  className={`px-2 py-1 rounded text-xs font-semibold ${\n                    user.status === \"active\"\n                      ? \"bg-green-500/20 text-green-400\"\n                      : \"bg-red-500/20 text-red-400\"\n                  }`}\n                >\n                  {user.status.toUpperCase()}\n                </span>\n              </div>\n              <p className=\"text-sm text-slate-400\">{user.email}</p>\n            </div>\n\n            {isOwner && user.id !== currentUserId && (\n              <button\n                onClick={() => onToggleStatus(user.id)}\n                className={`px-3 py-1 rounded text-sm font-medium ${\n                  user.status === \"active\"\n                    ? \"bg-red-500/20 text-red-400 hover:bg-red-500/30\"\n                    : \"bg-green-500/20 text-green-400 hover:bg-green-500/30\"\n                }`}\n              >\n                {user.status === \"active\" ? \"Suspend\" : \"Activate\"}\n              </button>\n            )}\n          </div>\n\n          <div\n            className=\"grid gap-2 text-sm\"\n            style={{ gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(3, 1fr)\" }}\n          >\n            <div>\n              <div className=\"text-xs text-slate-500\">Created</div>\n              <div className=\"text-white\">{user.createdAt}</div>\n            </div>\n            <div>\n              <div className=\"text-xs text-slate-500\">Last Login</div>\n              <div className=\"text-white\">{user.lastLogin}</div>\n            </div>\n            <div>\n              <div className=\"text-xs text-slate-500\">Trading Mode</div>\n              <div\n                className={`font-semibold ${user.tradingMode === \"live\" ? \"text-red-400\" : \"text-yellow-400\"}`}\n              >\n                {user.tradingMode.toUpperCase()}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction ThemeCustomizationTab({ themeCustom, onUpdate }: unknown) {\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n        <Palette size={20} />\n        Theme Customization\n      </h3>\n\n      <div\n        className=\"grid gap-4\"\n        style={{ gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(2, 1fr)\" }}\n      >\n        {Object.entries(themeCustom).map(([key, value]) => (\n          <div key={key}>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2 capitalize\">\n              {key.replace(/([A-Z])/g, \" $1\").trim()}\n            </label>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"color\"\n                value={value as string}\n                onChange={(e) => onUpdate(key, e.target.value)}\n                className=\"w-16 h-10 rounded border border-slate-700/50 cursor-pointer\"\n              />\n              <input\n                type=\"text\"\n                value={value as string}\n                onChange={(e) => onUpdate(key, e.target.value)}\n                className=\"flex-1 px-3 py-2 bg-slate-900/60 border border-slate-700/50 rounded text-white\"\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"mt-4 p-3 bg-purple-500/10 border border-purple-500/30 rounded flex items-start gap-2\">\n        <AlertTriangle size={16} className=\"text-purple-400 mt-0.5\" />\n        <p className=\"text-sm text-purple-400\">\n          Theme changes will apply system-wide to all users after saving.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction PermissionsTab({ users, isOwner, onUpdatePermission }: unknown) {\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n        <Shield size={20} />\n        User Permissions\n      </h3>\n\n      {users.map((user: User) => (\n        <div key={user.id} className=\"p-4 bg-slate-800/50 border border-slate-700/50 rounded-xl\">\n          <h4 className=\"text-white font-semibold mb-3\">\n            {user.name} ({user.role})\n          </h4>\n\n          <div\n            className=\"grid gap-3\"\n            style={{ gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(2, 1fr)\" }}\n          >\n            {Object.entries(user.permissions).map(([permission, enabled]) => (\n              <label\n                key={permission}\n                className=\"flex items-center gap-2 cursor-pointer\"\n                style={{ opacity: isOwner ? 1 : 0.6 }}\n              >\n                <input\n                  type=\"checkbox\"\n                  checked={enabled as boolean}\n                  onChange={(e) =>\n                    isOwner && onUpdatePermission(user.id, permission, e.target.checked)\n                  }\n                  disabled={!isOwner}\n                  className=\"w-4 h-4\"\n                />\n                <span className=\"text-sm text-white\">\n                  {permission.replace(/([A-Z])/g, \" $1\").trim()}\n                </span>\n              </label>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction TelemetryTab({ enabled, data, users, onToggle, onExport }: unknown) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n          <Database size={20} />\n          Telemetry & Usage Logs\n        </h3>\n\n        <button\n          onClick={onToggle}\n          className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all ${\n            enabled\n              ? \"bg-green-500/20 text-green-400 border border-green-500/50\"\n              : \"bg-slate-800/80 text-slate-400 border border-slate-700/50\"\n          }`}\n        >\n          {enabled ? <ToggleRight size={20} /> : <ToggleLeft size={20} />}\n          {enabled ? \"Enabled\" : \"Disabled\"}\n        </button>\n      </div>\n\n      {enabled && data.length > 0 && (\n        <>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-slate-700/50\">\n                  <th className=\"px-3 py-2 text-left text-xs text-slate-400 font-semibold\">Time</th>\n                  <th className=\"px-3 py-2 text-left text-xs text-slate-400 font-semibold\">User</th>\n                  <th className=\"px-3 py-2 text-left text-xs text-slate-400 font-semibold\">\n                    Component\n                  </th>\n                  <th className=\"px-3 py-2 text-left text-xs text-slate-400 font-semibold\">\n                    Action\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map((log: TelemetryData, i: number) => (\n                  <tr key={i} className=\"border-b border-slate-700/30\">\n                    <td className=\"px-3 py-2 text-sm text-white\">\n                      {new Date(log.timestamp).toLocaleTimeString()}\n                    </td>\n                    <td className=\"px-3 py-2 text-sm text-white\">\n                      {users.find((u: User) => u.id === log.userId)?.name || log.userId}\n                    </td>\n                    <td className=\"px-3 py-2 text-sm text-slate-400\">{log.component}</td>\n                    <td className=\"px-3 py-2\">\n                      <span className=\"px-2 py-1 bg-cyan-500/20 text-cyan-400 rounded text-xs font-semibold\">\n                        {log.action}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          <button\n            onClick={onExport}\n            className=\"flex items-center gap-2 px-4 py-2 bg-cyan-500 hover:bg-cyan-600 text-white rounded-lg font-medium transition-all\"\n          >\n            <FileText size={18} />\n            Export Report\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction TradingControlTab({ users, isOwner, currentUserId, onToggleTradingMode }: unknown) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Kill Switch Section */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n          <Activity size={20} />\n          Emergency Kill Switch\n        </h3>\n        <KillSwitchToggle />\n      </div>\n\n      {/* Trading Mode Control Section */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n          <Activity size={20} />\n          Trading Mode Control (Paper vs Live)\n        </h3>\n\n        {!isOwner && (\n          <div className=\"p-3 bg-red-500/10 border border-red-500/30 rounded flex items-start gap-2 mb-4\">\n            <AlertTriangle size={16} className=\"text-red-400 mt-0.5\" />\n            <p className=\"text-sm text-red-400\">\n              Only the system owner can toggle between Paper and Live trading modes.\n            </p>\n          </div>\n        )}\n\n        {users.map((user: User) => (\n          <div key={user.id} className=\"p-4 bg-slate-800/50 border border-slate-700/50 rounded-xl\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h4 className=\"text-white font-semibold\">{user.name}</h4>\n                <p className=\"text-sm text-slate-400\">{user.email}</p>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-right\">\n                  <div className=\"text-xs text-slate-400 uppercase\">Trading Mode</div>\n                  <div\n                    className={`text-2xl font-bold ${user.tradingMode === \"live\" ? \"text-red-400\" : \"text-yellow-400\"}`}\n                  >\n                    {user.tradingMode.toUpperCase()}\n                  </div>\n                </div>\n\n                <button\n                  onClick={() => onToggleTradingMode(user.id)}\n                  disabled={!isOwner && user.id !== currentUserId}\n                  className={`p-3 rounded-lg border-2 transition-all ${\n                    user.tradingMode === \"live\"\n                      ? \"bg-red-500/20 border-red-500\"\n                      : \"bg-yellow-500/20 border-yellow-500\"\n                  } ${!isOwner && user.id !== currentUserId ? \"opacity-50 cursor-not-allowed\" : \"cursor-pointer hover:opacity-80\"}`}\n                >\n                  {user.tradingMode === \"live\" ? (\n                    <ToggleRight size={32} className=\"text-red-400\" />\n                  ) : (\n                    <ToggleLeft size={32} className=\"text-yellow-400\" />\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {user.tradingMode === \"live\" && (\n              <div className=\"mt-3 p-2 bg-red-500/10 border border-red-500/30 rounded flex items-center gap-2\">\n                <AlertTriangle size={14} className=\"text-red-400\" />\n                <span className=\"text-xs text-red-400 font-semibold\">\n                  LIVE TRADING ACTIVE: Real money will be used for all trades.\n                </span>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\StatusBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\StockLookup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\StrategyBuilderAI.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2132,2135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2132,2135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4715,4718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4715,4718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5893,5896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5893,5896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6308,6311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6308,6311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AI-Powered Strategy Builder\n * Natural language strategy generation with visual editing\n * NOTE: TypeScript checking disabled temporarily - needs interface fixes\n */\n\nimport {\n  AlertCircle,\n  Award,\n  BarChart3,\n  Brain,\n  Code2,\n  Copy,\n  Edit3,\n  Loader2,\n  Play,\n  Save,\n  Search,\n  Shield,\n  Sparkles,\n  Target,\n  Trash2,\n} from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\nimport { claudeAI } from \"../lib/aiAdapter\";\nimport { theme } from \"../styles/theme\";\nimport { GlassBadge, GlassButton, GlassCard } from \"./GlassmorphicComponents\";\nimport StockLookup from \"./StockLookup\";\nimport TemplateCustomizationModal from \"./TemplateCustomizationModal\";\ninterface Strategy {\n  id?: string;\n  name: string;\n  entry: string[];\n  exit: string[];\n  riskManagement?: string[] | { maxDrawdown?: number; [key: string]: unknown };\n  code?: string;\n  status?: string;\n  entryRules?: Array<{\n    condition: string;\n    value: string;\n    operator: string;\n  }>;\n  exitRules?: Array<{\n    condition: string;\n    value: string;\n    operator: string;\n  }>;\n  positionSizing?: {\n    method: string;\n    percentage: number;\n    maxRisk: number;\n  };\n  aiPrompt?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface SavedStrategy extends Omit<Strategy, \"id\"> {\n  id: string;\n  aiPrompt?: string;\n  status?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  entryRules?: Array<{\n    condition: string;\n    value: string;\n    operator: string;\n  }>;\n  exitRules?: Array<{\n    condition: string;\n    value: string;\n    operator: string;\n  }>;\n  positionSizing?: {\n    method: string;\n    percentage: number;\n    maxRisk: number;\n  };\n  backtestResults?: {\n    winRate: number;\n    totalTrades: number;\n    profitFactor: number;\n  };\n}\n\ninterface Template {\n  id: string;\n  name: string;\n  description: string;\n  strategy_type: string;\n  risk_level: string;\n  compatibility_score: number;\n  expected_win_rate: number;\n  avg_return_percent: number;\n  max_drawdown_percent: number;\n  recommended_for: string[];\n  config: any;\n}\n\nexport default function StrategyBuilderAI() {\n  const isMobile = useIsMobile();\n  const [view, setView] = useState<\"create\" | \"library\">(\"library\");\n  const [nlInput, setNlInput] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [currentStrategy, setCurrentStrategy] = useState<Strategy | null>(null);\n  const [savedStrategies, setSavedStrategies] = useState<SavedStrategy[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  // Template gallery state\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [isLoadingTemplates, setIsLoadingTemplates] = useState(false);\n  const [templatesError, setTemplatesError] = useState<string | null>(null);\n  const [userRiskTolerance, setUserRiskTolerance] = useState<number>(50);\n  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);\n  const [showCustomizationModal, setShowCustomizationModal] = useState(false);\n\n  // Stock research state\n  const [researchSymbol, setResearchSymbol] = useState(\"\");\n  const [showStockLookup, setShowStockLookup] = useState(false);\n\n  // Load saved strategies from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem(\"ai_trader_strategies\");\n    if (saved) {\n      try {\n        setSavedStrategies(JSON.parse(saved));\n      } catch (e) {\n        console.error(\"Failed to load strategies:\", e);\n      }\n    }\n  }, []);\n\n  // Save strategies to localStorage whenever they change\n  useEffect(() => {\n    if (savedStrategies.length > 0) {\n      localStorage.setItem(\"ai_trader_strategies\", JSON.stringify(savedStrategies));\n    }\n  }, [savedStrategies]);\n\n  // Fetch templates when library view is opened\n  useEffect(() => {\n    if (view === \"library\") {\n      fetchTemplates();\n    }\n  }, [view]);\n\n  const fetchTemplates = async () => {\n    setIsLoadingTemplates(true);\n    setTemplatesError(null);\n\n    const apiToken = process.env.NEXT_PUBLIC_API_TOKEN || \"\";\n    const baseUrl =\n      process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL || \"https://paiid-backend.onrender.com\";\n\n    try {\n      const response = await fetch(`${baseUrl}/api/strategies/templates`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${apiToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch templates: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setTemplates(data.templates || []);\n      setUserRiskTolerance(data.user_risk_tolerance || 50);\n    } catch (err: any) {\n      console.error(\"Template fetch error:\", err);\n      setTemplatesError(err.message || \"Failed to load strategy templates\");\n    } finally {\n      setIsLoadingTemplates(false);\n    }\n  };\n\n  const handleCloneTemplate = async (template: Template) => {\n    const apiToken = process.env.NEXT_PUBLIC_API_TOKEN || \"\";\n    const baseUrl =\n      process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL || \"https://paiid-backend.onrender.com\";\n\n    try {\n      const response = await fetch(`${baseUrl}/api/strategies/templates/${template.id}/clone`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${apiToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          custom_name: `${template.name} (My Copy)`,\n          customize_config: true,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to clone template: ${response.status}`);\n      }\n\n      await response.json(); // Clone response\n      toast.success(`Template \"${template.name}\" cloned successfully!`);\n\n      // Refresh saved strategies or add to local state\n      // For now, just show success message\n    } catch (err: any) {\n      console.error(\"Clone template error:\", err);\n      toast.error(err.message || \"Failed to clone template\");\n    }\n  };\n\n  const handleGenerateStrategy = async () => {\n    if (!nlInput.trim()) return;\n\n    setIsGenerating(true);\n    setError(null);\n\n    try {\n      const strategy = await claudeAI.generateStrategy(nlInput);\n      setCurrentStrategy(strategy);\n      setView(\"create\");\n    } catch (err: any) {\n      setError(err.message || \"Failed to generate strategy\");\n      console.error(\"Strategy generation error:\", err);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleSaveStrategy = () => {\n    if (!currentStrategy) return;\n\n    // Ensure strategy has an ID\n    const strategyToSave: SavedStrategy = {\n      ...currentStrategy,\n      id: currentStrategy.id || `strategy-${Date.now()}`,\n    };\n\n    const existingIndex = savedStrategies.findIndex((s) => s.id === strategyToSave.id);\n\n    if (existingIndex >= 0) {\n      // Update existing\n      setSavedStrategies(\n        savedStrategies.map((s) =>\n          s.id === strategyToSave.id\n            ? { ...strategyToSave, updatedAt: new Date().toISOString() }\n            : s\n        )\n      );\n    } else {\n      // Add new\n      setSavedStrategies([...savedStrategies, strategyToSave]);\n    }\n\n    setView(\"library\");\n    setCurrentStrategy(null);\n    setNlInput(\"\");\n  };\n\n  const handleDeleteStrategy = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this strategy?\")) {\n      setSavedStrategies(savedStrategies.filter((s) => s.id !== id));\n    }\n  };\n\n  const handleEditStrategy = (strategy: SavedStrategy) => {\n    setCurrentStrategy(strategy);\n    setNlInput(strategy.aiPrompt || \"\");\n    setView(\"create\");\n  };\n\n  const handleActivateStrategy = (id: string) => {\n    setSavedStrategies(\n      savedStrategies.map((s) =>\n        s.id === id ? { ...s, status: s.status === \"active\" ? \"paused\" : \"active\" } : s\n      )\n    );\n  };\n\n  const accentColor = theme.workflow.strategyBuilder;\n\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        background: theme.background.primary,\n        padding: isMobile ? theme.spacing.md : theme.spacing.lg,\n        overflowY: \"auto\",\n      }}\n    >\n      <div\n        style={{\n          maxWidth: \"1400px\",\n          margin: \"0 auto\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: theme.spacing.lg,\n        }}\n      >\n        {/* Header */}\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: isMobile ? \"column\" : \"row\",\n            alignItems: isMobile ? \"stretch\" : \"center\",\n            justifyContent: \"space-between\",\n            gap: isMobile ? theme.spacing.sm : 0,\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: isMobile ? theme.spacing.sm : theme.spacing.md,\n            }}\n          >\n            <div\n              style={{\n                padding: theme.spacing.md,\n                background: `${accentColor}20`,\n                borderRadius: theme.borderRadius.lg,\n                boxShadow: theme.glow.darkPurple,\n              }}\n            >\n              <Brain style={{ width: \"32px\", height: \"32px\", color: accentColor }} />\n            </div>\n            <div>\n              <h1\n                style={{\n                  fontSize: isMobile ? \"24px\" : \"32px\",\n                  fontWeight: \"bold\",\n                  color: theme.colors.text,\n                  margin: 0,\n                }}\n              >\n                AI Strategy Builder\n              </h1>\n              <p\n                style={{\n                  color: theme.colors.textMuted,\n                  margin: \"4px 0 0 0\",\n                  fontSize: \"14px\",\n                }}\n              >\n                Create trading strategies from natural language\n              </p>\n            </div>\n          </div>\n\n          {/* View Toggle */}\n          <div style={{ display: \"flex\", gap: theme.spacing.sm }}>\n            <GlassButton\n              variant={view === \"library\" ? \"primary\" : \"secondary\"}\n              onClick={() => setView(\"library\")}\n            >\n              <Code2 style={{ width: \"18px\", height: \"18px\" }} />\n              Strategy Library\n            </GlassButton>\n            <GlassButton\n              variant={view === \"create\" ? \"primary\" : \"secondary\"}\n              onClick={() => setView(\"create\")}\n            >\n              <Sparkles style={{ width: \"18px\", height: \"18px\" }} />\n              Create New\n            </GlassButton>\n          </div>\n        </div>\n\n        {/* Error Banner */}\n        {error && (\n          <GlassCard\n            style={{\n              background: `${theme.colors.danger}10`,\n              border: `1px solid ${theme.colors.danger}40`,\n            }}\n          >\n            <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.sm }}>\n              <AlertCircle style={{ width: \"20px\", height: \"20px\", color: theme.colors.danger }} />\n              <p style={{ margin: 0, color: theme.colors.danger }}>{error}</p>\n            </div>\n          </GlassCard>\n        )}\n\n        {/* Create View */}\n        {view === \"create\" && (\n          <>\n            {/* Natural Language Input */}\n            <GlassCard glow=\"darkPurple\">\n              <h3\n                style={{\n                  fontSize: \"18px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.text,\n                  margin: `0 0 ${theme.spacing.md} 0`,\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: theme.spacing.sm,\n                }}\n              >\n                <Sparkles style={{ width: \"20px\", height: \"20px\", color: accentColor }} />\n                Describe Your Strategy\n              </h3>\n\n              <p\n                style={{\n                  color: theme.colors.textMuted,\n                  margin: `0 0 ${theme.spacing.md} 0`,\n                  fontSize: \"14px\",\n                }}\n              >\n                Tell me what you want to trade, when to enter, when to exit, and any risk\n                parameters.\n              </p>\n\n              <div style={{ display: \"flex\", flexDirection: \"column\", gap: theme.spacing.sm }}>\n                <textarea\n                  value={nlInput}\n                  onChange={(e) => setNlInput(e.target.value)}\n                  placeholder={`Example: \"Buy TSLA when RSI < 30 and volume is 2x average. Sell at 5% profit or 2% stop loss. Position size should be 10% of portfolio.\"`}\n                  disabled={isGenerating}\n                  style={{\n                    width: \"100%\",\n                    minHeight: \"120px\",\n                    padding: theme.spacing.md,\n                    background: theme.background.input,\n                    border: `1px solid ${theme.colors.border}`,\n                    borderRadius: theme.borderRadius.md,\n                    color: theme.colors.text,\n                    fontSize: \"14px\",\n                    fontFamily: \"inherit\",\n                    resize: \"vertical\",\n                    outline: \"none\",\n                    transition: theme.transitions.fast,\n                  }}\n                />\n\n                <div style={{ display: \"flex\", gap: theme.spacing.sm }}>\n                  <GlassButton\n                    onClick={handleGenerateStrategy}\n                    disabled={!nlInput.trim() || isGenerating}\n                    style={{ flex: 1 }}\n                  >\n                    {isGenerating ? (\n                      <>\n                        <Loader2\n                          className=\"animate-spin\"\n                          style={{ width: \"18px\", height: \"18px\" }}\n                        />\n                        Generating Strategy...\n                      </>\n                    ) : (\n                      <>\n                        <Sparkles style={{ width: \"18px\", height: \"18px\" }} />\n                        Generate Strategy\n                      </>\n                    )}\n                  </GlassButton>\n\n                  {currentStrategy && (\n                    <GlassButton\n                      onClick={handleSaveStrategy}\n                      variant=\"workflow\"\n                      workflowColor=\"strategyBuilder\"\n                    >\n                      <Save style={{ width: \"18px\", height: \"18px\" }} />\n                      Save Strategy\n                    </GlassButton>\n                  )}\n                </div>\n              </div>\n            </GlassCard>\n\n            {/* Stock Research Section */}\n            <GlassCard>\n              <h3\n                style={{\n                  fontSize: \"18px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.text,\n                  margin: `0 0 ${theme.spacing.md} 0`,\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: theme.spacing.sm,\n                }}\n              >\n                <Search style={{ width: \"20px\", height: \"20px\", color: theme.colors.info }} />\n                Research Symbol\n              </h3>\n\n              <p\n                style={{\n                  color: theme.colors.textMuted,\n                  margin: `0 0 ${theme.spacing.md} 0`,\n                  fontSize: \"14px\",\n                }}\n              >\n                Look up stock data and technical indicators before building your strategy\n              </p>\n\n              <div\n                style={{\n                  display: \"flex\",\n                  gap: theme.spacing.sm,\n                  marginBottom: showStockLookup ? theme.spacing.lg : 0,\n                }}\n              >\n                <input\n                  type=\"text\"\n                  value={researchSymbol}\n                  onChange={(e) => setResearchSymbol(e.target.value.toUpperCase())}\n                  placeholder=\"Enter symbol (e.g., AAPL, TSLA)\"\n                  style={{\n                    flex: 1,\n                    padding: theme.spacing.md,\n                    background: theme.background.input,\n                    border: `1px solid ${theme.colors.border}`,\n                    borderRadius: theme.borderRadius.md,\n                    color: theme.colors.text,\n                    fontSize: \"14px\",\n                    outline: \"none\",\n                  }}\n                />\n                <GlassButton\n                  onClick={() => {\n                    if (researchSymbol.trim()) {\n                      setShowStockLookup(true);\n                    }\n                  }}\n                  disabled={!researchSymbol.trim()}\n                >\n                  <Search style={{ width: \"18px\", height: \"18px\" }} />\n                  Research\n                </GlassButton>\n                {showStockLookup && (\n                  <GlassButton variant=\"secondary\" onClick={() => setShowStockLookup(false)}>\n                    Close\n                  </GlassButton>\n                )}\n              </div>\n\n              {showStockLookup && researchSymbol.trim() && (\n                <div\n                  style={{\n                    marginTop: theme.spacing.md,\n                    padding: theme.spacing.lg,\n                    background: theme.background.input,\n                    border: `1px solid ${theme.colors.border}`,\n                    borderRadius: theme.borderRadius.lg,\n                  }}\n                >\n                  <StockLookup\n                    initialSymbol={researchSymbol.trim()}\n                    showChart={true}\n                    showIndicators={true}\n                    showCompanyInfo={true}\n                    showNews={false}\n                    enableAIAnalysis={true}\n                    onSymbolSelect={(sym) => setResearchSymbol(sym)}\n                  />\n                </div>\n              )}\n            </GlassCard>\n\n            {/* Generated Strategy Preview */}\n            {currentStrategy && (\n              <GlassCard>\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    marginBottom: theme.spacing.md,\n                  }}\n                >\n                  <h3\n                    style={{\n                      fontSize: \"18px\",\n                      fontWeight: \"600\",\n                      color: theme.colors.text,\n                      margin: 0,\n                    }}\n                  >\n                    {currentStrategy.name}\n                  </h3>\n                  <GlassBadge variant=\"custom\" customColor={accentColor}>\n                    {currentStrategy.status}\n                  </GlassBadge>\n                </div>\n\n                <div\n                  style={{\n                    display: \"grid\",\n                    gridTemplateColumns: isMobile ? \"1fr\" : \"1fr 1fr\",\n                    gap: theme.spacing.lg,\n                  }}\n                >\n                  {/* Entry Rules */}\n                  <div>\n                    <h4\n                      style={{\n                        fontSize: \"14px\",\n                        fontWeight: \"600\",\n                        color: theme.colors.primary,\n                        margin: `0 0 ${theme.spacing.sm} 0`,\n                        textTransform: \"uppercase\",\n                        letterSpacing: \"0.5px\",\n                      }}\n                    >\n                      <Target\n                        style={{\n                          width: \"16px\",\n                          height: \"16px\",\n                          display: \"inline\",\n                          marginRight: \"6px\",\n                        }}\n                      />\n                      Entry Rules\n                    </h4>\n                    <div\n                      style={{ display: \"flex\", flexDirection: \"column\", gap: theme.spacing.xs }}\n                    >\n                      {currentStrategy.entryRules?.map((rule, idx) => (\n                        <div\n                          key={idx}\n                          style={{\n                            padding: theme.spacing.sm,\n                            background: `${theme.colors.primary}10`,\n                            border: `1px solid ${theme.colors.primary}30`,\n                            borderRadius: theme.borderRadius.sm,\n                            fontSize: \"13px\",\n                            color: theme.colors.text,\n                          }}\n                        >\n                          {rule.indicator} {rule.operator} {rule.value}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Exit Rules */}\n                  <div>\n                    <h4\n                      style={{\n                        fontSize: \"14px\",\n                        fontWeight: \"600\",\n                        color: theme.colors.danger,\n                        margin: `0 0 ${theme.spacing.sm} 0`,\n                        textTransform: \"uppercase\",\n                        letterSpacing: \"0.5px\",\n                      }}\n                    >\n                      <Shield\n                        style={{\n                          width: \"16px\",\n                          height: \"16px\",\n                          display: \"inline\",\n                          marginRight: \"6px\",\n                        }}\n                      />\n                      Exit Rules\n                    </h4>\n                    <div\n                      style={{ display: \"flex\", flexDirection: \"column\", gap: theme.spacing.xs }}\n                    >\n                      {currentStrategy.exitRules?.map((rule, idx) => (\n                        <div\n                          key={idx}\n                          style={{\n                            padding: theme.spacing.sm,\n                            background: `${theme.colors.danger}10`,\n                            border: `1px solid ${theme.colors.danger}30`,\n                            borderRadius: theme.borderRadius.sm,\n                            fontSize: \"13px\",\n                            color: theme.colors.text,\n                          }}\n                        >\n                          {rule.type === \"take_profit\" ? \"Take Profit\" : \"Stop Loss\"}: {rule.value}%\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Position Sizing & Risk */}\n                <div\n                  style={{\n                    marginTop: theme.spacing.md,\n                    padding: theme.spacing.md,\n                    background: `${accentColor}10`,\n                    border: `1px solid ${accentColor}30`,\n                    borderRadius: theme.borderRadius.md,\n                  }}\n                >\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <div>\n                      <p style={{ fontSize: \"12px\", color: theme.colors.textMuted, margin: 0 }}>\n                        Position Size\n                      </p>\n                      <p\n                        style={{\n                          fontSize: \"16px\",\n                          fontWeight: \"600\",\n                          color: theme.colors.text,\n                          margin: 0,\n                        }}\n                      >\n                        {currentStrategy.positionSizing?.value || 0}% of Portfolio\n                      </p>\n                    </div>\n                    <div>\n                      <p\n                        style={{\n                          fontSize: \"12px\",\n                          color: theme.colors.textMuted,\n                          margin: 0,\n                          textAlign: \"right\",\n                        }}\n                      >\n                        Max Drawdown\n                      </p>\n                      <p\n                        style={{\n                          fontSize: \"16px\",\n                          fontWeight: \"600\",\n                          color: theme.colors.text,\n                          margin: 0,\n                          textAlign: \"right\",\n                        }}\n                      >\n                        {typeof currentStrategy.riskManagement === \"object\" &&\n                        !Array.isArray(currentStrategy.riskManagement) &&\n                        currentStrategy.riskManagement?.maxDrawdown\n                          ? (currentStrategy.riskManagement.maxDrawdown * 100).toFixed(0)\n                          : \"0\"}\n                        %\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </GlassCard>\n            )}\n          </>\n        )}\n\n        {/* Library View */}\n        {view === \"library\" && (\n          <>\n            {/* Template Gallery Section */}\n            <div>\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                  marginBottom: theme.spacing.md,\n                }}\n              >\n                <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.sm }}>\n                  <Award style={{ width: \"24px\", height: \"24px\", color: accentColor }} />\n                  <h2\n                    style={{\n                      fontSize: \"24px\",\n                      fontWeight: \"600\",\n                      color: theme.colors.text,\n                      margin: 0,\n                    }}\n                  >\n                    Strategy Templates\n                  </h2>\n                </div>\n                <div style={{ fontSize: \"13px\", color: theme.colors.textMuted }}>\n                  Your Risk Tolerance:{\" \"}\n                  <span style={{ color: accentColor, fontWeight: \"600\" }}>\n                    {userRiskTolerance}%\n                  </span>\n                </div>\n              </div>\n\n              {/* Loading State */}\n              {isLoadingTemplates && (\n                <GlassCard>\n                  <div style={{ textAlign: \"center\", padding: theme.spacing.xl }}>\n                    <Loader2\n                      className=\"animate-spin\"\n                      style={{\n                        width: \"48px\",\n                        height: \"48px\",\n                        color: accentColor,\n                        margin: \"0 auto 16px\",\n                      }}\n                    />\n                    <p style={{ color: theme.colors.textMuted, margin: 0 }}>\n                      Loading strategy templates...\n                    </p>\n                  </div>\n                </GlassCard>\n              )}\n\n              {/* Error State */}\n              {templatesError && !isLoadingTemplates && (\n                <GlassCard\n                  style={{\n                    background: `${theme.colors.warning}10`,\n                    border: `1px solid ${theme.colors.warning}40`,\n                  }}\n                >\n                  <div style={{ display: \"flex\", alignItems: \"center\", gap: theme.spacing.sm }}>\n                    <AlertCircle\n                      style={{ width: \"20px\", height: \"20px\", color: theme.colors.warning }}\n                    />\n                    <p style={{ margin: 0, color: theme.colors.warning }}>{templatesError}</p>\n                  </div>\n                </GlassCard>\n              )}\n\n              {/* Template Grid */}\n              {!isLoadingTemplates && !templatesError && templates.length > 0 && (\n                <div\n                  style={{\n                    display: \"grid\",\n                    gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(auto-fill, minmax(400px, 1fr))\",\n                    gap: theme.spacing.md,\n                    marginBottom: theme.spacing.xl,\n                  }}\n                >\n                  {templates.map((template) => {\n                    const getRiskColor = (risk: string) => {\n                      if (risk === \"Conservative\") return theme.workflow.activePositions;\n                      if (risk === \"Moderate\") return theme.colors.warning;\n                      return theme.colors.danger;\n                    };\n\n                    const getCompatibilityColor = (score: number) => {\n                      if (score >= 80) return theme.workflow.activePositions;\n                      if (score >= 60) return theme.colors.warning;\n                      return theme.colors.textMuted;\n                    };\n\n                    return (\n                      <GlassCard key={template.id} style={{ position: \"relative\" }}>\n                        {/* Compatibility Badge */}\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: theme.spacing.md,\n                            right: theme.spacing.md,\n                            padding: \"6px 12px\",\n                            background: `${getCompatibilityColor(template.compatibility_score)}20`,\n                            border: `1px solid ${getCompatibilityColor(template.compatibility_score)}`,\n                            borderRadius: theme.borderRadius.md,\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            gap: \"6px\",\n                          }}\n                        >\n                          <BarChart3\n                            style={{\n                              width: \"14px\",\n                              height: \"14px\",\n                              color: getCompatibilityColor(template.compatibility_score),\n                            }}\n                          />\n                          <span\n                            style={{\n                              fontSize: \"13px\",\n                              fontWeight: \"600\",\n                              color: getCompatibilityColor(template.compatibility_score),\n                            }}\n                          >\n                            {Math.round(template.compatibility_score)}% Match\n                          </span>\n                        </div>\n\n                        {/* Template Header */}\n                        <div style={{ marginBottom: theme.spacing.md, paddingRight: \"100px\" }}>\n                          <h3\n                            style={{\n                              fontSize: \"18px\",\n                              fontWeight: \"600\",\n                              color: theme.colors.text,\n                              margin: `0 0 ${theme.spacing.xs} 0`,\n                            }}\n                          >\n                            {template.name}\n                          </h3>\n                          <GlassBadge\n                            variant=\"custom\"\n                            customColor={getRiskColor(template.risk_level)}\n                          >\n                            {template.risk_level}\n                          </GlassBadge>\n                        </div>\n\n                        {/* Description */}\n                        <p\n                          style={{\n                            fontSize: \"13px\",\n                            color: theme.colors.textMuted,\n                            margin: `0 0 ${theme.spacing.md} 0`,\n                            lineHeight: \"1.5\",\n                          }}\n                        >\n                          {template.description}\n                        </p>\n\n                        {/* Performance Metrics */}\n                        <div\n                          style={{\n                            display: \"grid\",\n                            gridTemplateColumns: isMobile ? \"1fr\" : \"1fr 1fr 1fr\",\n                            gap: theme.spacing.sm,\n                            marginBottom: theme.spacing.md,\n                            padding: theme.spacing.sm,\n                            background: `${accentColor}10`,\n                            borderRadius: theme.borderRadius.sm,\n                          }}\n                        >\n                          <div>\n                            <p\n                              style={{ fontSize: \"11px\", color: theme.colors.textMuted, margin: 0 }}\n                            >\n                              Win Rate\n                            </p>\n                            <p\n                              style={{\n                                fontSize: \"16px\",\n                                fontWeight: \"600\",\n                                color: theme.colors.primary,\n                                margin: 0,\n                              }}\n                            >\n                              {template.expected_win_rate}%\n                            </p>\n                          </div>\n                          <div>\n                            <p\n                              style={{ fontSize: \"11px\", color: theme.colors.textMuted, margin: 0 }}\n                            >\n                              Avg Return\n                            </p>\n                            <p\n                              style={{\n                                fontSize: \"16px\",\n                                fontWeight: \"600\",\n                                color: theme.workflow.activePositions,\n                                margin: 0,\n                              }}\n                            >\n                              {template.avg_return_percent > 0 ? \"+\" : \"\"}\n                              {template.avg_return_percent}%\n                            </p>\n                          </div>\n                          <div>\n                            <p\n                              style={{ fontSize: \"11px\", color: theme.colors.textMuted, margin: 0 }}\n                            >\n                              Max DD\n                            </p>\n                            <p\n                              style={{\n                                fontSize: \"16px\",\n                                fontWeight: \"600\",\n                                color: theme.colors.danger,\n                                margin: 0,\n                              }}\n                            >\n                              -{template.max_drawdown_percent}%\n                            </p>\n                          </div>\n                        </div>\n\n                        {/* Recommended For */}\n                        {template.recommended_for && template.recommended_for.length > 0 && (\n                          <div style={{ marginBottom: theme.spacing.md }}>\n                            <p\n                              style={{\n                                fontSize: \"11px\",\n                                color: theme.colors.textMuted,\n                                margin: `0 0 ${theme.spacing.xs} 0`,\n                                textTransform: \"uppercase\",\n                                letterSpacing: \"0.5px\",\n                              }}\n                            >\n                              Best For\n                            </p>\n                            <div\n                              style={{ display: \"flex\", flexWrap: \"wrap\", gap: theme.spacing.xs }}\n                            >\n                              {template.recommended_for.map((rec, idx) => (\n                                <span\n                                  key={idx}\n                                  style={{\n                                    fontSize: \"12px\",\n                                    padding: \"4px 8px\",\n                                    background: `${theme.colors.info}20`,\n                                    border: `1px solid ${theme.colors.info}40`,\n                                    borderRadius: theme.borderRadius.sm,\n                                    color: theme.colors.info,\n                                  }}\n                                >\n                                  {rec}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Clone Buttons */}\n                        <div style={{ display: \"flex\", gap: theme.spacing.sm }}>\n                          <GlassButton\n                            onClick={() => handleCloneTemplate(template)}\n                            variant=\"secondary\"\n                            style={{ flex: 1 }}\n                          >\n                            <Copy style={{ width: \"16px\", height: \"16px\" }} />\n                            Quick Clone\n                          </GlassButton>\n                          <GlassButton\n                            onClick={() => {\n                              setSelectedTemplate(template);\n                              setShowCustomizationModal(true);\n                            }}\n                            variant=\"workflow\"\n                            workflowColor=\"strategyBuilder\"\n                            style={{ flex: 1 }}\n                          >\n                            <Edit3 style={{ width: \"16px\", height: \"16px\" }} />\n                            Customize\n                          </GlassButton>\n                        </div>\n                      </GlassCard>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n\n            {/* My Strategies Section */}\n            <div>\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: theme.spacing.sm,\n                  marginBottom: theme.spacing.md,\n                }}\n              >\n                <Code2 style={{ width: \"24px\", height: \"24px\", color: accentColor }} />\n                <h2\n                  style={{\n                    fontSize: \"24px\",\n                    fontWeight: \"600\",\n                    color: theme.colors.text,\n                    margin: 0,\n                  }}\n                >\n                  My Strategies\n                </h2>\n              </div>\n\n              {savedStrategies.length === 0 ? (\n                <GlassCard>\n                  <div style={{ textAlign: \"center\", padding: theme.spacing.xl }}>\n                    <Brain\n                      style={{\n                        width: \"64px\",\n                        height: \"64px\",\n                        color: theme.colors.textMuted,\n                        margin: \"0 auto 16px\",\n                      }}\n                    />\n                    <h3 style={{ color: theme.colors.text, margin: `0 0 ${theme.spacing.sm} 0` }}>\n                      No Custom Strategies Yet\n                    </h3>\n                    <p\n                      style={{ color: theme.colors.textMuted, margin: `0 0 ${theme.spacing.md} 0` }}\n                    >\n                      Clone a template above or create your own from scratch\n                    </p>\n                    <GlassButton onClick={() => setView(\"create\")}>\n                      <Sparkles style={{ width: \"18px\", height: \"18px\" }} />\n                      Create Strategy\n                    </GlassButton>\n                  </div>\n                </GlassCard>\n              ) : (\n                <div\n                  style={{\n                    display: \"grid\",\n                    gridTemplateColumns: isMobile ? \"1fr\" : \"repeat(auto-fill, minmax(350px, 1fr))\",\n                    gap: theme.spacing.md,\n                  }}\n                >\n                  {savedStrategies.map((strategy) => (\n                    <GlassCard key={strategy.id}>\n                      <div style={{ marginBottom: theme.spacing.md }}>\n                        <div\n                          style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"space-between\",\n                            marginBottom: theme.spacing.sm,\n                          }}\n                        >\n                          <h3\n                            style={{\n                              fontSize: \"18px\",\n                              fontWeight: \"600\",\n                              color: theme.colors.text,\n                              margin: 0,\n                            }}\n                          >\n                            {strategy.name}\n                          </h3>\n                          <GlassBadge\n                            variant=\"custom\"\n                            customColor={\n                              strategy.status === \"active\"\n                                ? theme.colors.primary\n                                : strategy.status === \"testing\"\n                                  ? theme.colors.warning\n                                  : theme.colors.textMuted\n                            }\n                          >\n                            {strategy.status}\n                          </GlassBadge>\n                        </div>\n\n                        <p style={{ fontSize: \"12px\", color: theme.colors.textMuted, margin: 0 }}>\n                          Created{\" \"}\n                          {strategy.createdAt\n                            ? new Date(strategy.createdAt).toLocaleDateString()\n                            : \"Unknown\"}\n                        </p>\n                      </div>\n\n                      {strategy.aiPrompt && (\n                        <p\n                          style={{\n                            fontSize: \"13px\",\n                            color: theme.colors.textMuted,\n                            margin: `0 0 ${theme.spacing.md} 0`,\n                            fontStyle: \"italic\",\n                            overflow: \"hidden\",\n                            textOverflow: \"ellipsis\",\n                            display: \"-webkit-box\",\n                            WebkitLineClamp: 2,\n                            WebkitBoxOrient: \"vertical\",\n                          }}\n                        >\n                          &quot;{strategy.aiPrompt}&quot;\n                        </p>\n                      )}\n\n                      <div\n                        style={{\n                          display: \"grid\",\n                          gridTemplateColumns: isMobile ? \"1fr\" : \"1fr 1fr\",\n                          gap: theme.spacing.sm,\n                          marginBottom: theme.spacing.md,\n                          padding: theme.spacing.sm,\n                          background: `${accentColor}10`,\n                          borderRadius: theme.borderRadius.sm,\n                        }}\n                      >\n                        <div>\n                          <p style={{ fontSize: \"11px\", color: theme.colors.textMuted, margin: 0 }}>\n                            Entry Rules\n                          </p>\n                          <p\n                            style={{\n                              fontSize: \"16px\",\n                              fontWeight: \"600\",\n                              color: theme.colors.primary,\n                              margin: 0,\n                            }}\n                          >\n                            {strategy.entryRules?.length || 0}\n                          </p>\n                        </div>\n                        <div>\n                          <p style={{ fontSize: \"11px\", color: theme.colors.textMuted, margin: 0 }}>\n                            Exit Rules\n                          </p>\n                          <p\n                            style={{\n                              fontSize: \"16px\",\n                              fontWeight: \"600\",\n                              color: theme.colors.danger,\n                              margin: 0,\n                            }}\n                          >\n                            {strategy.exitRules?.length || 0}\n                          </p>\n                        </div>\n                      </div>\n\n                      {strategy.backtestResults && (\n                        <div\n                          style={{\n                            marginBottom: theme.spacing.md,\n                            padding: theme.spacing.sm,\n                            background: `${theme.colors.primary}10`,\n                            borderRadius: theme.borderRadius.sm,\n                          }}\n                        >\n                          <p\n                            style={{\n                              fontSize: \"11px\",\n                              color: theme.colors.textMuted,\n                              margin: `0 0 4px 0`,\n                            }}\n                          >\n                            Backtest Results\n                          </p>\n                          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                            <span style={{ fontSize: \"13px\", color: theme.colors.text }}>\n                              Win Rate: {strategy.backtestResults.winRate}%\n                            </span>\n                            <span style={{ fontSize: \"13px\", color: theme.colors.text }}>\n                              Trades: {strategy.backtestResults.totalTrades}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n\n                      <div style={{ display: \"flex\", gap: theme.spacing.sm }}>\n                        <GlassButton\n                          onClick={() => handleEditStrategy(strategy)}\n                          variant=\"secondary\"\n                          style={{ flex: 1 }}\n                        >\n                          <Edit3 style={{ width: \"16px\", height: \"16px\" }} />\n                          Edit\n                        </GlassButton>\n                        <GlassButton\n                          onClick={() => handleActivateStrategy(strategy.id)}\n                          variant=\"workflow\"\n                          workflowColor={strategy.status === \"active\" ? \"settings\" : \"execute\"}\n                          style={{ flex: 1 }}\n                        >\n                          <Play style={{ width: \"16px\", height: \"16px\" }} />\n                          {strategy.status === \"active\" ? \"Pause\" : \"Activate\"}\n                        </GlassButton>\n                        <GlassButton\n                          onClick={() => handleDeleteStrategy(strategy.id)}\n                          variant=\"danger\"\n                        >\n                          <Trash2 style={{ width: \"16px\", height: \"16px\" }} />\n                        </GlassButton>\n                      </div>\n                    </GlassCard>\n                  ))}\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Template Customization Modal */}\n      {showCustomizationModal && (\n        <TemplateCustomizationModal\n          template={selectedTemplate}\n          onClose={() => {\n            setShowCustomizationModal(false);\n            setSelectedTemplate(null);\n          }}\n          onCloneSuccess={() => {\n            fetchTemplates(); // Refresh templates after cloning\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\SubscriptionManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Subscription Manager Component\r\n *\r\n * Handles subscription tier display, upgrades, usage tracking, and billing.\r\n *\r\n * Phase 2E: Monetization Engine - Payment UI\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { CreditCard, TrendingUp, Check, X, Zap, Crown, Gift } from 'lucide-react';\r\n\r\ninterface SubscriptionTier {\r\n  name: string;\r\n  price: number;\r\n  limits: {\r\n    ml_predictions_per_month: number;\r\n    backtests_per_month: number;\r\n    strategies: number;\r\n    watchlist_size: number;\r\n    news_articles_per_day: number;\r\n    portfolio_optimization: boolean;\r\n    advanced_ml: boolean;\r\n    priority_support: boolean;\r\n  };\r\n}\r\n\r\ninterface Subscription {\r\n  tier: string;\r\n  status: string;\r\n  price: number;\r\n  is_active: boolean;\r\n  is_trial: boolean;\r\n  current_period_end: string | null;\r\n  days_until_renewal: number | null;\r\n  cancel_at_period_end: boolean;\r\n  limits: SubscriptionTier['limits'];\r\n}\r\n\r\ninterface UsageData {\r\n  feature: string;\r\n  current_usage: number;\r\n  limit: number;\r\n  percentage_used: number;\r\n  within_limit: boolean;\r\n}\r\n\r\nconst SubscriptionManager: React.FC = () => {\r\n  const [subscription, setSubscription] = useState<Subscription | null>(null);\r\n  const [tiers, setTiers] = useState<Record<string, SubscriptionTier>>({});\r\n  const [usage, setUsage] = useState<Record<string, UsageData>>({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [upgrading, setUpgrading] = useState(false);\r\n  const [selectedTier, setSelectedTier] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchSubscriptionData();\r\n  }, []);\r\n\r\n  const fetchSubscriptionData = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Fetch current subscription\r\n      const subRes = await fetch('/api/proxy/api/subscription/current', {\r\n        headers: {\r\n          Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_TOKEN}`,\r\n        },\r\n      });\r\n      const subData = await subRes.json();\r\n      setSubscription(subData);\r\n\r\n      // Fetch available tiers\r\n      const tiersRes = await fetch('/api/proxy/api/subscription/tiers', {\r\n        headers: {\r\n          Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_TOKEN}`,\r\n        },\r\n      });\r\n      const tiersData = await tiersRes.json();\r\n      setTiers(tiersData.tiers);\r\n\r\n      // Fetch usage data\r\n      const features = ['ml_prediction', 'backtest', 'strategy', 'news'];\r\n      const usagePromises = features.map(async (feature) => {\r\n        const res = await fetch(`/api/proxy/api/subscription/usage/${feature}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_TOKEN}`,\r\n          },\r\n        });\r\n        return { feature, data: await res.json() };\r\n      });\r\n\r\n      const usageResults = await Promise.all(usagePromises);\r\n      const usageMap: Record<string, UsageData> = {};\r\n      usageResults.forEach(({ feature, data }) => {\r\n        usageMap[feature] = data;\r\n      });\r\n      setUsage(usageMap);\r\n\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Failed to fetch subscription data:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUpgrade = async (tier: string) => {\r\n    try {\r\n      setUpgrading(true);\r\n      setSelectedTier(tier);\r\n\r\n      // Create checkout session\r\n      const res = await fetch('/api/proxy/api/subscription/checkout-session', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_TOKEN}`,\r\n        },\r\n        body: JSON.stringify({\r\n          tier,\r\n          trial_days: tier === 'pro' ? 7 : null, // 7-day trial for Pro\r\n        }),\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      // Redirect to Stripe Checkout\r\n      if (data.url) {\r\n        window.location.href = data.url;\r\n      }\r\n    } catch (error) {\r\n      console.error('Upgrade failed:', error);\r\n      setUpgrading(false);\r\n      setSelectedTier(null);\r\n    }\r\n  };\r\n\r\n  const handleManageBilling = async () => {\r\n    try {\r\n      const res = await fetch('/api/proxy/api/subscription/billing-portal', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_TOKEN}`,\r\n        },\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      // Redirect to Stripe Billing Portal\r\n      if (data.url) {\r\n        window.location.href = data.url;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to open billing portal:', error);\r\n    }\r\n  };\r\n\r\n  const getTierIcon = (tier: string) => {\r\n    switch (tier) {\r\n      case 'free':\r\n        return <Gift size={24} />;\r\n      case 'pro':\r\n        return <Zap size={24} />;\r\n      case 'premium':\r\n        return <Crown size={24} />;\r\n      default:\r\n        return <CreditCard size={24} />;\r\n    }\r\n  };\r\n\r\n  const getTierColor = (tier: string) => {\r\n    switch (tier) {\r\n      case 'free':\r\n        return '#94a3b8';\r\n      case 'pro':\r\n        return '#10b981';\r\n      case 'premium':\r\n        return '#f59e0b';\r\n      default:\r\n        return '#64748b';\r\n    }\r\n  };\r\n\r\n  const renderUsageBar = (usageData: UsageData) => {\r\n    const { current_usage, limit, percentage_used, within_limit } = usageData;\r\n    const displayLimit = limit === -1 ? '∞' : limit;\r\n\r\n    return (\r\n      <div style={{ marginBottom: '20px' }}>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            marginBottom: '8px',\r\n            fontSize: '14px',\r\n            color: '#cbd5e1',\r\n          }}\r\n        >\r\n          <span style={{ textTransform: 'capitalize' }}>\r\n            {usageData.feature.replace('_', ' ')}\r\n          </span>\r\n          <span style={{ color: within_limit ? '#10b981' : '#ef4444' }}>\r\n            {current_usage} / {displayLimit}\r\n          </span>\r\n        </div>\r\n        <div\r\n          style={{\r\n            width: '100%',\r\n            height: '8px',\r\n            background: 'rgba(51, 65, 85, 0.6)',\r\n            borderRadius: '4px',\r\n            overflow: 'hidden',\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              width: limit === -1 ? '0%' : `${Math.min(percentage_used, 100)}%`,\r\n              height: '100%',\r\n              background:\r\n                percentage_used > 90\r\n                  ? 'linear-gradient(90deg, #ef4444 0%, #dc2626 100%)'\r\n                  : percentage_used > 70\r\n                  ? 'linear-gradient(90deg, #f59e0b 0%, #d97706 100%)'\r\n                  : 'linear-gradient(90deg, #10b981 0%, #059669 100%)',\r\n              transition: 'width 0.3s ease',\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderTierCard = (tierId: string, tier: SubscriptionTier) => {\r\n    const isCurrent = subscription?.tier === tierId;\r\n    const color = getTierColor(tierId);\r\n\r\n    return (\r\n      <div\r\n        key={tierId}\r\n        style={{\r\n          background: isCurrent\r\n            ? 'rgba(16, 185, 129, 0.1)'\r\n            : 'rgba(15, 23, 42, 0.6)',\r\n          border: isCurrent\r\n            ? '2px solid rgba(16, 185, 129, 0.5)'\r\n            : '1px solid rgba(71, 85, 105, 0.3)',\r\n          borderRadius: '12px',\r\n          padding: '24px',\r\n          backdropFilter: 'blur(10px)',\r\n          flex: 1,\r\n          minWidth: '280px',\r\n          position: 'relative',\r\n          transition: 'transform 0.2s ease, box-shadow 0.2s ease',\r\n        }}\r\n        onMouseEnter={(e) => {\r\n          if (!isCurrent) {\r\n            e.currentTarget.style.transform = 'translateY(-4px)';\r\n            e.currentTarget.style.boxShadow = '0 8px 24px rgba(0, 0, 0, 0.3)';\r\n          }\r\n        }}\r\n        onMouseLeave={(e) => {\r\n          e.currentTarget.style.transform = 'translateY(0)';\r\n          e.currentTarget.style.boxShadow = 'none';\r\n        }}\r\n      >\r\n        {isCurrent && (\r\n          <div\r\n            style={{\r\n              position: 'absolute',\r\n              top: '12px',\r\n              right: '12px',\r\n              background: 'rgba(16, 185, 129, 0.2)',\r\n              color: '#10b981',\r\n              padding: '4px 12px',\r\n              borderRadius: '12px',\r\n              fontSize: '12px',\r\n              fontWeight: 600,\r\n            }}\r\n          >\r\n            CURRENT\r\n          </div>\r\n        )}\r\n\r\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>\r\n          <div style={{ color, marginRight: '12px' }}>{getTierIcon(tierId)}</div>\r\n          <div>\r\n            <h3 style={{ margin: 0, fontSize: '24px', color: '#fff' }}>\r\n              {tier.name}\r\n            </h3>\r\n            <p style={{ margin: '4px 0 0 0', fontSize: '32px', fontWeight: 700, color }}>\r\n              ${tier.price}\r\n              <span style={{ fontSize: '16px', color: '#94a3b8', fontWeight: 400 }}>\r\n                /month\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ marginBottom: '20px' }}>\r\n          <div style={{ fontSize: '14px', color: '#cbd5e1', marginBottom: '12px' }}>\r\n            <strong>Features:</strong>\r\n          </div>\r\n          {renderFeatureList(tier.limits)}\r\n        </div>\r\n\r\n        {!isCurrent && (\r\n          <button\r\n            onClick={() => handleUpgrade(tierId)}\r\n            disabled={upgrading && selectedTier === tierId}\r\n            style={{\r\n              width: '100%',\r\n              padding: '12px',\r\n              background:\r\n                tierId === 'premium'\r\n                  ? 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)'\r\n                  : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\r\n              border: 'none',\r\n              borderRadius: '8px',\r\n              color: '#fff',\r\n              fontSize: '16px',\r\n              fontWeight: 600,\r\n              cursor: upgrading && selectedTier === tierId ? 'not-allowed' : 'pointer',\r\n              opacity: upgrading && selectedTier === tierId ? 0.6 : 1,\r\n            }}\r\n          >\r\n            {upgrading && selectedTier === tierId ? 'Loading...' : `Upgrade to ${tier.name}`}\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderFeatureList = (limits: SubscriptionTier['limits']) => {\r\n    const features = [\r\n      {\r\n        label: 'ML Predictions',\r\n        value: limits.ml_predictions_per_month === -1 ? 'Unlimited' : `${limits.ml_predictions_per_month}/month`,\r\n      },\r\n      {\r\n        label: 'Backtests',\r\n        value: limits.backtests_per_month === -1 ? 'Unlimited' : `${limits.backtests_per_month}/month`,\r\n      },\r\n      {\r\n        label: 'Strategies',\r\n        value: limits.strategies === -1 ? 'Unlimited' : limits.strategies,\r\n      },\r\n      {\r\n        label: 'Portfolio Optimization',\r\n        value: limits.portfolio_optimization,\r\n      },\r\n      {\r\n        label: 'Advanced ML',\r\n        value: limits.advanced_ml,\r\n      },\r\n      {\r\n        label: 'Priority Support',\r\n        value: limits.priority_support,\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <div style={{ fontSize: '13px', color: '#cbd5e1' }}>\r\n        {features.map((feature, idx) => (\r\n          <div\r\n            key={idx}\r\n            style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              marginBottom: '8px',\r\n            }}\r\n          >\r\n            {typeof feature.value === 'boolean' ? (\r\n              feature.value ? (\r\n                <Check size={16} color=\"#10b981\" style={{ marginRight: '8px' }} />\r\n              ) : (\r\n                <X size={16} color=\"#64748b\" style={{ marginRight: '8px' }} />\r\n              )\r\n            ) : (\r\n              <Check size={16} color=\"#10b981\" style={{ marginRight: '8px' }} />\r\n            )}\r\n            <span>\r\n              {feature.label}\r\n              {typeof feature.value !== 'boolean' && `: ${feature.value}`}\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        style={{\r\n          padding: '40px',\r\n          textAlign: 'center',\r\n          color: '#94a3b8',\r\n        }}\r\n      >\r\n        Loading subscription details...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      {/* Current Subscription Summary */}\r\n      {subscription && (\r\n        <div\r\n          style={{\r\n            background: 'rgba(15, 23, 42, 0.6)',\r\n            borderRadius: '12px',\r\n            padding: '24px',\r\n            marginBottom: '32px',\r\n            backdropFilter: 'blur(10px)',\r\n            border: '1px solid rgba(71, 85, 105, 0.3)',\r\n          }}\r\n        >\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <div>\r\n              <h2 style={{ margin: '0 0 8px 0', fontSize: '28px', color: '#fff' }}>\r\n                Your Subscription\r\n              </h2>\r\n              <p style={{ margin: 0, fontSize: '16px', color: '#94a3b8' }}>\r\n                {subscription.tier.charAt(0).toUpperCase() + subscription.tier.slice(1)} Plan •{' '}\r\n                {subscription.is_trial ? 'Trial Period' : subscription.status}\r\n              </p>\r\n            </div>\r\n            {subscription.tier !== 'free' && (\r\n              <button\r\n                onClick={handleManageBilling}\r\n                style={{\r\n                  padding: '12px 24px',\r\n                  background: 'rgba(71, 85, 105, 0.3)',\r\n                  border: '1px solid rgba(148, 163, 184, 0.3)',\r\n                  borderRadius: '8px',\r\n                  color: '#cbd5e1',\r\n                  fontSize: '14px',\r\n                  fontWeight: 600,\r\n                  cursor: 'pointer',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: '8px',\r\n                }}\r\n              >\r\n                <CreditCard size={16} />\r\n                Manage Billing\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {/* Usage Stats */}\r\n          <div style={{ marginTop: '32px' }}>\r\n            <h3 style={{ margin: '0 0 20px 0', fontSize: '18px', color: '#cbd5e1' }}>\r\n              Usage This Month\r\n            </h3>\r\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '20px' }}>\r\n              {Object.values(usage).map((usageData) => renderUsageBar(usageData))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Available Tiers */}\r\n      <div style={{ marginBottom: '32px' }}>\r\n        <h2 style={{ margin: '0 0 24px 0', fontSize: '28px', color: '#fff' }}>\r\n          Available Plans\r\n        </h2>\r\n        <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap' }}>\r\n          {Object.entries(tiers).map(([tierId, tier]) => renderTierCard(tierId, tier))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Billing Info */}\r\n      {subscription && subscription.tier !== 'free' && (\r\n        <div\r\n          style={{\r\n            background: 'rgba(15, 23, 42, 0.4)',\r\n            borderRadius: '8px',\r\n            padding: '16px',\r\n            fontSize: '14px',\r\n            color: '#94a3b8',\r\n            border: '1px solid rgba(71, 85, 105, 0.2)',\r\n          }}\r\n        >\r\n          <p style={{ margin: 0 }}>\r\n            {subscription.cancel_at_period_end ? (\r\n              <>\r\n                Your subscription will end on{' '}\r\n                {subscription.current_period_end\r\n                  ? new Date(subscription.current_period_end).toLocaleDateString()\r\n                  : 'N/A'}\r\n              </>\r\n            ) : (\r\n              <>\r\n                Next billing date:{' '}\r\n                {subscription.current_period_end\r\n                  ? new Date(subscription.current_period_end).toLocaleDateString()\r\n                  : 'N/A'}{' '}\r\n                ({subscription.days_until_renewal} days)\r\n              </>\r\n            )}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubscriptionManager;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\TelemetryProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\TemplateCustomizationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3469,3472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3469,3472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3556,3559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3556,3559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4597,4600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4597,4600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5264,5267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5264,5267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5380,5383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5380,5383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Template Customization Modal\n * Allows users to customize strategy template parameters before cloning\n */\n\nimport { BarChart3, Copy, Shield, Target, TrendingUp, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useIsMobile } from \"../hooks/useBreakpoint\";\nimport { theme } from \"../styles/theme\";\nimport { GlassButton } from \"./GlassmorphicComponents\";\n\ninterface Template {\n  id: string;\n  name: string;\n  description: string;\n  strategy_type: string;\n  risk_level: string;\n  compatibility_score: number;\n  expected_win_rate: number;\n  avg_return_percent: number;\n  max_drawdown_percent: number;\n  recommended_for: string[];\n  config: {\n    entry_rules?: Array<{\n      type: string;\n      value: string;\n      operator: string;\n    }>;\n    exit_rules?: Array<{\n      type: string;\n      value: number;\n      operator: string;\n    }>;\n    position_sizing?: {\n      method: string;\n      percentage: number;\n    };\n  };\n}\n\ninterface TemplateCustomizationModalProps {\n  template: Template | null;\n  onClose: () => void;\n  onCloneSuccess?: () => void;\n}\n\nexport default function TemplateCustomizationModal({\n  template,\n  onClose,\n  onCloneSuccess,\n}: TemplateCustomizationModalProps) {\n  const isMobile = useIsMobile();\n  const [customName, setCustomName] = useState(\"\");\n  const [positionSize, setPositionSize] = useState(0);\n  const [stopLoss, setStopLoss] = useState(0);\n  const [takeProfit, setTakeProfit] = useState(0);\n  const [maxPositions, setMaxPositions] = useState(0);\n  const [rsiPeriod, setRsiPeriod] = useState(14);\n  const [isCloning, setIsCloning] = useState(false);\n\n  // Initialize form values when template changes\n  useState(() => {\n    if (template) {\n      setCustomName(`${template.name} (My Copy)`);\n      setPositionSize(template.config?.position_size_percent || 10);\n      setMaxPositions(template.config?.max_positions || 5);\n      setRsiPeriod(template.config?.rsi_period || 14);\n\n      // Extract stop loss and take profit from exit rules\n      const exitRules = template.config?.exit_rules || [];\n      const stopLossRule = exitRules.find(\n        (r: { type: string; value: number }) => r.type === \"stop_loss\"\n      );\n      const takeProfitRule = exitRules.find(\n        (r: { type: string; value: number }) => r.type === \"take_profit\"\n      );\n\n      setStopLoss(stopLossRule?.value || 3);\n      setTakeProfit(takeProfitRule?.value || 8);\n    }\n  });\n\n  if (!template) return null;\n\n  const handleClone = async () => {\n    const apiToken = process.env.NEXT_PUBLIC_API_TOKEN || \"\";\n    const baseUrl =\n      process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL || \"https://paiid-backend.onrender.com\";\n\n    setIsCloning(true);\n\n    try {\n      // Build config overrides\n      const configOverrides: {\n        position_size_percent: number;\n        max_positions: number;\n        rsi_period: number;\n        stop_loss_percent: number;\n        take_profit_percent: number;\n        entry_rules: Array<{\n          type: string;\n          value: string;\n          operator: string;\n        }>;\n        exit_rules: Array<{\n          type: string;\n          value: number;\n          operator: string;\n        }>;\n      } = {\n        position_size_percent: positionSize,\n        max_positions: maxPositions,\n        rsi_period: rsiPeriod,\n      };\n\n      // Update exit rules\n      const exitRules = [...(template.config.exit_rules || [])];\n      const stopLossIndex = exitRules.findIndex((r: any) => r.type === \"stop_loss\");\n      const takeProfitIndex = exitRules.findIndex((r: any) => r.type === \"take_profit\");\n\n      if (stopLossIndex >= 0) {\n        exitRules[stopLossIndex] = { ...exitRules[stopLossIndex], value: stopLoss };\n      }\n      if (takeProfitIndex >= 0) {\n        exitRules[takeProfitIndex] = { ...exitRules[takeProfitIndex], value: takeProfit };\n      }\n\n      configOverrides.exit_rules = exitRules;\n\n      const response = await fetch(`${baseUrl}/api/strategies/templates/${template.id}/clone`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${apiToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          custom_name: customName,\n          customize_config: true,\n          config_overrides: configOverrides,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to clone template: ${response.status}`);\n      }\n\n      await response.json();\n      toast.success(`Strategy \"${customName}\" created successfully!`);\n      onClose();\n      if (onCloneSuccess) onCloneSuccess();\n    } catch (err: any) {\n      console.error(\"Clone template error:\", err);\n      toast.error(err.message || \"Failed to clone template\");\n    } finally {\n      setIsCloning(false);\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    if (risk === \"Conservative\") return theme.colors.primary; // Green/Teal for conservative\n    if (risk === \"Moderate\") return theme.colors.warning;\n    return theme.colors.danger;\n  };\n\n  // Calculate changes from template defaults\n  const originalPositionSize = template.config?.position_size_percent || 10;\n  const originalMaxPositions = template.config?.max_positions || 5;\n  const originalStopLoss =\n    template.config?.exit_rules?.find((r: any) => r.type === \"stop_loss\")?.value || 3;\n  const originalTakeProfit =\n    template.config?.exit_rules?.find((r: any) => r.type === \"take_profit\")?.value || 8;\n\n  const hasChanges =\n    positionSize !== originalPositionSize ||\n    maxPositions !== originalMaxPositions ||\n    stopLoss !== originalStopLoss ||\n    takeProfit !== originalTakeProfit ||\n    customName !== `${template.name} (My Copy)`;\n\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: \"rgba(0, 0, 0, 0.8)\",\n        backdropFilter: \"blur(4px)\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        zIndex: 1000,\n        padding: theme.spacing.lg,\n      }}\n      onClick={onClose}\n    >\n      <div\n        onClick={(e) => e.stopPropagation()}\n        style={{\n          maxWidth: isMobile ? \"95vw\" : \"700px\",\n          width: \"100%\",\n          maxHeight: \"90vh\",\n          overflowY: \"auto\",\n          background: theme.background.primary,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.borderRadius.lg,\n          padding: isMobile ? theme.spacing.md : theme.spacing.xl,\n        }}\n      >\n        {/* Header */}\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-start\",\n            justifyContent: \"space-between\",\n            marginBottom: theme.spacing.lg,\n          }}\n        >\n          <div style={{ flex: 1 }}>\n            <h2\n              style={{\n                fontSize: isMobile ? \"20px\" : \"24px\",\n                fontWeight: \"600\",\n                color: theme.colors.text,\n                margin: `0 0 ${theme.spacing.xs} 0`,\n              }}\n            >\n              Customize Template\n            </h2>\n            <p\n              style={{\n                fontSize: isMobile ? \"12px\" : \"14px\",\n                color: theme.colors.textMuted,\n                margin: 0,\n              }}\n            >\n              {template.name}\n            </p>\n          </div>\n          <button\n            onClick={onClose}\n            style={{\n              background: \"transparent\",\n              border: \"none\",\n              color: theme.colors.textMuted,\n              cursor: \"pointer\",\n              padding: theme.spacing.xs,\n              borderRadius: theme.borderRadius.md,\n              transition: theme.transitions.fast,\n            }}\n            onMouseEnter={(e) => {\n              e.currentTarget.style.background = `${theme.colors.danger}20`;\n              e.currentTarget.style.color = theme.colors.danger;\n            }}\n            onMouseLeave={(e) => {\n              e.currentTarget.style.background = \"transparent\";\n              e.currentTarget.style.color = theme.colors.textMuted;\n            }}\n          >\n            <X style={{ width: \"20px\", height: \"20px\" }} />\n          </button>\n        </div>\n\n        {/* Template Info Banner */}\n        <div\n          style={{\n            padding: theme.spacing.md,\n            background: `${getRiskColor(template.risk_level)}10`,\n            border: `1px solid ${getRiskColor(template.risk_level)}40`,\n            borderRadius: theme.borderRadius.md,\n            marginBottom: theme.spacing.lg,\n          }}\n        >\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: isMobile ? \"repeat(2, 1fr)\" : \"repeat(4, 1fr)\",\n              gap: theme.spacing.md,\n            }}\n          >\n            <div>\n              <span\n                style={{\n                  fontSize: \"11px\",\n                  color: theme.colors.textMuted,\n                  textTransform: \"uppercase\",\n                }}\n              >\n                Risk\n              </span>\n              <p\n                style={{\n                  fontSize: \"14px\",\n                  fontWeight: \"600\",\n                  color: getRiskColor(template.risk_level),\n                  margin: 0,\n                }}\n              >\n                {template.risk_level}\n              </p>\n            </div>\n            <div>\n              <span\n                style={{\n                  fontSize: \"11px\",\n                  color: theme.colors.textMuted,\n                  textTransform: \"uppercase\",\n                }}\n              >\n                Win Rate\n              </span>\n              <p\n                style={{ fontSize: \"14px\", fontWeight: \"600\", color: theme.colors.text, margin: 0 }}\n              >\n                {template.expected_win_rate}%\n              </p>\n            </div>\n            <div>\n              <span\n                style={{\n                  fontSize: \"11px\",\n                  color: theme.colors.textMuted,\n                  textTransform: \"uppercase\",\n                }}\n              >\n                Avg Return\n              </span>\n              <p\n                style={{\n                  fontSize: \"14px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.primary,\n                  margin: 0,\n                }}\n              >\n                +{template.avg_return_percent}%\n              </p>\n            </div>\n            <div>\n              <span\n                style={{\n                  fontSize: \"11px\",\n                  color: theme.colors.textMuted,\n                  textTransform: \"uppercase\",\n                }}\n              >\n                Max DD\n              </span>\n              <p\n                style={{\n                  fontSize: \"14px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.danger,\n                  margin: 0,\n                }}\n              >\n                -{template.max_drawdown_percent}%\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Customization Form */}\n        <div style={{ display: \"flex\", flexDirection: \"column\", gap: theme.spacing.lg }}>\n          {/* Strategy Name */}\n          <div>\n            <label\n              style={{\n                display: \"block\",\n                fontSize: \"13px\",\n                fontWeight: \"600\",\n                color: theme.colors.text,\n                marginBottom: theme.spacing.xs,\n              }}\n            >\n              Strategy Name\n            </label>\n            <input\n              type=\"text\"\n              value={customName}\n              onChange={(e) => setCustomName(e.target.value)}\n              placeholder=\"Enter custom name\"\n              style={{\n                width: \"100%\",\n                padding: theme.spacing.md,\n                background: theme.background.input,\n                border: `1px solid ${theme.colors.border}`,\n                borderRadius: theme.borderRadius.md,\n                color: theme.colors.text,\n                fontSize: \"14px\",\n                outline: \"none\",\n              }}\n            />\n          </div>\n\n          {/* Position Sizing */}\n          <div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                marginBottom: theme.spacing.xs,\n              }}\n            >\n              <label style={{ fontSize: \"13px\", fontWeight: \"600\", color: theme.colors.text }}>\n                <Target\n                  style={{ width: \"14px\", height: \"14px\", display: \"inline\", marginRight: \"6px\" }}\n                />\n                Position Size\n              </label>\n              <span\n                style={{\n                  fontSize: \"16px\",\n                  fontWeight: \"600\",\n                  color: theme.workflow.strategyBuilder,\n                }}\n              >\n                {positionSize}%\n              </span>\n            </div>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"20\"\n              step=\"0.5\"\n              value={positionSize}\n              onChange={(e) => setPositionSize(parseFloat(e.target.value))}\n              style={{ width: \"100%\" }}\n            />\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                fontSize: \"11px\",\n                color: theme.colors.textMuted,\n                marginTop: \"4px\",\n              }}\n            >\n              <span>Conservative (1%)</span>\n              <span>Original: {originalPositionSize}%</span>\n              <span>Aggressive (20%)</span>\n            </div>\n          </div>\n\n          {/* Stop Loss & Take Profit */}\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: isMobile ? \"1fr\" : \"1fr 1fr\",\n              gap: theme.spacing.md,\n            }}\n          >\n            <div>\n              <label\n                style={{\n                  display: \"block\",\n                  fontSize: \"13px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.text,\n                  marginBottom: theme.spacing.xs,\n                }}\n              >\n                <Shield\n                  style={{ width: \"14px\", height: \"14px\", display: \"inline\", marginRight: \"6px\" }}\n                />\n                Stop Loss %\n              </label>\n              <input\n                type=\"number\"\n                min=\"0.5\"\n                max=\"20\"\n                step=\"0.5\"\n                value={stopLoss}\n                onChange={(e) => setStopLoss(parseFloat(e.target.value) || 0)}\n                style={{\n                  width: \"100%\",\n                  padding: theme.spacing.md,\n                  background: theme.background.input,\n                  border: `1px solid ${theme.colors.border}`,\n                  borderRadius: theme.borderRadius.md,\n                  color: theme.colors.text,\n                  fontSize: \"14px\",\n                  outline: \"none\",\n                }}\n              />\n              <p style={{ fontSize: \"11px\", color: theme.colors.textMuted, margin: \"4px 0 0 0\" }}>\n                Original: {originalStopLoss}%\n              </p>\n            </div>\n\n            <div>\n              <label\n                style={{\n                  display: \"block\",\n                  fontSize: \"13px\",\n                  fontWeight: \"600\",\n                  color: theme.colors.text,\n                  marginBottom: theme.spacing.xs,\n                }}\n              >\n                <TrendingUp\n                  style={{ width: \"14px\", height: \"14px\", display: \"inline\", marginRight: \"6px\" }}\n                />\n                Take Profit %\n              </label>\n              <input\n                type=\"number\"\n                min=\"1\"\n                max=\"50\"\n                step=\"0.5\"\n                value={takeProfit}\n                onChange={(e) => setTakeProfit(parseFloat(e.target.value) || 0)}\n                style={{\n                  width: \"100%\",\n                  padding: theme.spacing.md,\n                  background: theme.background.input,\n                  border: `1px solid ${theme.colors.border}`,\n                  borderRadius: theme.borderRadius.md,\n                  color: theme.colors.text,\n                  fontSize: \"14px\",\n                  outline: \"none\",\n                }}\n              />\n              <p style={{ fontSize: \"11px\", color: theme.colors.textMuted, margin: \"4px 0 0 0\" }}>\n                Original: {originalTakeProfit}%\n              </p>\n            </div>\n          </div>\n\n          {/* Max Positions */}\n          <div>\n            <label\n              style={{\n                display: \"block\",\n                fontSize: \"13px\",\n                fontWeight: \"600\",\n                color: theme.colors.text,\n                marginBottom: theme.spacing.xs,\n              }}\n            >\n              <BarChart3\n                style={{ width: \"14px\", height: \"14px\", display: \"inline\", marginRight: \"6px\" }}\n              />\n              Max Positions\n            </label>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"10\"\n              step=\"1\"\n              value={maxPositions}\n              onChange={(e) => setMaxPositions(parseInt(e.target.value) || 0)}\n              style={{\n                width: \"100%\",\n                padding: theme.spacing.md,\n                background: theme.background.input,\n                border: `1px solid ${theme.colors.border}`,\n                borderRadius: theme.borderRadius.md,\n                color: theme.colors.text,\n                fontSize: \"14px\",\n                outline: \"none\",\n              }}\n            />\n            <p style={{ fontSize: \"11px\", color: theme.colors.textMuted, margin: \"4px 0 0 0\" }}>\n              Original: {originalMaxPositions} | Diversification vs. concentration tradeoff\n            </p>\n          </div>\n\n          {/* Changes Indicator */}\n          {hasChanges && (\n            <div\n              style={{\n                padding: theme.spacing.sm,\n                background: `${theme.colors.info}10`,\n                border: `1px solid ${theme.colors.info}40`,\n                borderRadius: theme.borderRadius.md,\n                fontSize: \"13px\",\n                color: theme.colors.info,\n              }}\n            >\n              You&apos;ve made custom changes to this template\n            </div>\n          )}\n        </div>\n\n        {/* Action Buttons */}\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: isMobile ? \"column\" : \"row\",\n            gap: theme.spacing.sm,\n            marginTop: theme.spacing.xl,\n          }}\n        >\n          <GlassButton\n            variant=\"secondary\"\n            onClick={onClose}\n            disabled={isCloning}\n            style={{ flex: 1, width: isMobile ? \"100%\" : \"auto\" }}\n          >\n            Cancel\n          </GlassButton>\n          <GlassButton\n            variant=\"workflow\"\n            workflowColor=\"strategyBuilder\"\n            onClick={handleClone}\n            disabled={isCloning || !customName.trim()}\n            style={{ flex: 1, width: isMobile ? \"100%\" : \"auto\" }}\n          >\n            {isCloning ? (\n              <>\n                <div\n                  className=\"animate-spin\"\n                  style={{\n                    width: \"16px\",\n                    height: \"16px\",\n                    border: \"2px solid currentColor\",\n                    borderTopColor: \"transparent\",\n                    borderRadius: \"50%\",\n                  }}\n                />\n                Cloning...\n              </>\n            ) : (\n              <>\n                <Copy style={{ width: \"16px\", height: \"16px\" }} />\n                Clone Strategy\n              </>\n            )}\n          </GlassButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\TradingJournal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\TradingViewChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\UserProfileDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\UserSetup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\UserSetupAI.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\WatchlistManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\WatchlistPanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchQuotes'. Either include it or remove the dependency array.","line":96,"column":6,"nodeType":"ArrayExpression","endLine":96,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [selectedWatchlistId, refreshInterval, fetchQuotes]","fix":{"range":[3027,3065],"text":"[selectedWatchlistId, refreshInterval, fetchQuotes]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\admin\\PerformanceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\auth\\AuthModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\auth\\LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\auth\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\auth\\RegisterForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\OptionsChain.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchExpirations'. Either include it or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchExpirations, symbol]","fix":{"range":[1828,1836],"text":"[fetchExpirations, symbol]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchOptionsChain'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [symbol, selectedExpiration, fetchOptionsChain]","fix":{"range":[2048,2076],"text":"[symbol, selectedExpiration, fetchOptionsChain]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\PLComparisonChart.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'chartRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'chartRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":66,"column":30,"nodeType":"Identifier","endLine":66,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12753,12756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12753,12756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":353,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13469,13472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13469,13472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { createChart, IChartApi, LineData } from \"lightweight-charts\";\nimport type { TheoreticalPayoff, PLComparison, PositionTracking, PLViewMode } from \"@/types/pnl\";\n\n/**\n * P&L Comparison Chart\n *\n * Displays theoretical vs actual P&L with three view modes:\n * - Pre-Trade: Theoretical payoff diagram with breakevens and probability\n * - Live Position: Side-by-side comparison of theoretical vs current actual\n * - Post-Trade: Final comparison with execution quality analysis\n */\n\ninterface PLComparisonChartProps {\n  mode: PLViewMode;\n  theoreticalPayoff?: TheoreticalPayoff;\n  positionTracking?: PositionTracking;\n  comparison?: PLComparison;\n  onSaveBaseline?: () => void;\n}\n\nexport default function PLComparisonChart({\n  mode,\n  theoreticalPayoff,\n  positionTracking,\n  comparison,\n  onSaveBaseline,\n}: PLComparisonChartProps) {\n  const [autoRefresh, setAutoRefresh] = useState(false);\n  const chartContainerRef = useRef<HTMLDivElement>(null);\n  const chartRef = useRef<IChartApi | null>(null);\n\n  // Auto-refresh for live positions\n  useEffect(() => {\n    if (mode === \"live-position\" && autoRefresh) {\n      const interval = setInterval(() => {\n        // Trigger refresh - in production, refetch position data\n        console.info(\"Refreshing live position data...\");\n      }, 5000);\n\n      return () => clearInterval(interval);\n    }\n  }, [mode, autoRefresh]);\n\n  // Render chart based on mode\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    // Clean up previous chart\n    if (chartRef.current) {\n      chartRef.current.remove();\n    }\n\n    if (mode === \"pre-trade\" && theoreticalPayoff) {\n      renderPreTradeView(chartContainerRef.current, theoreticalPayoff);\n    } else if (mode === \"live-position\" && positionTracking) {\n      renderLivePositionView(chartContainerRef.current, positionTracking);\n    } else if (mode === \"historical\" && comparison) {\n      renderPostTradeView(chartContainerRef.current, comparison);\n    }\n\n    return () => {\n      // Store ref value before cleanup to avoid stale closure\n      const chart = chartRef.current;\n      if (chart) {\n        chart.remove();\n      }\n    };\n  }, [mode, theoreticalPayoff, positionTracking, comparison]);\n\n  return (\n    <div className=\"bg-slate-900/60 border border-white/10 rounded-xl p-5\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <h4 className=\"text-lg font-semibold text-cyan-400\">\n          {mode === \"pre-trade\" && \"📊 Theoretical Payoff Diagram\"}\n          {mode === \"live-position\" && \"⚡ Live Position Tracking\"}\n          {mode === \"historical\" && \"📈 Post-Trade Analysis\"}\n        </h4>\n        <div className=\"flex gap-2\">\n          {mode === \"live-position\" && (\n            <button\n              onClick={() => setAutoRefresh(!autoRefresh)}\n              className={`px-3 py-1 rounded-lg text-xs font-semibold transition-all ${\n                autoRefresh\n                  ? \"bg-green-500 text-white\"\n                  : \"bg-slate-700 text-slate-300 hover:bg-slate-600\"\n              }`}\n            >\n              {autoRefresh ? \"🔄 Auto-Refresh ON\" : \"Auto-Refresh OFF\"}\n            </button>\n          )}\n          {mode === \"pre-trade\" && onSaveBaseline && (\n            <button\n              onClick={onSaveBaseline}\n              className=\"px-3 py-1 bg-purple-500 hover:bg-purple-600 text-white text-xs font-semibold rounded-lg transition-all\"\n            >\n              💾 Save as Baseline\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Pre-Trade Metrics */}\n      {mode === \"pre-trade\" && theoreticalPayoff && (\n        <div className=\"mb-4 grid grid-cols-2 md:grid-cols-4 gap-3\">\n          <div className=\"p-3 bg-green-500/10 border border-green-500/30 rounded-lg\">\n            <div className=\"text-xs text-green-400 mb-1\">Max Profit</div>\n            <div className=\"text-lg font-bold text-green-300\">\n              ${theoreticalPayoff.maxProfit.toFixed(0)}\n            </div>\n          </div>\n          <div className=\"p-3 bg-red-500/10 border border-red-500/30 rounded-lg\">\n            <div className=\"text-xs text-red-400 mb-1\">Max Loss</div>\n            <div className=\"text-lg font-bold text-red-300\">\n              ${Math.abs(theoreticalPayoff.maxLoss).toFixed(0)}\n            </div>\n          </div>\n          <div className=\"p-3 bg-cyan-500/10 border border-cyan-500/30 rounded-lg\">\n            <div className=\"text-xs text-cyan-400 mb-1\">Breakevens</div>\n            <div className=\"text-sm font-bold text-cyan-300\">\n              {theoreticalPayoff.breakevens.map((be) => `$${be.toFixed(2)}`).join(\", \")}\n            </div>\n          </div>\n          <div className=\"p-3 bg-purple-500/10 border border-purple-500/30 rounded-lg\">\n            <div className=\"text-xs text-purple-400 mb-1\">P.O.P.</div>\n            <div className=\"text-lg font-bold text-purple-300\">\n              {theoreticalPayoff.pop.toFixed(1)}%\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Live Position Metrics */}\n      {mode === \"live-position\" && positionTracking && (\n        <div className=\"mb-4 grid grid-cols-2 md:grid-cols-4 gap-3\">\n          <div className=\"p-3 bg-slate-800/50 border border-white/10 rounded-lg\">\n            <div className=\"text-xs text-slate-400 mb-1\">Entry Fill</div>\n            <div className=\"text-lg font-bold text-white\">\n              ${positionTracking.actual.entryPrice.toFixed(2)}\n            </div>\n            <div\n              className={`text-xs ${positionTracking.actual.entrySlippage >= 0 ? \"text-green-400\" : \"text-red-400\"}`}\n            >\n              {positionTracking.actual.entrySlippage >= 0 ? \"+\" : \"\"}$\n              {positionTracking.actual.entrySlippage.toFixed(0)} slippage\n            </div>\n          </div>\n          <div\n            className={`p-3 border rounded-lg ${\n              positionTracking.actual.currentPL >= 0\n                ? \"bg-green-500/10 border-green-500/30\"\n                : \"bg-red-500/10 border-red-500/30\"\n            }`}\n          >\n            <div\n              className={`text-xs mb-1 ${positionTracking.actual.currentPL >= 0 ? \"text-green-400\" : \"text-red-400\"}`}\n            >\n              Current P&L\n            </div>\n            <div\n              className={`text-lg font-bold ${positionTracking.actual.currentPL >= 0 ? \"text-green-300\" : \"text-red-300\"}`}\n            >\n              ${positionTracking.actual.currentPL.toFixed(0)}\n            </div>\n          </div>\n          <div className=\"p-3 bg-slate-800/50 border border-white/10 rounded-lg\">\n            <div className=\"text-xs text-slate-400 mb-1\">Delta</div>\n            <div className=\"text-lg font-bold text-white\">\n              {positionTracking.actual.greeks.delta.toFixed(2)}\n            </div>\n            <div className=\"text-xs text-slate-500\">\n              Θ: {positionTracking.actual.greeks.theta.toFixed(2)}\n            </div>\n          </div>\n          <div className=\"p-3 bg-slate-800/50 border border-white/10 rounded-lg\">\n            <div className=\"text-xs text-slate-400 mb-1\">vs Theoretical</div>\n            <div className=\"text-sm font-bold text-cyan-300\">\n              {(\n                (positionTracking.actual.currentPL / positionTracking.theoretical.expectedValue) *\n                100\n              ).toFixed(1)}\n              %\n            </div>\n            <div className=\"text-xs text-slate-500\">captured</div>\n          </div>\n        </div>\n      )}\n\n      {/* Post-Trade Metrics */}\n      {mode === \"historical\" && comparison && comparison.executionQuality && (\n        <div className=\"mb-4 grid grid-cols-2 md:grid-cols-5 gap-3\">\n          <div className=\"p-3 bg-purple-500/10 border border-purple-500/30 rounded-lg\">\n            <div className=\"text-xs text-purple-400 mb-1\">Execution Score</div>\n            <div className=\"text-xl font-bold text-purple-300\">\n              {comparison.executionQuality.score.toFixed(1)}%\n            </div>\n          </div>\n          <div className=\"p-3 bg-slate-800/50 border border-white/10 rounded-lg\">\n            <div className=\"text-xs text-slate-400 mb-1\">Theoretical</div>\n            <div className=\"text-lg font-bold text-white\">\n              ${comparison.theoretical.maxProfit.toFixed(0)}\n            </div>\n          </div>\n          <div className=\"p-3 bg-green-500/10 border border-green-500/30 rounded-lg\">\n            <div className=\"text-xs text-green-400 mb-1\">Actual P&L</div>\n            <div className=\"text-lg font-bold text-green-300\">\n              ${comparison.actual.realizedPL.toFixed(0)}\n            </div>\n          </div>\n          <div className=\"p-3 bg-red-500/10 border border-red-500/30 rounded-lg\">\n            <div className=\"text-xs text-red-400 mb-1\">Total Slippage</div>\n            <div className=\"text-lg font-bold text-red-300\">\n              ${Math.abs(comparison.executionQuality.totalSlippage).toFixed(0)}\n            </div>\n          </div>\n          <div className=\"p-3 bg-slate-800/50 border border-white/10 rounded-lg\">\n            <div className=\"text-xs text-slate-400 mb-1\">Duration</div>\n            <div className=\"text-sm font-bold text-white\">\n              {comparison.closedAt &&\n                Math.floor(\n                  (new Date(comparison.closedAt).getTime() -\n                    new Date(comparison.enteredAt).getTime()) /\n                    (1000 * 60 * 60 * 24)\n                )}{\" \"}\n              days\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Chart Container */}\n      <div ref={chartContainerRef} style={{ width: \"100%\", height: \"400px\" }} />\n\n      {/* Greeks Comparison (Live/Post-Trade) */}\n      {(mode === \"live-position\" || mode === \"historical\") && (\n        <div className=\"mt-4 p-4 bg-slate-800/50 border border-white/10 rounded-lg\">\n          <h5 className=\"text-sm font-semibold text-slate-300 mb-3\">Greeks Variance</h5>\n          <div className=\"grid grid-cols-4 gap-3 text-xs\">\n            <div>\n              <div className=\"text-slate-400 mb-1\">Delta</div>\n              <div className=\"font-mono text-cyan-400\">\n                {mode === \"live-position\" && positionTracking\n                  ? (\n                      positionTracking.actual.greeks.delta -\n                      positionTracking.theoretical.greeks.delta\n                    ).toFixed(2)\n                  : comparison?.greeks.variance.delta.toFixed(2)}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-slate-400 mb-1\">Gamma</div>\n              <div className=\"font-mono text-cyan-400\">\n                {mode === \"live-position\" && positionTracking\n                  ? (\n                      positionTracking.actual.greeks.gamma -\n                      positionTracking.theoretical.greeks.gamma\n                    ).toFixed(3)\n                  : comparison?.greeks.variance.gamma.toFixed(3)}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-slate-400 mb-1\">Theta</div>\n              <div className=\"font-mono text-cyan-400\">\n                {mode === \"live-position\" && positionTracking\n                  ? (\n                      positionTracking.actual.greeks.theta -\n                      positionTracking.theoretical.greeks.theta\n                    ).toFixed(2)\n                  : comparison?.greeks.variance.theta.toFixed(2)}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-slate-400 mb-1\">Vega</div>\n              <div className=\"font-mono text-cyan-400\">\n                {mode === \"live-position\" && positionTracking\n                  ? (\n                      positionTracking.actual.greeks.vega - positionTracking.theoretical.greeks.vega\n                    ).toFixed(2)\n                  : comparison?.greeks.variance.vega.toFixed(2)}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Render pre-trade theoretical payoff diagram\n */\nfunction renderPreTradeView(container: HTMLDivElement, payoff: TheoreticalPayoff) {\n  const chart = createChart(container, {\n    width: container.clientWidth,\n    height: 400,\n    layout: {\n      background: { color: \"#0f172a\" },\n      textColor: \"#94a3b8\",\n    },\n    grid: {\n      vertLines: { color: \"#1e293b\" },\n      horzLines: { color: \"#1e293b\" },\n    },\n    rightPriceScale: {\n      borderColor: \"#334155\",\n    },\n    timeScale: {\n      visible: false,\n    },\n  });\n\n  // Payoff curve\n  const payoffSeries = chart.addLineSeries({\n    color: \"#06b6d4\",\n    lineWidth: 3,\n    title: \"Payoff at Expiration\",\n  });\n\n  const payoffData: LineData[] = payoff.payoffCurve.map((point, index) => ({\n    time: index as any,\n    value: point.pnl,\n  }));\n\n  payoffSeries.setData(payoffData);\n\n  // Zero line\n  const zeroSeries = chart.addLineSeries({\n    color: \"#64748b\",\n    lineWidth: 1,\n    lineStyle: 2, // Dashed\n  });\n\n  zeroSeries.setData(\n    payoffData.map((point) => ({\n      time: point.time,\n      value: 0,\n    }))\n  );\n\n  // Probability distribution (if available)\n  if (payoff.probabilityDistribution) {\n    const probSeries = chart.addAreaSeries({\n      topColor: \"rgba(139, 92, 246, 0.4)\",\n      bottomColor: \"rgba(139, 92, 246, 0.0)\",\n      lineColor: \"rgba(139, 92, 246, 0.8)\",\n      lineWidth: 1,\n    });\n\n    const probData: LineData[] = payoff.probabilityDistribution.map((point, index) => ({\n      time: index as any,\n      value: point.pnl * 100, // Scale probability\n    }));\n\n    probSeries.setData(probData);\n  }\n\n  chart.timeScale().fitContent();\n}\n\n/**\n * Render live position view (theoretical vs actual)\n */\nfunction renderLivePositionView(container: HTMLDivElement, _position: PositionTracking) {\n  // For live view, show simple P&L comparison bars\n  // In production, render side-by-side payoff curves\n  const mockData = `\n    <div class=\"flex items-center justify-center h-full\">\n      <div class=\"text-center\">\n        <div class=\"text-slate-400 mb-2\">Live position tracking chart</div>\n        <div class=\"text-sm text-slate-500\">Shows real-time P&L vs theoretical baseline</div>\n      </div>\n    </div>\n  `;\n  container.innerHTML = mockData;\n}\n\n/**\n * Render post-trade analysis view\n */\nfunction renderPostTradeView(container: HTMLDivElement, _comparison: PLComparison) {\n  // Render bar chart showing theoretical vs actual breakdown\n  const mockData = `\n    <div class=\"flex items-center justify-center h-full\">\n      <div class=\"text-center\">\n        <div class=\"text-slate-400 mb-2\">Post-trade analysis chart</div>\n        <div class=\"text-sm text-slate-500\">Final P&L breakdown with slippage attribution</div>\n      </div>\n    </div>\n  `;\n  container.innerHTML = mockData;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\PLSummaryDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\PositionManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\ProposalReview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\ResearchDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3217,3220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3217,3220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4282,4285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4282,4285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":375,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11769,11772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11769,11772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":564,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":564,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17372,17375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17372,17375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":579,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":579,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17796,17799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17796,17799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":594,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":594,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18226,18229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18226,18229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":627,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":627,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19080,19083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19080,19083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":628,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":628,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19150,19153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19150,19153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":642,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19517,19520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19517,19520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":643,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":643,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19587,19590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19587,19590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":657,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":657,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19957,19960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19957,19960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":658,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":658,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20027,20030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20027,20030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":675,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":675,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20475,20478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20475,20478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":676,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":676,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20545,20548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20545,20548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":687,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":687,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20808,20811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20808,20811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":688,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":688,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20878,20881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20878,20881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":699,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":699,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21137,21140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21137,21140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":700,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":700,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21207,21210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21207,21210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":720,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":720,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21822,21825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21822,21825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":721,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":721,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21892,21895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21892,21895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":732,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":732,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22148,22151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22148,22151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":733,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":733,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22218,22221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22218,22221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":744,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":744,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22483,22486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22483,22486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":745,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":745,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22553,22556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22553,22556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":756,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":756,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22818,22821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22818,22821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":757,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":757,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22888,22891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22888,22891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":768,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":768,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23148,23151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23148,23151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":769,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":769,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23218,23221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23218,23221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":823,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":823,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24816,24819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24816,24819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":824,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":824,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24886,24889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24886,24889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":836,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":836,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25154,25157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25154,25157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":837,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":837,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25224,25227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25224,25227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":852,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":852,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25567,25570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25567,25570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":853,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":853,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25637,25640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25637,25640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":911,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":911,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27277,27280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27277,27280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef, useMemo, useCallback } from \"react\";\nimport {\n  createChart,\n  IChartApi,\n  ISeriesApi,\n  CandlestickData,\n  LineData,\n  HistogramData,\n} from \"lightweight-charts\";\nimport {\n  calculateSMA,\n  calculateRSI,\n  calculateMACD,\n  calculateBollingerBands,\n  calculateIchimoku,\n  type BarData,\n} from \"@/utils/indicators\";\nimport OptionsChain from \"./OptionsChain\";\nimport StrategySuggestionsModal from \"./StrategySuggestionsModal\";\nimport PLComparisonChart from \"./PLComparisonChart\";\nimport PLSummaryDashboard from \"./PLSummaryDashboard\";\nimport StrategyBuilder from \"./StrategyBuilder\";\nimport type {\n  PLViewMode,\n  TheoreticalPayoff,\n  PositionTracking,\n  PLComparison,\n  PositionLeg,\n} from \"@/types/pnl\";\n\n/**\n * Research Dashboard - Stock Analysis & Charting\n *\n * INCREMENT 5: Options Chain viewer integration\n * - Full options chain with greeks and IV\n * - Expiration selector, strike filtering\n * - ITM/ATM/OTM color coding\n * - Integration with AI strategy builder\n *\n * INCREMENT 4: Complete technical indicators implementation\n * - MACD panel (separate pane with histogram)\n * - Bollinger Bands (overlay with fill)\n * - Ichimoku Cloud (full implementation with cloud fill)\n * - Volume Bars (separate pane, synced crosshair)\n * - Performance optimizations (memoization, debouncing)\n */\n\ntype Timeframe = \"1D\" | \"5D\" | \"1M\" | \"3M\" | \"6M\" | \"1Y\" | \"5Y\";\ntype ChartType = \"Line\" | \"Candlestick\" | \"Area\";\n\ninterface StockData {\n  symbol: string;\n  price: number;\n  change: number;\n  changePct: number;\n  marketCap: number;\n  peRatio: number;\n  earningsDate: string;\n  week52High: number;\n  week52Low: number;\n}\n\ninterface Indicator {\n  id: string;\n  label: string;\n  enabled: boolean;\n}\n\ninterface HistoricalResponse {\n  symbol: string;\n  timeframe: string;\n  bars: BarData[];\n  count: number;\n}\n\nexport default function ResearchDashboard() {\n  const [symbol, setSymbol] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [stockData, setStockData] = useState<StockData | null>(null);\n  const [timeframe, setTimeframe] = useState<Timeframe>(\"3M\");\n  const [chartType, setChartType] = useState<ChartType>(\"Candlestick\");\n  const [historicalData, setHistoricalData] = useState<BarData[]>([]);\n  const [indicators, setIndicators] = useState<Indicator[]>([\n    { id: \"sma20\", label: \"SMA 20\", enabled: false },\n    { id: \"sma50\", label: \"SMA 50\", enabled: false },\n    { id: \"sma200\", label: \"SMA 200\", enabled: false },\n    { id: \"rsi\", label: \"RSI (14)\", enabled: false },\n    { id: \"macd\", label: \"MACD\", enabled: false },\n    { id: \"bb\", label: \"Bollinger Bands\", enabled: false },\n    { id: \"ichimoku\", label: \"Ichimoku Cloud\", enabled: false },\n    { id: \"volume\", label: \"Volume Bars\", enabled: false },\n  ]);\n\n  // Options chain state\n  const [showOptionsChain, setShowOptionsChain] = useState(false);\n  const [selectedStrike, _setSelectedStrike] = useState<{\n    strike: number;\n    type: \"call\" | \"put\";\n  } | null>(null);\n\n  // AI Strategy state\n  const [showStrategyModal, setShowStrategyModal] = useState(false);\n  const [aiLoading, setAiLoading] = useState(false);\n  const [strategySuggestions, setStrategySuggestions] = useState<any>(null);\n\n  // P&L Analysis state\n  const [showPLAnalysis, setShowPLAnalysis] = useState(false);\n  const [plViewMode, setPlViewMode] = useState<PLViewMode>(\"pre-trade\");\n  const [theoreticalPayoff, setTheoreticalPayoff] = useState<TheoreticalPayoff | null>(null);\n  const [positionTracking, setPositionTracking] = useState<PositionTracking | null>(null);\n  const [plComparison, setPlComparison] = useState<PLComparison | null>(null);\n\n  // Strategy Builder state\n  const [showStrategyBuilder, setShowStrategyBuilder] = useState(false);\n\n  // Chart refs\n  const priceChartContainerRef = useRef<HTMLDivElement>(null);\n  const macdChartContainerRef = useRef<HTMLDivElement>(null);\n  const volumeChartContainerRef = useRef<HTMLDivElement>(null);\n\n  const priceChartRef = useRef<IChartApi | null>(null);\n  const macdChartRef = useRef<IChartApi | null>(null);\n  const volumeChartRef = useRef<IChartApi | null>(null);\n\n  const priceSeriesRef = useRef<ISeriesApi<\"Candlestick\" | \"Line\" | \"Area\"> | null>(null);\n  const indicatorSeriesRef = useRef<Map<string, ISeriesApi<any>>>(new Map());\n\n  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const handleSearch = async () => {\n    if (!symbol) return;\n    setLoading(true);\n    try {\n      // Fetch stock fundamentals (mock for now)\n      await new Promise((resolve) => setTimeout(resolve, 300));\n      setStockData({\n        symbol: symbol.toUpperCase(),\n        price: 184.1,\n        change: 1.6,\n        changePct: 0.88,\n        marketCap: 2800000000000,\n        peRatio: 28.5,\n        earningsDate: \"2025-01-30\",\n        week52High: 199.62,\n        week52Low: 164.08,\n      });\n\n      // Fetch historical data\n      await fetchHistoricalData(symbol, timeframe);\n    } catch (e) {\n      console.error(\"Failed to fetch stock data\", e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchHistoricalData = async (sym: string, tf: Timeframe) => {\n    try {\n      const response = await fetch(`/api/market/historical?symbol=${sym}&timeframe=${tf}`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch historical data: ${response.statusText}`);\n      }\n      const data: HistoricalResponse = await response.json();\n      setHistoricalData(data.bars);\n    } catch (error) {\n      console.error(\"Historical data fetch error:\", error);\n      setHistoricalData([]);\n    }\n  };\n\n  // Debounced indicator toggle\n  const toggleIndicator = useCallback((id: string) => {\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n\n    debounceTimerRef.current = setTimeout(() => {\n      setIndicators((prev) =>\n        prev.map((ind) => (ind.id === id ? { ...ind, enabled: !ind.enabled } : ind))\n      );\n    }, 200);\n  }, []);\n\n  // AI Strategy Handlers\n  const handleSuggestStrategy = async () => {\n    if (!stockData) return;\n\n    setAiLoading(true);\n    try {\n      // Gather technicals from calculated indicators\n      const technicals = {\n        rsi: calculatedIndicators.rsi?.[calculatedIndicators.rsi.length - 1]?.value,\n        sma20: calculatedIndicators.sma20?.[calculatedIndicators.sma20.length - 1]?.value,\n        sma50: calculatedIndicators.sma50?.[calculatedIndicators.sma50.length - 1]?.value,\n        sma200: calculatedIndicators.sma200?.[calculatedIndicators.sma200.length - 1]?.value,\n        macd: calculatedIndicators.macd\n          ? {\n              macd: calculatedIndicators.macd.macd[calculatedIndicators.macd.macd.length - 1]\n                ?.value,\n              signal:\n                calculatedIndicators.macd.signal[calculatedIndicators.macd.signal.length - 1]\n                  ?.value,\n              histogram:\n                calculatedIndicators.macd.histogram[calculatedIndicators.macd.histogram.length - 1]\n                  ?.value,\n            }\n          : undefined,\n        iv_percentile: 55, // TODO: Calculate from historical IV data\n      };\n\n      const optionsChain = {\n        avgCallIV: 0.35,\n        avgPutIV: 0.33,\n        atmCallOI: 5000,\n        atmPutOI: 4500,\n        avgSpread: 0.04,\n      };\n\n      const response = await fetch(\"/api/ai/suggest-strategy\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          symbol: stockData.symbol,\n          currentPrice: stockData.price,\n          technicals,\n          optionsChain,\n          earningsDate: stockData.earningsDate,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to get strategy suggestions\");\n      }\n\n      const data = await response.json();\n      setStrategySuggestions(data);\n      setShowStrategyModal(true);\n    } catch (error) {\n      console.error(\"Strategy suggestion error:\", error);\n      alert(\"Failed to generate strategy suggestions. Please try again.\");\n    } finally {\n      setAiLoading(false);\n    }\n  };\n\n  const handleMonitorPosition = () => {\n    if (!stockData) return;\n    alert(`📊 Monitor Position: ${stockData.symbol}\n\nThis will:\n• Create real-time P&L tracking\n• Set profit target alert (+10%)\n• Set stop loss alert (-8%)\n• Enable SMS notifications on hits\n• Track Greeks evolution\n\nFeature coming in INCREMENT 7`);\n  };\n\n  const handleConvertToAutomated = () => {\n    if (!stockData) return;\n    setShowStrategyBuilder(true);\n  };\n\n  const handleApproveStrategy = (strategyId: string) => {\n    alert(`✓ Strategy Approved: ${strategyId}\n\nCreating proposal for review...\n\nThis will:\n• Generate detailed proposal with legs and pricing\n• Set approval deadline based on strategy settings\n• Add to Proposal Review workflow\n• Await user final approval before execution\n\nProposal system coming in INCREMENT 9`);\n    setShowStrategyModal(false);\n  };\n\n  // P&L Analysis Handlers\n  const handleCalculateTheoretical = async () => {\n    if (!stockData || !selectedStrike) return;\n\n    try {\n      // Build mock legs for demonstration\n      const legs: PositionLeg[] = [\n        {\n          type: selectedStrike.type.toUpperCase() as \"CALL\" | \"PUT\",\n          side: \"SELL\",\n          qty: 1,\n          strike: selectedStrike.strike,\n          expiration: \"2025-02-21\",\n          theoreticalPrice: 2.5,\n          actualPrice: 2.5,\n          currentPrice: 2.5,\n        },\n      ];\n\n      const response = await fetch(\"/api/pnl/calculate-theoretical\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          symbol: stockData.symbol,\n          underlyingPrice: stockData.price,\n          legs,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to calculate theoretical P&L\");\n      }\n\n      const data = await response.json();\n      setTheoreticalPayoff(data);\n      setPlViewMode(\"pre-trade\");\n      setShowPLAnalysis(true);\n    } catch (error) {\n      console.error(\"Theoretical P&L calculation error:\", error);\n      alert(\"Failed to calculate theoretical P&L. Please try again.\");\n    }\n  };\n\n  const handleSaveBaseline = () => {\n    if (!theoreticalPayoff) return;\n    alert(\"✓ Theoretical baseline saved! Will be used for execution quality tracking.\");\n  };\n\n  const handleLoadLivePosition = async () => {\n    try {\n      const response = await fetch(\"/api/pnl/track-position\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ positionId: \"demo_position_1\" }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to load position tracking\");\n      }\n\n      const data = await response.json();\n      setPositionTracking(data);\n      setPlViewMode(\"live-position\");\n      setShowPLAnalysis(true);\n    } catch (error) {\n      console.error(\"Position tracking error:\", error);\n      alert(\"Failed to load position tracking. Please try again.\");\n    }\n  };\n\n  const handleLoadHistoricalComparison = async () => {\n    try {\n      const response = await fetch(\"/api/pnl/comparison/demo_position_1\");\n\n      if (!response.ok) {\n        throw new Error(\"Failed to load P&L comparison\");\n      }\n\n      const data = await response.json();\n      setPlComparison(data);\n      setPlViewMode(\"historical\");\n      setShowPLAnalysis(true);\n    } catch (error) {\n      console.error(\"P&L comparison error:\", error);\n      alert(\"Failed to load P&L comparison. Please try again.\");\n    }\n  };\n\n  // Memoized indicator calculations\n  const calculatedIndicators = useMemo(() => {\n    if (historicalData.length === 0) return {};\n\n    const enabled = indicators.filter((ind) => ind.enabled).map((ind) => ind.id);\n    const results: Record<string, any> = {};\n\n    if (enabled.includes(\"sma20\")) {\n      results.sma20 = calculateSMA(historicalData, 20);\n    }\n    if (enabled.includes(\"sma50\")) {\n      results.sma50 = calculateSMA(historicalData, 50);\n    }\n    if (enabled.includes(\"sma200\")) {\n      results.sma200 = calculateSMA(historicalData, 200);\n    }\n    if (enabled.includes(\"rsi\")) {\n      results.rsi = calculateRSI(historicalData, 14);\n    }\n    if (enabled.includes(\"macd\")) {\n      results.macd = calculateMACD(historicalData);\n    }\n    if (enabled.includes(\"bb\")) {\n      results.bb = calculateBollingerBands(historicalData);\n    }\n    if (enabled.includes(\"ichimoku\")) {\n      results.ichimoku = calculateIchimoku(historicalData);\n    }\n\n    return results;\n  }, [historicalData, indicators]);\n\n  // Initialize charts\n  useEffect(() => {\n    // Price Chart\n    if (priceChartContainerRef.current) {\n      const priceChart = createChart(priceChartContainerRef.current, {\n        width: priceChartContainerRef.current.clientWidth,\n        height: 500,\n        layout: {\n          background: { color: \"#0f172a\" },\n          textColor: \"#94a3b8\",\n        },\n        grid: {\n          vertLines: { color: \"#1e293b\" },\n          horzLines: { color: \"#1e293b\" },\n        },\n        crosshair: {\n          mode: 1,\n        },\n        rightPriceScale: {\n          borderColor: \"#334155\",\n        },\n        timeScale: {\n          borderColor: \"#334155\",\n          timeVisible: true,\n          secondsVisible: false,\n        },\n      });\n      priceChartRef.current = priceChart;\n    }\n\n    // MACD Chart\n    if (macdChartContainerRef.current) {\n      const macdChart = createChart(macdChartContainerRef.current, {\n        width: macdChartContainerRef.current.clientWidth,\n        height: 150,\n        layout: {\n          background: { color: \"#0f172a\" },\n          textColor: \"#94a3b8\",\n        },\n        grid: {\n          vertLines: { color: \"#1e293b\" },\n          horzLines: { color: \"#1e293b\" },\n        },\n        rightPriceScale: {\n          borderColor: \"#334155\",\n        },\n        timeScale: {\n          borderColor: \"#334155\",\n          timeVisible: true,\n          secondsVisible: false,\n        },\n      });\n      macdChartRef.current = macdChart;\n\n      // Sync timescales\n      if (priceChartRef.current) {\n        priceChartRef.current.timeScale().subscribeVisibleTimeRangeChange(() => {\n          const range = priceChartRef.current?.timeScale().getVisibleRange();\n          if (range) {\n            macdChartRef.current?.timeScale().setVisibleRange(range);\n          }\n        });\n      }\n    }\n\n    // Volume Chart\n    if (volumeChartContainerRef.current) {\n      const volumeChart = createChart(volumeChartContainerRef.current, {\n        width: volumeChartContainerRef.current.clientWidth,\n        height: 100,\n        layout: {\n          background: { color: \"#0f172a\" },\n          textColor: \"#94a3b8\",\n        },\n        grid: {\n          vertLines: { color: \"#1e293b\" },\n          horzLines: { color: \"#1e293b\" },\n        },\n        rightPriceScale: {\n          borderColor: \"#334155\",\n        },\n        timeScale: {\n          borderColor: \"#334155\",\n          timeVisible: true,\n          secondsVisible: false,\n        },\n      });\n      volumeChartRef.current = volumeChart;\n\n      // Sync timescales\n      if (priceChartRef.current) {\n        priceChartRef.current.timeScale().subscribeVisibleTimeRangeChange(() => {\n          const range = priceChartRef.current?.timeScale().getVisibleRange();\n          if (range) {\n            volumeChartRef.current?.timeScale().setVisibleRange(range);\n          }\n        });\n      }\n    }\n\n    // Handle resize\n    const handleResize = () => {\n      if (priceChartContainerRef.current && priceChartRef.current) {\n        priceChartRef.current.applyOptions({\n          width: priceChartContainerRef.current.clientWidth,\n        });\n      }\n      if (macdChartContainerRef.current && macdChartRef.current) {\n        macdChartRef.current.applyOptions({\n          width: macdChartContainerRef.current.clientWidth,\n        });\n      }\n      if (volumeChartContainerRef.current && volumeChartRef.current) {\n        volumeChartRef.current.applyOptions({\n          width: volumeChartContainerRef.current.clientWidth,\n        });\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      priceChartRef.current?.remove();\n      macdChartRef.current?.remove();\n      volumeChartRef.current?.remove();\n    };\n  }, []);\n\n  // Update price chart data\n  useEffect(() => {\n    if (!priceChartRef.current || historicalData.length === 0) return;\n\n    // Remove existing series\n    if (priceSeriesRef.current) {\n      priceChartRef.current.removeSeries(priceSeriesRef.current);\n    }\n\n    // Clear indicator series\n    indicatorSeriesRef.current.forEach((series) => {\n      try {\n        priceChartRef.current?.removeSeries(series);\n      } catch (e) {\n        // Series may already be removed\n      }\n    });\n    indicatorSeriesRef.current.clear();\n\n    // Create new series based on chart type\n    let series: ISeriesApi<\"Candlestick\" | \"Line\" | \"Area\">;\n\n    if (chartType === \"Candlestick\") {\n      series = priceChartRef.current.addCandlestickSeries({\n        upColor: \"#10b981\",\n        downColor: \"#ef4444\",\n        borderUpColor: \"#10b981\",\n        borderDownColor: \"#ef4444\",\n        wickUpColor: \"#10b981\",\n        wickDownColor: \"#ef4444\",\n      });\n\n      const candlestickData: CandlestickData[] = historicalData.map((bar) => ({\n        time: (new Date(bar.time).getTime() / 1000) as any,\n        open: bar.open,\n        high: bar.high,\n        low: bar.low,\n        close: bar.close,\n      }));\n\n      series.setData(candlestickData);\n    } else if (chartType === \"Line\") {\n      series = priceChartRef.current.addLineSeries({\n        color: \"#00acc1\",\n        lineWidth: 2,\n      });\n\n      const lineData: LineData[] = historicalData.map((bar) => ({\n        time: (new Date(bar.time).getTime() / 1000) as any,\n        value: bar.close,\n      }));\n\n      series.setData(lineData);\n    } else {\n      // Area\n      series = priceChartRef.current.addAreaSeries({\n        topColor: \"rgba(0, 172, 193, 0.4)\",\n        bottomColor: \"rgba(0, 172, 193, 0.0)\",\n        lineColor: \"#00acc1\",\n        lineWidth: 2,\n      });\n\n      const areaData: LineData[] = historicalData.map((bar) => ({\n        time: (new Date(bar.time).getTime() / 1000) as any,\n        value: bar.close,\n      }));\n\n      series.setData(areaData);\n    }\n\n    priceSeriesRef.current = series;\n    priceChartRef.current.timeScale().fitContent();\n  }, [historicalData, chartType]);\n\n  // Update indicators\n  useEffect(() => {\n    if (!priceChartRef.current || historicalData.length === 0) return;\n\n    // Remove all indicator series\n    indicatorSeriesRef.current.forEach((series) => {\n      try {\n        priceChartRef.current?.removeSeries(series);\n      } catch (e) {\n        // Already removed\n      }\n    });\n    indicatorSeriesRef.current.clear();\n\n    // Add SMA indicators\n    if (calculatedIndicators.sma20) {\n      const series = priceChartRef.current.addLineSeries({\n        color: \"#00acc1\",\n        lineWidth: 2,\n        title: \"SMA 20\",\n      });\n      series.setData(\n        calculatedIndicators.sma20.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n      indicatorSeriesRef.current.set(\"sma20\", series);\n    }\n\n    if (calculatedIndicators.sma50) {\n      const series = priceChartRef.current.addLineSeries({\n        color: \"#7e57c2\",\n        lineWidth: 2,\n        title: \"SMA 50\",\n      });\n      series.setData(\n        calculatedIndicators.sma50.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n      indicatorSeriesRef.current.set(\"sma50\", series);\n    }\n\n    if (calculatedIndicators.sma200) {\n      const series = priceChartRef.current.addLineSeries({\n        color: \"#ff8800\",\n        lineWidth: 2,\n        title: \"SMA 200\",\n      });\n      series.setData(\n        calculatedIndicators.sma200.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n      indicatorSeriesRef.current.set(\"sma200\", series);\n    }\n\n    // Add Bollinger Bands\n    if (calculatedIndicators.bb) {\n      const { upper, middle, lower } = calculatedIndicators.bb;\n\n      const upperSeries = priceChartRef.current.addLineSeries({\n        color: \"#ef4444\",\n        lineWidth: 1,\n        title: \"BB Upper\",\n      });\n      upperSeries.setData(\n        upper.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      const middleSeries = priceChartRef.current.addLineSeries({\n        color: \"#a855f7\",\n        lineWidth: 2,\n        title: \"BB Middle\",\n      });\n      middleSeries.setData(\n        middle.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      const lowerSeries = priceChartRef.current.addLineSeries({\n        color: \"#ef4444\",\n        lineWidth: 1,\n        title: \"BB Lower\",\n      });\n      lowerSeries.setData(\n        lower.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      indicatorSeriesRef.current.set(\"bb_upper\", upperSeries);\n      indicatorSeriesRef.current.set(\"bb_middle\", middleSeries);\n      indicatorSeriesRef.current.set(\"bb_lower\", lowerSeries);\n    }\n\n    // Add Ichimoku Cloud\n    if (calculatedIndicators.ichimoku) {\n      const { tenkan, kijun, senkouA, senkouB, chikou } = calculatedIndicators.ichimoku;\n\n      const tenkanSeries = priceChartRef.current.addLineSeries({\n        color: \"#ef4444\",\n        lineWidth: 1,\n        title: \"Tenkan\",\n      });\n      tenkanSeries.setData(\n        tenkan.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      const kijunSeries = priceChartRef.current.addLineSeries({\n        color: \"#3b82f6\",\n        lineWidth: 1,\n        title: \"Kijun\",\n      });\n      kijunSeries.setData(\n        kijun.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      const senkouASeries = priceChartRef.current.addLineSeries({\n        color: \"#10b981\",\n        lineWidth: 1,\n        title: \"Senkou A\",\n      });\n      senkouASeries.setData(\n        senkouA.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      const senkouBSeries = priceChartRef.current.addLineSeries({\n        color: \"#f59e0b\",\n        lineWidth: 1,\n        title: \"Senkou B\",\n      });\n      senkouBSeries.setData(\n        senkouB.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      const chikouSeries = priceChartRef.current.addLineSeries({\n        color: \"#8b5cf6\",\n        lineWidth: 1,\n        title: \"Chikou\",\n      });\n      chikouSeries.setData(\n        chikou.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      indicatorSeriesRef.current.set(\"ichimoku_tenkan\", tenkanSeries);\n      indicatorSeriesRef.current.set(\"ichimoku_kijun\", kijunSeries);\n      indicatorSeriesRef.current.set(\"ichimoku_senkouA\", senkouASeries);\n      indicatorSeriesRef.current.set(\"ichimoku_senkouB\", senkouBSeries);\n      indicatorSeriesRef.current.set(\"ichimoku_chikou\", chikouSeries);\n    }\n  }, [calculatedIndicators, historicalData]);\n\n  // Update MACD chart\n  useEffect(() => {\n    if (!macdChartRef.current || !calculatedIndicators.macd) return;\n\n    // Clear existing series\n    const chart = macdChartRef.current;\n    chart.remove();\n\n    if (macdChartContainerRef.current) {\n      const newChart = createChart(macdChartContainerRef.current, {\n        width: macdChartContainerRef.current.clientWidth,\n        height: 150,\n        layout: {\n          background: { color: \"#0f172a\" },\n          textColor: \"#94a3b8\",\n        },\n        grid: {\n          vertLines: { color: \"#1e293b\" },\n          horzLines: { color: \"#1e293b\" },\n        },\n        rightPriceScale: {\n          borderColor: \"#334155\",\n        },\n        timeScale: {\n          borderColor: \"#334155\",\n          timeVisible: true,\n          secondsVisible: false,\n        },\n      });\n\n      macdChartRef.current = newChart;\n\n      const { macd, signal, histogram } = calculatedIndicators.macd;\n\n      // MACD line\n      const macdSeries = newChart.addLineSeries({\n        color: \"#3b82f6\",\n        lineWidth: 2,\n        title: \"MACD\",\n      });\n      macdSeries.setData(\n        macd.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      // Signal line\n      const signalSeries = newChart.addLineSeries({\n        color: \"#f97316\",\n        lineWidth: 2,\n        title: \"Signal\",\n      });\n      signalSeries.setData(\n        signal.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n        }))\n      );\n\n      // Histogram\n      const histogramSeries = newChart.addHistogramSeries({\n        color: \"#10b981\",\n        priceFormat: {\n          type: \"price\",\n          precision: 4,\n          minMove: 0.0001,\n        },\n      });\n      histogramSeries.setData(\n        histogram.map((point: any) => ({\n          time: (new Date(point.time).getTime() / 1000) as any,\n          value: point.value,\n          color: point.value >= 0 ? \"#10b981\" : \"#ef4444\",\n        }))\n      );\n\n      newChart.timeScale().fitContent();\n\n      // Sync with price chart\n      if (priceChartRef.current) {\n        priceChartRef.current.timeScale().subscribeVisibleTimeRangeChange(() => {\n          const range = priceChartRef.current?.timeScale().getVisibleRange();\n          if (range) {\n            newChart.timeScale().setVisibleRange(range);\n          }\n        });\n      }\n    }\n  }, [calculatedIndicators.macd]);\n\n  // Update Volume chart\n  useEffect(() => {\n    if (!volumeChartRef.current || historicalData.length === 0) return;\n\n    const chart = volumeChartRef.current;\n    chart.remove();\n\n    if (volumeChartContainerRef.current) {\n      const newChart = createChart(volumeChartContainerRef.current, {\n        width: volumeChartContainerRef.current.clientWidth,\n        height: 100,\n        layout: {\n          background: { color: \"#0f172a\" },\n          textColor: \"#94a3b8\",\n        },\n        grid: {\n          vertLines: { color: \"#1e293b\" },\n          horzLines: { color: \"#1e293b\" },\n        },\n        rightPriceScale: {\n          borderColor: \"#334155\",\n        },\n        timeScale: {\n          borderColor: \"#334155\",\n          timeVisible: true,\n          secondsVisible: false,\n        },\n      });\n\n      volumeChartRef.current = newChart;\n\n      const volumeSeries = newChart.addHistogramSeries({\n        priceFormat: {\n          type: \"volume\",\n        },\n      });\n\n      const volumeData: HistogramData[] = historicalData.map((bar) => ({\n        time: (new Date(bar.time).getTime() / 1000) as any,\n        value: bar.volume,\n        color: bar.close >= bar.open ? \"#10b981\" : \"#ef4444\",\n      }));\n\n      volumeSeries.setData(volumeData);\n      newChart.timeScale().fitContent();\n\n      // Sync with price chart\n      if (priceChartRef.current) {\n        priceChartRef.current.timeScale().subscribeVisibleTimeRangeChange(() => {\n          const range = priceChartRef.current?.timeScale().getVisibleRange();\n          if (range) {\n            newChart.timeScale().setVisibleRange(range);\n          }\n        });\n      }\n    }\n  }, [historicalData, indicators]);\n\n  // Refetch data when timeframe changes\n  useEffect(() => {\n    if (stockData?.symbol) {\n      fetchHistoricalData(stockData.symbol, timeframe);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timeframe, stockData?.symbol]);\n\n  const timeframes: Timeframe[] = [\"1D\", \"5D\", \"1M\", \"3M\", \"6M\", \"1Y\", \"5Y\"];\n  const chartTypes: ChartType[] = [\"Line\", \"Candlestick\", \"Area\"];\n\n  const showMACD = indicators.find((ind) => ind.id === \"macd\")?.enabled || false;\n  const showVolume = indicators.find((ind) => ind.id === \"volume\")?.enabled || false;\n\n  return (\n    <div className=\"bg-slate-800/80 backdrop-blur-md border border-white/10 rounded-2xl p-6 max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-2xl font-bold text-cyan-400 mb-2\">🔬 Research Dashboard</h3>\n        <p className=\"text-slate-400 text-sm\">\n          Advanced stock analysis with live charts and technical indicators\n        </p>\n      </div>\n\n      {/* Stock Lookup Section */}\n      <div className=\"mb-6\">\n        <div className=\"flex gap-3\">\n          <input\n            type=\"text\"\n            value={symbol}\n            onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n            onKeyPress={(e) => e.key === \"Enter\" && handleSearch()}\n            placeholder=\"Enter ticker symbol (e.g., AAPL)\"\n            className=\"flex-1 px-4 py-3 bg-slate-900/60 border border-white/20 rounded-lg text-slate-100 text-base font-mono outline-none focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all\"\n          />\n          <button\n            onClick={handleSearch}\n            disabled={loading}\n            className=\"px-6 py-3 bg-cyan-500 hover:bg-cyan-600 disabled:bg-cyan-500/50 disabled:cursor-not-allowed text-white font-semibold rounded-lg transition-all\"\n          >\n            {loading ? \"Loading...\" : \"Search\"}\n          </button>\n        </div>\n      </div>\n\n      {/* Stock Fundamentals Card */}\n      {stockData && (\n        <div className=\"mb-6 bg-slate-900/60 border border-white/10 rounded-xl p-5\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div>\n              <div className=\"text-slate-400 text-xs mb-1\">Current Price</div>\n              <div className=\"text-slate-100 text-2xl font-bold\">${stockData.price.toFixed(2)}</div>\n              <div\n                className={`text-sm font-semibold ${stockData.change >= 0 ? \"text-green-400\" : \"text-red-400\"}`}\n              >\n                {stockData.change >= 0 ? \"+\" : \"\"}\n                {stockData.change.toFixed(2)} ({stockData.changePct.toFixed(2)}%)\n              </div>\n            </div>\n            <div>\n              <div className=\"text-slate-400 text-xs mb-1\">Market Cap</div>\n              <div className=\"text-slate-100 text-lg font-semibold\">\n                ${(stockData.marketCap / 1000000000000).toFixed(2)}T\n              </div>\n            </div>\n            <div>\n              <div className=\"text-slate-400 text-xs mb-1\">P/E Ratio</div>\n              <div className=\"text-slate-100 text-lg font-semibold\">\n                {stockData.peRatio.toFixed(2)}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-slate-400 text-xs mb-1\">Next Earnings</div>\n              <div className=\"text-slate-100 text-lg font-semibold\">{stockData.earningsDate}</div>\n            </div>\n            <div>\n              <div className=\"text-slate-400 text-xs mb-1\">52-Week High</div>\n              <div className=\"text-slate-100 text-lg font-semibold\">\n                ${stockData.week52High.toFixed(2)}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-slate-400 text-xs mb-1\">52-Week Low</div>\n              <div className=\"text-slate-100 text-lg font-semibold\">\n                ${stockData.week52Low.toFixed(2)}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* AI Strategy Assistant */}\n      {stockData && (\n        <div className=\"mb-6 bg-purple-500/10 border border-purple-500/30 rounded-xl p-5\">\n          <h4 className=\"text-lg font-semibold text-purple-400 mb-4\">🤖 AI Strategy Assistant</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <button\n              onClick={handleSuggestStrategy}\n              disabled={aiLoading}\n              className=\"px-4 py-3 bg-gradient-to-r from-purple-500 to-cyan-500 hover:from-purple-600 hover:to-cyan-600 disabled:from-purple-500/50 disabled:to-cyan-500/50 disabled:cursor-not-allowed text-white font-semibold rounded-lg transition-all shadow-lg hover:shadow-xl\"\n            >\n              {aiLoading ? \"⏳ Analyzing...\" : \"💡 Suggest Strategy\"}\n            </button>\n            <button\n              onClick={handleMonitorPosition}\n              className=\"px-4 py-3 bg-slate-700 hover:bg-slate-600 text-white font-semibold rounded-lg transition-all\"\n            >\n              👁️ Monitor Position\n            </button>\n            <button\n              onClick={handleConvertToAutomated}\n              className=\"px-4 py-3 bg-slate-700 hover:bg-slate-600 text-white font-semibold rounded-lg transition-all\"\n            >\n              ⚡ Convert to Automated\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Timeframe Selector */}\n      <div className=\"mb-4\">\n        <div className=\"flex gap-2\">\n          {timeframes.map((tf) => (\n            <button\n              key={tf}\n              onClick={() => setTimeframe(tf)}\n              className={`px-4 py-2 rounded-lg font-medium text-sm transition-all ${\n                timeframe === tf\n                  ? \"bg-cyan-500 text-white\"\n                  : \"bg-slate-700/50 text-slate-300 hover:bg-slate-700\"\n              }`}\n            >\n              {tf}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Chart Type Toggle */}\n      <div className=\"mb-6\">\n        <div className=\"flex gap-2\">\n          {chartTypes.map((ct) => (\n            <button\n              key={ct}\n              onClick={() => setChartType(ct)}\n              className={`px-4 py-2 rounded-lg font-medium text-sm transition-all ${\n                chartType === ct\n                  ? \"bg-purple-500 text-white\"\n                  : \"bg-slate-700/50 text-slate-300 hover:bg-slate-700\"\n              }`}\n            >\n              {ct}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Price Chart */}\n      <div className=\"mb-4 bg-slate-900/60 border border-white/10 rounded-xl overflow-hidden\">\n        <div ref={priceChartContainerRef} style={{ width: \"100%\", height: \"500px\" }} />\n      </div>\n\n      {/* MACD Chart (conditional) */}\n      {showMACD && (\n        <div className=\"mb-4 bg-slate-900/60 border border-white/10 rounded-xl overflow-hidden\">\n          <div className=\"px-4 py-2 border-b border-white/10\">\n            <span className=\"text-sm font-semibold text-slate-300\">MACD (12, 26, 9)</span>\n          </div>\n          <div ref={macdChartContainerRef} style={{ width: \"100%\", height: \"150px\" }} />\n        </div>\n      )}\n\n      {/* Volume Chart (conditional) */}\n      {showVolume && (\n        <div className=\"mb-6 bg-slate-900/60 border border-white/10 rounded-xl overflow-hidden\">\n          <div className=\"px-4 py-2 border-b border-white/10\">\n            <span className=\"text-sm font-semibold text-slate-300\">Volume</span>\n          </div>\n          <div ref={volumeChartContainerRef} style={{ width: \"100%\", height: \"100px\" }} />\n        </div>\n      )}\n\n      {/* Indicator Toggles Section */}\n      <div className=\"bg-slate-900/60 border border-white/10 rounded-xl p-5\">\n        <h4 className=\"text-lg font-semibold text-slate-200 mb-4\">Technical Indicators</h4>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n          {indicators.map((ind) => (\n            <label\n              key={ind.id}\n              className=\"flex items-center gap-3 p-3 bg-slate-800/50 rounded-lg cursor-pointer hover:bg-slate-800 transition-all\"\n            >\n              <input\n                type=\"checkbox\"\n                checked={ind.enabled}\n                onChange={() => toggleIndicator(ind.id)}\n                className=\"w-4 h-4 text-cyan-500 bg-slate-700 border-slate-600 rounded focus:ring-cyan-500 focus:ring-2\"\n              />\n              <span\n                className={`text-sm font-medium ${ind.enabled ? \"text-cyan-400\" : \"text-slate-400\"}`}\n              >\n                {ind.label}\n              </span>\n            </label>\n          ))}\n        </div>\n        <div className=\"mt-4 px-3 py-2 bg-emerald-500/10 border border-emerald-500/30 rounded-lg text-xs text-emerald-400\">\n          <strong>✓ Complete:</strong> All technical indicators implemented with memoization and\n          debouncing for optimal performance.\n        </div>\n      </div>\n\n      {/* Options Chain Section */}\n      {stockData && (\n        <div className=\"mt-6\">\n          <button\n            onClick={() => setShowOptionsChain(!showOptionsChain)}\n            className=\"w-full px-4 py-3 bg-purple-500/10 border border-purple-500/30 rounded-xl hover:bg-purple-500/20 transition-all mb-4\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-lg\">⚡</span>\n                <span className=\"text-lg font-semibold text-purple-400\">Options Chain</span>\n              </div>\n              <span className=\"text-sm text-purple-300\">\n                {showOptionsChain ? \"▼ Hide\" : \"► Show\"}\n              </span>\n            </div>\n          </button>\n\n          {showOptionsChain && (\n            <div className=\"animate-slideDown\">\n              <OptionsChain symbol={stockData.symbol} onClose={() => setShowOptionsChain(false)} />\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* P&L Analysis Section */}\n      {stockData && (\n        <div className=\"mt-6\">\n          <button\n            onClick={() => setShowPLAnalysis(!showPLAnalysis)}\n            className=\"w-full px-4 py-3 bg-cyan-500/10 border border-cyan-500/30 rounded-xl hover:bg-cyan-500/20 transition-all mb-4\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-lg\">📊</span>\n                <span className=\"text-lg font-semibold text-cyan-400\">P&L Analysis</span>\n              </div>\n              <span className=\"text-sm text-cyan-300\">{showPLAnalysis ? \"▼ Hide\" : \"► Show\"}</span>\n            </div>\n          </button>\n\n          {showPLAnalysis && (\n            <div className=\"animate-slideDown space-y-4\">\n              {/* Tab Selector */}\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={() => {\n                    setPlViewMode(\"pre-trade\");\n                    handleCalculateTheoretical();\n                  }}\n                  className={`flex-1 px-4 py-2 rounded-lg font-medium text-sm transition-all ${\n                    plViewMode === \"pre-trade\"\n                      ? \"bg-cyan-500 text-white\"\n                      : \"bg-slate-700 text-slate-300 hover:bg-slate-600\"\n                  }`}\n                  disabled={!selectedStrike}\n                >\n                  Pre-Trade\n                </button>\n                <button\n                  onClick={() => {\n                    setPlViewMode(\"live-position\");\n                    handleLoadLivePosition();\n                  }}\n                  className={`flex-1 px-4 py-2 rounded-lg font-medium text-sm transition-all ${\n                    plViewMode === \"live-position\"\n                      ? \"bg-cyan-500 text-white\"\n                      : \"bg-slate-700 text-slate-300 hover:bg-slate-600\"\n                  }`}\n                >\n                  Live Position\n                </button>\n                <button\n                  onClick={() => {\n                    setPlViewMode(\"historical\");\n                    handleLoadHistoricalComparison();\n                  }}\n                  className={`flex-1 px-4 py-2 rounded-lg font-medium text-sm transition-all ${\n                    plViewMode === \"historical\"\n                      ? \"bg-cyan-500 text-white\"\n                      : \"bg-slate-700 text-slate-300 hover:bg-slate-600\"\n                  }`}\n                >\n                  Historical\n                </button>\n              </div>\n\n              {/* P&L Comparison Chart */}\n              {plViewMode === \"pre-trade\" && theoreticalPayoff && (\n                <PLComparisonChart\n                  mode=\"pre-trade\"\n                  theoreticalPayoff={theoreticalPayoff}\n                  onSaveBaseline={handleSaveBaseline}\n                />\n              )}\n              {plViewMode === \"live-position\" && positionTracking && (\n                <PLComparisonChart mode=\"live-position\" positionTracking={positionTracking} />\n              )}\n              {plViewMode === \"historical\" && plComparison && (\n                <PLComparisonChart mode=\"historical\" comparison={plComparison} />\n              )}\n\n              {/* P&L Summary Dashboard (only in historical view) */}\n              {plViewMode === \"historical\" && <PLSummaryDashboard />}\n\n              {/* Helper text */}\n              {!theoreticalPayoff && !positionTracking && !plComparison && (\n                <div className=\"p-6 bg-slate-800/50 border border-white/10 rounded-xl text-center\">\n                  <div className=\"text-slate-400 mb-2\">No data to display</div>\n                  <div className=\"text-sm text-slate-500\">\n                    {plViewMode === \"pre-trade\" &&\n                      \"Select a strike from the Options Chain to calculate theoretical P&L\"}\n                    {plViewMode === \"live-position\" &&\n                      'Click \"Live Position\" to load tracking data'}\n                    {plViewMode === \"historical\" &&\n                      'Click \"Historical\" to view past position analysis'}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Strategy Suggestions Modal */}\n      {strategySuggestions && (\n        <StrategySuggestionsModal\n          isOpen={showStrategyModal}\n          onClose={() => setShowStrategyModal(false)}\n          symbol={strategySuggestions.symbol}\n          currentPrice={strategySuggestions.currentPrice}\n          suggestions={strategySuggestions.suggestions}\n          analysis={strategySuggestions.analysis}\n          onApprove={handleApproveStrategy}\n        />\n      )}\n\n      {/* Strategy Builder Modal */}\n      <StrategyBuilder\n        isOpen={showStrategyBuilder}\n        onClose={() => setShowStrategyBuilder(false)}\n        initialData={\n          stockData\n            ? {\n                name: `${stockData.symbol} Strategy`,\n                priceMin: stockData.price * 0.8,\n                priceMax: stockData.price * 1.2,\n              }\n            : undefined\n        }\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\RiskCalculator.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2052,2055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2052,2055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3128,3131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3128,3131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\n\ninterface OptionsProposal {\n  symbol: string;\n  option_symbol: string;\n  contract_type: string;\n  strike: number;\n  expiration: string;\n  premium: number;\n  quantity: number;\n  underlying_price: number;\n  greeks: {\n    delta: number;\n    gamma: number;\n    theta: number;\n    vega: number;\n  };\n  max_risk: number;\n  max_profit: number;\n  breakeven: number;\n  probability_of_profit: number;\n  risk_reward_ratio: number;\n  margin_requirement: number;\n}\n\ninterface RiskCalculatorProps {\n  onCreateProposal: (proposal: OptionsProposal) => void;\n  onExecuteProposal: (proposal: OptionsProposal, limitPrice?: number) => void;\n}\n\nexport default function RiskCalculator({\n  onCreateProposal,\n  onExecuteProposal,\n}: RiskCalculatorProps) {\n  const [symbol, setSymbol] = useState(\"SPY\");\n  const [optionSymbol, setOptionSymbol] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [proposal, setProposal] = useState<OptionsProposal | null>(null);\n  const [limitPrice, setLimitPrice] = useState<string>(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleCreateProposal = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"/api/proxy/api/proposals/create\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_TOKEN}`,\n        },\n        body: JSON.stringify({\n          symbol,\n          option_symbol: optionSymbol,\n          quantity,\n          order_type: \"limit\",\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || \"Failed to create proposal\");\n      }\n\n      const data = await response.json();\n      const newProposal = data.proposal;\n      setProposal(newProposal);\n      setLimitPrice(newProposal.premium.toFixed(2));\n      onCreateProposal(newProposal);\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExecuteProposal = async () => {\n    if (!proposal) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"/api/proxy/api/proposals/execute\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${process.env.NEXT_PUBLIC_API_TOKEN}`,\n        },\n        body: JSON.stringify({\n          proposal,\n          limit_price: limitPrice ? parseFloat(limitPrice) : null,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || \"Failed to execute proposal\");\n      }\n\n      const data = await response.json();\n      onExecuteProposal(proposal, limitPrice ? parseFloat(limitPrice) : undefined);\n      alert(`Order submitted successfully! Order ID: ${data.order_id}`);\n\n      // Reset form\n      setProposal(null);\n      setOptionSymbol(\"\");\n      setLimitPrice(\"\");\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        padding: \"20px\",\n        background: \"rgba(15, 23, 42, 0.6)\",\n        backdropFilter: \"blur(10px)\",\n        borderRadius: \"12px\",\n        border: \"1px solid rgba(100, 116, 139, 0.3)\",\n      }}\n    >\n      <h2 style={{ color: \"#e2e8f0\", marginBottom: \"20px\" }}>Options Risk Calculator</h2>\n\n      {/* Input Form */}\n      <div style={{ marginBottom: \"20px\" }}>\n        <div style={{ marginBottom: \"12px\" }}>\n          <label style={{ display: \"block\", color: \"#cbd5e1\", marginBottom: \"4px\" }}>\n            Underlying Symbol\n          </label>\n          <input\n            type=\"text\"\n            value={symbol}\n            onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n            style={{\n              width: \"100%\",\n              padding: \"8px 12px\",\n              background: \"rgba(30, 41, 59, 0.8)\",\n              border: \"1px solid rgba(100, 116, 139, 0.3)\",\n              borderRadius: \"6px\",\n              color: \"#e2e8f0\",\n              fontSize: \"14px\",\n            }}\n            placeholder=\"SPY\"\n          />\n        </div>\n\n        <div style={{ marginBottom: \"12px\" }}>\n          <label style={{ display: \"block\", color: \"#cbd5e1\", marginBottom: \"4px\" }}>\n            Option Symbol (OCC Format)\n          </label>\n          <input\n            type=\"text\"\n            value={optionSymbol}\n            onChange={(e) => setOptionSymbol(e.target.value.toUpperCase())}\n            style={{\n              width: \"100%\",\n              padding: \"8px 12px\",\n              background: \"rgba(30, 41, 59, 0.8)\",\n              border: \"1px solid rgba(100, 116, 139, 0.3)\",\n              borderRadius: \"6px\",\n              color: \"#e2e8f0\",\n              fontSize: \"14px\",\n            }}\n            placeholder=\"SPY250117C00590000\"\n          />\n          <small style={{ color: \"#94a3b8\", fontSize: \"12px\" }}>\n            Example: SPY250117C00590000 (SPY Jan 17 2025 $590 Call)\n          </small>\n        </div>\n\n        <div style={{ marginBottom: \"12px\" }}>\n          <label style={{ display: \"block\", color: \"#cbd5e1\", marginBottom: \"4px\" }}>\n            Quantity\n          </label>\n          <input\n            type=\"number\"\n            value={quantity}\n            onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}\n            min=\"1\"\n            style={{\n              width: \"100%\",\n              padding: \"8px 12px\",\n              background: \"rgba(30, 41, 59, 0.8)\",\n              border: \"1px solid rgba(100, 116, 139, 0.3)\",\n              borderRadius: \"6px\",\n              color: \"#e2e8f0\",\n              fontSize: \"14px\",\n            }}\n          />\n        </div>\n\n        <button\n          onClick={handleCreateProposal}\n          disabled={loading || !optionSymbol}\n          style={{\n            width: \"100%\",\n            padding: \"10px\",\n            background: loading\n              ? \"rgba(100, 116, 139, 0.5)\"\n              : \"linear-gradient(135deg, #1a7560 0%, #0d5a4a 100%)\",\n            color: \"#fff\",\n            border: \"none\",\n            borderRadius: \"6px\",\n            fontSize: \"14px\",\n            fontWeight: \"600\",\n            cursor: loading ? \"not-allowed\" : \"pointer\",\n          }}\n        >\n          {loading ? \"Analyzing...\" : \"Create Proposal\"}\n        </button>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div\n          style={{\n            padding: \"12px\",\n            background: \"rgba(239, 68, 68, 0.1)\",\n            border: \"1px solid rgba(239, 68, 68, 0.3)\",\n            borderRadius: \"6px\",\n            color: \"#fca5a5\",\n            marginBottom: \"20px\",\n          }}\n        >\n          {error}\n        </div>\n      )}\n\n      {/* Proposal Display */}\n      {proposal && (\n        <div\n          style={{\n            padding: \"20px\",\n            background: \"rgba(30, 41, 59, 0.8)\",\n            border: \"1px solid rgba(100, 116, 139, 0.3)\",\n            borderRadius: \"8px\",\n            marginBottom: \"20px\",\n          }}\n        >\n          <h3 style={{ color: \"#e2e8f0\", marginBottom: \"16px\" }}>Trade Proposal</h3>\n\n          {/* Contract Details */}\n          <div style={{ marginBottom: \"16px\" }}>\n            <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"12px\" }}>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"12px\" }}>Type</span>\n                <div style={{ color: \"#e2e8f0\", fontWeight: \"600\", textTransform: \"uppercase\" }}>\n                  {proposal.contract_type}\n                </div>\n              </div>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"12px\" }}>Strike</span>\n                <div style={{ color: \"#e2e8f0\", fontWeight: \"600\" }}>\n                  ${proposal.strike.toFixed(2)}\n                </div>\n              </div>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"12px\" }}>Premium</span>\n                <div style={{ color: \"#10b981\", fontWeight: \"600\" }}>\n                  ${proposal.premium.toFixed(2)}\n                </div>\n              </div>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"12px\" }}>Expiration</span>\n                <div style={{ color: \"#e2e8f0\", fontWeight: \"600\" }}>{proposal.expiration}</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Greeks */}\n          <div style={{ marginBottom: \"16px\" }}>\n            <h4 style={{ color: \"#cbd5e1\", fontSize: \"14px\", marginBottom: \"8px\" }}>Greeks</h4>\n            <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr 1fr\", gap: \"8px\" }}>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"11px\" }}>Delta</span>\n                <div style={{ color: \"#e2e8f0\", fontSize: \"13px\", fontWeight: \"600\" }}>\n                  {proposal.greeks.delta.toFixed(3)}\n                </div>\n              </div>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"11px\" }}>Gamma</span>\n                <div style={{ color: \"#e2e8f0\", fontSize: \"13px\", fontWeight: \"600\" }}>\n                  {proposal.greeks.gamma.toFixed(3)}\n                </div>\n              </div>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"11px\" }}>Theta</span>\n                <div style={{ color: \"#e2e8f0\", fontSize: \"13px\", fontWeight: \"600\" }}>\n                  {proposal.greeks.theta.toFixed(3)}\n                </div>\n              </div>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"11px\" }}>Vega</span>\n                <div style={{ color: \"#e2e8f0\", fontSize: \"13px\", fontWeight: \"600\" }}>\n                  {proposal.greeks.vega.toFixed(3)}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Risk Metrics */}\n          <div style={{ marginBottom: \"16px\" }}>\n            <h4 style={{ color: \"#cbd5e1\", fontSize: \"14px\", marginBottom: \"8px\" }}>\n              Risk Analysis\n            </h4>\n            <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"12px\" }}>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"12px\" }}>Max Risk</span>\n                <div style={{ color: \"#ef4444\", fontWeight: \"600\" }}>\n                  ${proposal.max_risk.toFixed(2)}\n                </div>\n              </div>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"12px\" }}>Max Profit</span>\n                <div style={{ color: \"#10b981\", fontWeight: \"600\" }}>\n                  {proposal.max_profit === 999999\n                    ? \"Unlimited\"\n                    : `$${proposal.max_profit.toFixed(2)}`}\n                </div>\n              </div>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"12px\" }}>Breakeven</span>\n                <div style={{ color: \"#e2e8f0\", fontWeight: \"600\" }}>\n                  ${proposal.breakeven.toFixed(2)}\n                </div>\n              </div>\n              <div>\n                <span style={{ color: \"#94a3b8\", fontSize: \"12px\" }}>Probability</span>\n                <div style={{ color: \"#e2e8f0\", fontWeight: \"600\" }}>\n                  {proposal.probability_of_profit.toFixed(1)}%\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Execution Section */}\n          <div>\n            <label\n              style={{ display: \"block\", color: \"#cbd5e1\", marginBottom: \"4px\", fontSize: \"14px\" }}\n            >\n              Limit Price\n            </label>\n            <input\n              type=\"number\"\n              value={limitPrice}\n              onChange={(e) => setLimitPrice(e.target.value)}\n              step=\"0.01\"\n              style={{\n                width: \"100%\",\n                padding: \"8px 12px\",\n                background: \"rgba(15, 23, 42, 0.8)\",\n                border: \"1px solid rgba(100, 116, 139, 0.3)\",\n                borderRadius: \"6px\",\n                color: \"#e2e8f0\",\n                fontSize: \"14px\",\n                marginBottom: \"12px\",\n              }}\n            />\n            <button\n              onClick={handleExecuteProposal}\n              disabled={loading}\n              style={{\n                width: \"100%\",\n                padding: \"12px\",\n                background: loading\n                  ? \"rgba(100, 116, 139, 0.5)\"\n                  : \"linear-gradient(135deg, #10b981 0%, #059669 100%)\",\n                color: \"#fff\",\n                border: \"none\",\n                borderRadius: \"6px\",\n                fontSize: \"14px\",\n                fontWeight: \"600\",\n                cursor: loading ? \"not-allowed\" : \"pointer\",\n              }}\n            >\n              {loading ? \"Executing...\" : \"Execute Trade (Paper Trading)\"}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\StrategyBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[581,584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[581,584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4925,4928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4925,4928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6077,6080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6077,6080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7015,7018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7015,7018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7870,7873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7870,7873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":830,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":830,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28246,28249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28246,28249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":974,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":974,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34117,34120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34117,34120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1100,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1100,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39208,39211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39208,39211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1201,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1201,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43188,43191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43188,43191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\n// TODO: Re-enable when strategies module is implemented\n// import { validateStrategy } from \"@/strategies/validator\";\n// import type { Strategy, ValidationResult } from \"@/strategies/schema\";\n\n/**\n * Strategy Builder Component\n *\n * Complete UI for creating and editing Allessandra strategies.\n * Includes validation via validator.ts and save/load functionality.\n *\n * INCREMENT 9: Added validator integration, save flow, and version management\n */\n\n// Temporary types until strategies module is created\ntype Strategy = any;\ninterface ValidationResult {\n  valid: boolean;\n  errors: Array<{ field: string; message: string }>;\n  warnings: Array<{ field: string; message: string }>;\n}\n\n// Temporary stub validator\nconst validateStrategy = (_strategy: Strategy): ValidationResult => {\n  return {\n    valid: true,\n    errors: [],\n    warnings: [],\n  };\n};\n\ntype TemplateType =\n  | \"collar\"\n  | \"put_spread\"\n  | \"call_spread\"\n  | \"iron_condor\"\n  | \"csp\"\n  | \"covered_call\"\n  | \"custom\";\n\ntype AllocationType = \"cash\" | \"cash_max_loss\" | \"max_loss\";\n\ninterface Leg {\n  id: string;\n  type: \"STOCK\" | \"CALL\" | \"PUT\";\n  side: \"BUY\" | \"SELL\";\n  dte?: number;\n  delta?: number;\n  quantity: number;\n}\n\ninterface StrategyFormData {\n  // Basic Info\n  name: string;\n  goal: string;\n  template: TemplateType;\n\n  // Universe Filters\n  priceMin: number;\n  priceMax: number;\n  minStockVolume: number;\n  minOptionOI: number;\n  maxOptionSpread: number;\n  excludeOTC: boolean;\n  earningsBlackoutDays: number;\n\n  // Position Structure\n  legs: Leg[];\n\n  // Sizing\n  allocationType: AllocationType;\n  perTradeCash: number;\n  maxConcurrentPositions: number;\n  portfolioHeatMax: number;\n\n  // Exits\n  profitTargetPct: number;\n  maxLossPct: number;\n  timeExitDTE: number;\n  useOCOBrackets: boolean;\n}\n\ninterface ValidationErrors {\n  [key: string]: string;\n}\n\ninterface StrategyBuilderProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialData?: Partial<StrategyFormData>;\n  strategyId?: string; // For editing existing strategies\n}\n\ninterface StrategyVersion {\n  version: number;\n  updated_at: string;\n  changes_summary?: string;\n}\n\nexport default function StrategyBuilder({\n  isOpen,\n  onClose,\n  initialData,\n  strategyId,\n}: StrategyBuilderProps) {\n  const [formData, setFormData] = useState<StrategyFormData>({\n    // Basic Info\n    name: initialData?.name || \"\",\n    goal: initialData?.goal || \"\",\n    template: initialData?.template || \"custom\",\n\n    // Universe Filters\n    priceMin: initialData?.priceMin || 0,\n    priceMax: initialData?.priceMax || 1000,\n    minStockVolume: initialData?.minStockVolume || 1000000,\n    minOptionOI: initialData?.minOptionOI || 100,\n    maxOptionSpread: initialData?.maxOptionSpread || 0.1,\n    excludeOTC: initialData?.excludeOTC ?? true,\n    earningsBlackoutDays: initialData?.earningsBlackoutDays || 7,\n\n    // Position Structure\n    legs: initialData?.legs || [],\n\n    // Sizing\n    allocationType: initialData?.allocationType || \"cash\",\n    perTradeCash: initialData?.perTradeCash || 5000,\n    maxConcurrentPositions: initialData?.maxConcurrentPositions || 5,\n    portfolioHeatMax: initialData?.portfolioHeatMax || 20,\n\n    // Exits\n    profitTargetPct: initialData?.profitTargetPct || 50,\n    maxLossPct: initialData?.maxLossPct || 100,\n    timeExitDTE: initialData?.timeExitDTE || 7,\n    useOCOBrackets: initialData?.useOCOBrackets ?? false,\n  });\n\n  const [clientErrors, setClientErrors] = useState<ValidationErrors>({});\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n  const [showWarnings, setShowWarnings] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [saveError, setSaveError] = useState<string | null>(null);\n  const [versions, setVersions] = useState<StrategyVersion[]>([]);\n  const [selectedVersion, setSelectedVersion] = useState<number | null>(null);\n\n  const [expandedSections, setExpandedSections] = useState({\n    basicInfo: true,\n    universe: false,\n    structure: false,\n    sizing: false,\n    exits: false,\n  });\n\n  // Load versions when editing existing strategy\n  useEffect(() => {\n    if (strategyId) {\n      loadVersions(strategyId);\n    }\n  }, [strategyId]);\n\n  const loadVersions = async (id: string) => {\n    try {\n      const response = await fetch(`/api/strategies/${id}/versions`);\n      if (response.ok) {\n        const data = await response.json();\n        setVersions(data.versions || []);\n      }\n    } catch (error) {\n      console.error(\"Failed to load versions:\", error);\n    }\n  };\n\n  const loadVersion = async (version: number) => {\n    if (!strategyId) return;\n\n    try {\n      const response = await fetch(`/api/strategies/${strategyId}/versions`);\n      if (response.ok) {\n        const data = await response.json();\n        const versionData = data.versions.find((v: any) => v.version === version);\n        if (versionData) {\n          // Convert Strategy JSON to form data\n          convertStrategyToFormData(versionData.strategy_json);\n          setSelectedVersion(version);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to load version:\", error);\n    }\n  };\n\n  const convertStrategyToFormData = (strategy: Strategy) => {\n    // Convert Strategy DSL to form data\n    // This is a simplified version - full implementation would map all fields\n    setFormData({\n      name: strategy.name,\n      goal: strategy.goal,\n      template: \"custom\",\n      priceMin: strategy.universe.filters.price_between?.[0] || 0,\n      priceMax: strategy.universe.filters.price_between?.[1] || 1000,\n      minStockVolume: strategy.universe.filters.min_stock_adv || 1000000,\n      minOptionOI: strategy.universe.filters.min_option_oi_per_strike || 100,\n      maxOptionSpread: strategy.universe.filters.max_option_spread || 0.1,\n      excludeOTC: strategy.universe.filters.exclude_otc ?? true,\n      earningsBlackoutDays: strategy.universe.filters.earnings_within_days || 7,\n      legs: strategy.position.legs.map((leg: any, idx: number) => ({\n        id: `leg_${idx}`,\n        type: leg.type,\n        side: leg.side,\n        dte: leg.dte,\n        delta: leg.delta,\n        quantity: leg.qty || 1,\n      })),\n      allocationType: strategy.sizing.allocation_type,\n      perTradeCash: strategy.sizing.per_trade_cash || 5000,\n      maxConcurrentPositions: strategy.sizing.max_concurrent_positions,\n      portfolioHeatMax: (strategy.sizing.portfolio_heat_max || 0) * 100,\n      profitTargetPct: (strategy.exits.profit_target_pct || 0) * 100,\n      maxLossPct: (strategy.exits.max_loss_pct || 0) * 100,\n      timeExitDTE: strategy.exits.time_exit_dte || 7,\n      useOCOBrackets: strategy.exits.oco_brackets ?? false,\n    });\n  };\n\n  const toggleSection = (section: keyof typeof expandedSections) => {\n    setExpandedSections((prev) => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  const updateField = (field: keyof StrategyFormData, value: any) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n    // Clear client error for this field\n    if (clientErrors[field]) {\n      setClientErrors((prev) => {\n        const newErrors = { ...prev };\n        delete newErrors[field];\n        return newErrors;\n      });\n    }\n    // Clear validation result when form changes\n    setValidationResult(null);\n    setSaveSuccess(false);\n    setSaveError(null);\n  };\n\n  const addLeg = () => {\n    const newLeg: Leg = {\n      id: `leg_${Date.now()}`,\n      type: \"CALL\",\n      side: \"BUY\",\n      dte: 30,\n      delta: 0.5,\n      quantity: 1,\n    };\n    updateField(\"legs\", [...formData.legs, newLeg]);\n  };\n\n  const removeLeg = (id: string) => {\n    updateField(\n      \"legs\",\n      formData.legs.filter((leg) => leg.id !== id)\n    );\n  };\n\n  const updateLeg = (id: string, field: keyof Leg, value: any) => {\n    updateField(\n      \"legs\",\n      formData.legs.map((leg) => (leg.id === id ? { ...leg, [field]: value } : leg))\n    );\n  };\n\n  const loadTemplate = (template: TemplateType) => {\n    updateField(\"template\", template);\n\n    // Load template-specific legs\n    const templates: Record<TemplateType, Leg[]> = {\n      collar: [\n        { id: \"leg_1\", type: \"STOCK\", side: \"BUY\", quantity: 100 },\n        { id: \"leg_2\", type: \"PUT\", side: \"BUY\", dte: 35, delta: -0.2, quantity: 1 },\n        { id: \"leg_3\", type: \"CALL\", side: \"SELL\", dte: 14, delta: 0.3, quantity: 1 },\n      ],\n      put_spread: [\n        { id: \"leg_1\", type: \"PUT\", side: \"SELL\", dte: 28, delta: -0.25, quantity: 1 },\n        { id: \"leg_2\", type: \"PUT\", side: \"BUY\", dte: 28, delta: -0.1, quantity: 1 },\n      ],\n      call_spread: [\n        { id: \"leg_1\", type: \"CALL\", side: \"SELL\", dte: 28, delta: 0.25, quantity: 1 },\n        { id: \"leg_2\", type: \"CALL\", side: \"BUY\", dte: 28, delta: 0.1, quantity: 1 },\n      ],\n      iron_condor: [\n        { id: \"leg_1\", type: \"PUT\", side: \"SELL\", dte: 30, delta: -0.2, quantity: 1 },\n        { id: \"leg_2\", type: \"PUT\", side: \"BUY\", dte: 30, delta: -0.1, quantity: 1 },\n        { id: \"leg_3\", type: \"CALL\", side: \"SELL\", dte: 30, delta: 0.2, quantity: 1 },\n        { id: \"leg_4\", type: \"CALL\", side: \"BUY\", dte: 30, delta: 0.1, quantity: 1 },\n      ],\n      csp: [{ id: \"leg_1\", type: \"PUT\", side: \"SELL\", dte: 28, delta: -0.25, quantity: 1 }],\n      covered_call: [\n        { id: \"leg_1\", type: \"STOCK\", side: \"BUY\", quantity: 100 },\n        { id: \"leg_2\", type: \"CALL\", side: \"SELL\", dte: 14, delta: 0.3, quantity: 1 },\n      ],\n      custom: [],\n    };\n\n    updateField(\"legs\", templates[template]);\n  };\n\n  const clientValidate = (): boolean => {\n    const newErrors: ValidationErrors = {};\n\n    // Basic Info validation\n    if (!formData.name.trim()) {\n      newErrors.name = \"Strategy name is required\";\n    }\n    if (!formData.goal.trim()) {\n      newErrors.goal = \"Goal/description is required\";\n    }\n\n    // Universe Filters validation\n    if (formData.priceMin < 0) {\n      newErrors.priceMin = \"Minimum price must be >= 0\";\n    }\n    if (formData.priceMax <= formData.priceMin) {\n      newErrors.priceMax = \"Maximum price must be > minimum price\";\n    }\n    if (formData.minStockVolume < 0) {\n      newErrors.minStockVolume = \"Stock volume must be >= 0\";\n    }\n    if (formData.minOptionOI < 0) {\n      newErrors.minOptionOI = \"Option OI must be >= 0\";\n    }\n    if (formData.maxOptionSpread < 0 || formData.maxOptionSpread > 1) {\n      newErrors.maxOptionSpread = \"Spread must be between 0 and 1\";\n    }\n\n    // Position Structure validation\n    if (formData.legs.length === 0) {\n      newErrors.legs = \"At least one leg is required\";\n    }\n\n    // Sizing validation\n    if (formData.perTradeCash <= 0) {\n      newErrors.perTradeCash = \"Per trade cash must be > 0\";\n    }\n    if (formData.maxConcurrentPositions <= 0) {\n      newErrors.maxConcurrentPositions = \"Max concurrent positions must be > 0\";\n    }\n    if (formData.portfolioHeatMax <= 0 || formData.portfolioHeatMax > 100) {\n      newErrors.portfolioHeatMax = \"Portfolio heat must be between 0 and 100\";\n    }\n\n    // Exits validation\n    if (formData.profitTargetPct < 0) {\n      newErrors.profitTargetPct = \"Profit target must be >= 0\";\n    }\n    if (formData.maxLossPct < 0) {\n      newErrors.maxLossPct = \"Max loss must be >= 0\";\n    }\n    if (formData.timeExitDTE < 0) {\n      newErrors.timeExitDTE = \"Time exit DTE must be >= 0\";\n    }\n\n    setClientErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  /**\n   * Convert form data to Strategy DSL JSON\n   */\n  const convertToStrategyJSON = (): Strategy => {\n    return {\n      strategy_id: strategyId || `strat_${Date.now()}`,\n      name: formData.name,\n      goal: formData.goal,\n      universe: {\n        filters: {\n          price_between: [formData.priceMin, formData.priceMax],\n          min_stock_adv: formData.minStockVolume,\n          min_option_oi_per_strike: formData.minOptionOI,\n          max_option_spread: formData.maxOptionSpread,\n          exclude_otc: formData.excludeOTC,\n          earnings_within_days: formData.earningsBlackoutDays,\n          halted: false,\n        },\n      },\n      entry: {\n        time_window: {\n          start: \"09:35\",\n          end: \"10:30\",\n          tz: \"America/New_York\",\n        },\n        liquidity_checks: true,\n      },\n      position: {\n        legs: formData.legs.map((leg) => ({\n          type: leg.type,\n          side: leg.side,\n          qty: leg.quantity,\n          dte: leg.dte,\n          delta: leg.delta,\n        })),\n      },\n      sizing: {\n        allocation_type: formData.allocationType,\n        per_trade_cash: formData.perTradeCash,\n        max_concurrent_positions: formData.maxConcurrentPositions,\n        portfolio_heat_max: formData.portfolioHeatMax / 100,\n      },\n      exits: {\n        profit_target_pct: formData.profitTargetPct / 100,\n        max_loss_pct: formData.maxLossPct / 100,\n        time_exit_dte: formData.timeExitDTE,\n        oco_brackets: formData.useOCOBrackets,\n      },\n      risk: {\n        circuit_breakers: {\n          market: {\n            vix_gt: 28,\n            suspend_new_trades: true,\n          },\n        },\n        slippage_budget_pct: 0.4,\n        max_order_reprices: 4,\n      },\n      automation: {\n        scan_time: \"09:20\",\n        propose_time: \"09:40\",\n        approval_deadline: \"09:58\",\n        execution_mode: \"requires_approval\",\n      },\n      broker_routing: {\n        order_type: \"NET_MULTI\",\n        limit_price: \"mid_with_tolerance\",\n        tolerance: 0.03,\n        time_in_force: \"DAY\",\n      },\n    };\n  };\n\n  /**\n   * Validate using the DSL validator\n   */\n  const handleValidate = () => {\n    // First run client-side validation\n    if (!clientValidate()) {\n      return;\n    }\n\n    // Convert to Strategy JSON\n    const strategyJSON = convertToStrategyJSON();\n\n    // Run validator\n    const result = validateStrategy(strategyJSON);\n    setValidationResult(result);\n\n    if (result.warnings.length > 0) {\n      setShowWarnings(true);\n    }\n\n    if (!result.valid) {\n      alert(\n        `❌ Validation Failed\\n\\n${result.errors.length} error(s) found:\\n${result.errors\n          .map((e) => `• ${e.field}: ${e.message}`)\n          .join(\"\\n\")}`\n      );\n    } else if (result.warnings.length > 0) {\n      alert(\n        `⚠️ Validation Passed with Warnings\\n\\n${result.warnings\n          .map((w) => `• ${w.field}: ${w.message}`)\n          .join(\"\\n\")}\\n\\nYou can still save, but consider addressing these warnings.`\n      );\n    } else {\n      alert(\"✅ Validation Passed!\\n\\nNo errors or warnings found. Ready to save.\");\n    }\n  };\n\n  /**\n   * Save strategy via API\n   */\n  const handleSave = async (forceWithWarnings = false) => {\n    // Validate first\n    if (!validationResult) {\n      handleValidate();\n      return;\n    }\n\n    // Block save if there are errors\n    if (!validationResult.valid) {\n      alert(\"Cannot save strategy with validation errors. Please fix all errors first.\");\n      return;\n    }\n\n    // Show warnings if not forcing\n    if (!forceWithWarnings && validationResult.warnings.length > 0) {\n      const proceed = confirm(\n        `⚠️ Save with Warnings?\\n\\n${validationResult.warnings\n          .map((w) => `• ${w.field}: ${w.message}`)\n          .join(\"\\n\")}\\n\\nDo you want to save anyway?`\n      );\n      if (!proceed) return;\n    }\n\n    setIsSaving(true);\n    setSaveError(null);\n    setSaveSuccess(false);\n\n    try {\n      const strategyJSON = convertToStrategyJSON();\n\n      const response = await fetch(\"/api/strategies\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(strategyJSON),\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        setSaveSuccess(true);\n        alert(\n          `✅ Strategy Saved!\\n\\nStrategy ID: ${data.strategyId}\\nVersion: ${data.version}\\n\\nYou can now use this strategy for backtesting or live trading.`\n        );\n\n        // Reload versions if editing\n        if (strategyId) {\n          loadVersions(strategyId);\n        }\n\n        // Close modal after short delay\n        setTimeout(() => {\n          onClose();\n        }, 1500);\n      } else {\n        setSaveError(data.error || \"Failed to save strategy\");\n        alert(`❌ Save Failed\\n\\n${data.error || \"Unknown error\"}`);\n      }\n    } catch (error) {\n      setSaveError(String(error));\n      alert(`❌ Save Failed\\n\\n${String(error)}`);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/60 backdrop-blur-sm animate-fadeIn overflow-y-auto\">\n      <div className=\"bg-slate-800 border border-white/20 rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col my-8\">\n        {/* Header */}\n        <div className=\"px-6 py-4 border-b border-white/10 bg-gradient-to-r from-cyan-500/20 to-purple-500/20\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-1\">🛠️ Strategy Builder</h2>\n              <p className=\"text-sm text-slate-300\">\n                Design custom options strategies with Allessandra DSL\n              </p>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-all\"\n            >\n              ✕ Close\n            </button>\n          </div>\n\n          {/* Version Selector */}\n          {versions.length > 0 && (\n            <div className=\"mt-3 flex items-center gap-3\">\n              <span className=\"text-sm text-slate-400\">Load Version:</span>\n              <select\n                value={selectedVersion || \"\"}\n                onChange={(e) => loadVersion(Number(e.target.value))}\n                className=\"px-3 py-1 bg-slate-900 border border-white/20 rounded text-sm text-white\"\n              >\n                <option value=\"\">Current</option>\n                {versions.map((v) => (\n                  <option key={v.version} value={v.version}>\n                    v{v.version} - {new Date(v.updated_at).toLocaleDateString()}\n                    {v.changes_summary && ` (${v.changes_summary})`}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n\n          {/* Validation Status */}\n          {validationResult && (\n            <div className=\"mt-3 flex items-center gap-2\">\n              {validationResult.valid ? (\n                <span className=\"text-sm text-green-400\">✓ Validation Passed</span>\n              ) : (\n                <span className=\"text-sm text-red-400\">\n                  ✗ {validationResult.errors.length} Error(s)\n                </span>\n              )}\n              {validationResult.warnings.length > 0 && (\n                <span className=\"text-sm text-yellow-400\">\n                  ⚠ {validationResult.warnings.length} Warning(s)\n                </span>\n              )}\n            </div>\n          )}\n\n          {saveSuccess && (\n            <div className=\"mt-3 px-3 py-2 bg-green-500/20 border border-green-500/30 rounded text-sm text-green-400\">\n              ✓ Strategy saved successfully!\n            </div>\n          )}\n\n          {saveError && (\n            <div className=\"mt-3 px-3 py-2 bg-red-500/20 border border-red-500/30 rounded text-sm text-red-400\">\n              ✗ {saveError}\n            </div>\n          )}\n        </div>\n\n        {/* Form Content */}\n        <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n          {/* Validation Errors Display */}\n          {validationResult && !validationResult.valid && (\n            <div className=\"p-4 bg-red-500/10 border border-red-500/30 rounded-xl\">\n              <div className=\"text-sm font-semibold text-red-400 mb-2\">Validation Errors:</div>\n              <ul className=\"space-y-1 text-xs text-red-300\">\n                {validationResult.errors.map((err, idx) => (\n                  <li key={idx}>\n                    • <span className=\"font-semibold\">{err.field}</span>: {err.message}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* Validation Warnings Display */}\n          {validationResult && validationResult.warnings.length > 0 && showWarnings && (\n            <div className=\"p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-xl\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"text-sm font-semibold text-yellow-400\">Validation Warnings:</div>\n                <button\n                  onClick={() => setShowWarnings(false)}\n                  className=\"text-xs text-slate-400 hover:text-white\"\n                >\n                  Hide\n                </button>\n              </div>\n              <ul className=\"space-y-1 text-xs text-yellow-300\">\n                {validationResult.warnings.map((warn, idx) => (\n                  <li key={idx}>\n                    • <span className=\"font-semibold\">{warn.field}</span>: {warn.message}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* A) Basic Info Section */}\n          <div className=\"bg-slate-900/60 border border-white/10 rounded-xl overflow-hidden\">\n            <button\n              onClick={() => toggleSection(\"basicInfo\")}\n              className=\"w-full px-5 py-4 flex items-center justify-between hover:bg-slate-800/50 transition-all\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <span className=\"text-xl\">📋</span>\n                <span className=\"text-lg font-semibold text-white\">Basic Info</span>\n              </div>\n              <span className=\"text-slate-400\">{expandedSections.basicInfo ? \"▼\" : \"►\"}</span>\n            </button>\n\n            {expandedSections.basicInfo && (\n              <div className=\"px-5 py-4 space-y-4 border-t border-white/10\">\n                {/* Strategy Name */}\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Strategy Name *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => updateField(\"name\", e.target.value)}\n                    placeholder=\"e.g., Iron Condor SPY 30DTE\"\n                    className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                      clientErrors.name\n                        ? \"border-red-500 focus:ring-red-500/50\"\n                        : \"border-white/20 focus:ring-cyan-500/50\"\n                    }`}\n                  />\n                  {clientErrors.name && (\n                    <p className=\"mt-1 text-sm text-red-400\">{clientErrors.name}</p>\n                  )}\n                </div>\n\n                {/* Goal/Description */}\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Goal / Description *\n                  </label>\n                  <textarea\n                    value={formData.goal}\n                    onChange={(e) => updateField(\"goal\", e.target.value)}\n                    placeholder=\"Describe the strategy's objective and ideal market conditions...\"\n                    rows={3}\n                    className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all resize-none ${\n                      clientErrors.goal\n                        ? \"border-red-500 focus:ring-red-500/50\"\n                        : \"border-white/20 focus:ring-cyan-500/50\"\n                    }`}\n                  />\n                  {clientErrors.goal && (\n                    <p className=\"mt-1 text-sm text-red-400\">{clientErrors.goal}</p>\n                  )}\n                </div>\n\n                {/* Template Selector */}\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Template\n                    <span className=\"ml-2 text-xs text-slate-500\">(loads pre-configured legs)</span>\n                  </label>\n                  <select\n                    value={formData.template}\n                    onChange={(e) => loadTemplate(e.target.value as TemplateType)}\n                    className=\"w-full px-4 py-2 bg-slate-800 border border-white/20 rounded-lg text-white outline-none focus:ring-2 focus:ring-cyan-500/50 transition-all\"\n                  >\n                    <option value=\"custom\">Custom</option>\n                    <option value=\"collar\">Protective Collar</option>\n                    <option value=\"put_spread\">Put Credit Spread</option>\n                    <option value=\"call_spread\">Call Debit Spread</option>\n                    <option value=\"iron_condor\">Iron Condor</option>\n                    <option value=\"csp\">Cash-Secured Put</option>\n                    <option value=\"covered_call\">Covered Call</option>\n                  </select>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* B) Universe Filters Section */}\n          <UniverseFiltersSection\n            expanded={expandedSections.universe}\n            onToggle={() => toggleSection(\"universe\")}\n            formData={formData}\n            updateField={updateField}\n            errors={clientErrors}\n          />\n\n          {/* C) Position Structure Section */}\n          <PositionStructureSection\n            expanded={expandedSections.structure}\n            onToggle={() => toggleSection(\"structure\")}\n            legs={formData.legs}\n            addLeg={addLeg}\n            removeLeg={removeLeg}\n            updateLeg={updateLeg}\n            errors={clientErrors}\n          />\n\n          {/* D) Sizing Section */}\n          <SizingSection\n            expanded={expandedSections.sizing}\n            onToggle={() => toggleSection(\"sizing\")}\n            formData={formData}\n            updateField={updateField}\n            errors={clientErrors}\n          />\n\n          {/* E) Exits Section */}\n          <ExitsSection\n            expanded={expandedSections.exits}\n            onToggle={() => toggleSection(\"exits\")}\n            formData={formData}\n            updateField={updateField}\n            errors={clientErrors}\n          />\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"px-6 py-4 border-t border-white/10 bg-slate-900/50 flex items-center justify-between\">\n          <div className=\"text-sm text-slate-400\">\n            {Object.keys(clientErrors).length > 0 && (\n              <span className=\"text-red-400\">\n                ⚠️ {Object.keys(clientErrors).length} validation error\n                {Object.keys(clientErrors).length !== 1 ? \"s\" : \"\"}\n              </span>\n            )}\n          </div>\n          <div className=\"flex gap-3\">\n            <button\n              onClick={onClose}\n              className=\"px-5 py-2 bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-all\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleValidate}\n              className=\"px-5 py-2 bg-purple-500 hover:bg-purple-600 text-white font-semibold rounded-lg transition-all\"\n            >\n              🔍 Validate\n            </button>\n            <button\n              onClick={() => handleSave(false)}\n              disabled={isSaving}\n              className=\"px-5 py-2 bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isSaving ? \"💾 Saving...\" : \"💾 Save Strategy\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Sub-components for each section (unchanged from INCREMENT 8)\n\nfunction UniverseFiltersSection({\n  expanded,\n  onToggle,\n  formData,\n  updateField,\n  errors,\n}: {\n  expanded: boolean;\n  onToggle: () => void;\n  formData: StrategyFormData;\n  updateField: (field: keyof StrategyFormData, value: any) => void;\n  errors: ValidationErrors;\n}) {\n  return (\n    <div className=\"bg-slate-900/60 border border-white/10 rounded-xl overflow-hidden\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-5 py-4 flex items-center justify-between hover:bg-slate-800/50 transition-all\"\n      >\n        <div className=\"flex items-center gap-3\">\n          <span className=\"text-xl\">🎯</span>\n          <span className=\"text-lg font-semibold text-white\">Universe Filters</span>\n        </div>\n        <span className=\"text-slate-400\">{expanded ? \"▼\" : \"►\"}</span>\n      </button>\n\n      {expanded && (\n        <div className=\"px-5 py-4 space-y-4 border-t border-white/10\">\n          {/* Price Range */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-slate-300 mb-2\">Min Price ($)</label>\n              <input\n                type=\"number\"\n                value={formData.priceMin}\n                onChange={(e) => updateField(\"priceMin\", Number(e.target.value))}\n                className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                  errors.priceMin ? \"border-red-500\" : \"border-white/20\"\n                }`}\n              />\n              {errors.priceMin && <p className=\"mt-1 text-sm text-red-400\">{errors.priceMin}</p>}\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-slate-300 mb-2\">Max Price ($)</label>\n              <input\n                type=\"number\"\n                value={formData.priceMax}\n                onChange={(e) => updateField(\"priceMax\", Number(e.target.value))}\n                className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                  errors.priceMax ? \"border-red-500\" : \"border-white/20\"\n                }`}\n              />\n              {errors.priceMax && <p className=\"mt-1 text-sm text-red-400\">{errors.priceMax}</p>}\n            </div>\n          </div>\n\n          {/* Stock Volume */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Min Stock Volume\n            </label>\n            <input\n              type=\"number\"\n              value={formData.minStockVolume}\n              onChange={(e) => updateField(\"minStockVolume\", Number(e.target.value))}\n              className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                errors.minStockVolume ? \"border-red-500\" : \"border-white/20\"\n              }`}\n            />\n            {errors.minStockVolume && (\n              <p className=\"mt-1 text-sm text-red-400\">{errors.minStockVolume}</p>\n            )}\n          </div>\n\n          {/* Option Metrics */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-slate-300 mb-2\">Min Option OI</label>\n              <input\n                type=\"number\"\n                value={formData.minOptionOI}\n                onChange={(e) => updateField(\"minOptionOI\", Number(e.target.value))}\n                className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                  errors.minOptionOI ? \"border-red-500\" : \"border-white/20\"\n                }`}\n              />\n              {errors.minOptionOI && (\n                <p className=\"mt-1 text-sm text-red-400\">{errors.minOptionOI}</p>\n              )}\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                Max Spread (decimal)\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.maxOptionSpread}\n                onChange={(e) => updateField(\"maxOptionSpread\", Number(e.target.value))}\n                className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                  errors.maxOptionSpread ? \"border-red-500\" : \"border-white/20\"\n                }`}\n              />\n              {errors.maxOptionSpread && (\n                <p className=\"mt-1 text-sm text-red-400\">{errors.maxOptionSpread}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Checkboxes */}\n          <div className=\"flex items-center gap-6\">\n            <label className=\"flex items-center gap-2 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                checked={formData.excludeOTC}\n                onChange={(e) => updateField(\"excludeOTC\", e.target.checked)}\n                className=\"w-4 h-4 bg-slate-800 border-white/20 rounded\"\n              />\n              <span className=\"text-sm text-slate-300\">Exclude OTC</span>\n            </label>\n          </div>\n\n          {/* Earnings Blackout */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Earnings Blackout (days before)\n            </label>\n            <input\n              type=\"number\"\n              value={formData.earningsBlackoutDays}\n              onChange={(e) => updateField(\"earningsBlackoutDays\", Number(e.target.value))}\n              className=\"w-full px-4 py-2 bg-slate-800 border border-white/20 rounded-lg text-white outline-none focus:ring-2 focus:ring-cyan-500/50 transition-all\"\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction PositionStructureSection({\n  expanded,\n  onToggle,\n  legs,\n  addLeg,\n  removeLeg,\n  updateLeg,\n  errors,\n}: {\n  expanded: boolean;\n  onToggle: () => void;\n  legs: Leg[];\n  addLeg: () => void;\n  removeLeg: (id: string) => void;\n  updateLeg: (id: string, field: keyof Leg, value: any) => void;\n  errors: ValidationErrors;\n}) {\n  return (\n    <div className=\"bg-slate-900/60 border border-white/10 rounded-xl overflow-hidden\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-5 py-4 flex items-center justify-between hover:bg-slate-800/50 transition-all\"\n      >\n        <div className=\"flex items-center gap-3\">\n          <span className=\"text-xl\">🏗️</span>\n          <span className=\"text-lg font-semibold text-white\">Position Structure</span>\n          <span className=\"px-2 py-1 bg-cyan-500/20 border border-cyan-500/30 rounded text-xs text-cyan-300\">\n            {legs.length} leg{legs.length !== 1 ? \"s\" : \"\"}\n          </span>\n        </div>\n        <span className=\"text-slate-400\">{expanded ? \"▼\" : \"►\"}</span>\n      </button>\n\n      {expanded && (\n        <div className=\"px-5 py-4 space-y-4 border-t border-white/10\">\n          {errors.legs && <p className=\"text-sm text-red-400\">{errors.legs}</p>}\n\n          {legs.map((leg, index) => (\n            <div key={leg.id} className=\"p-4 bg-slate-800/50 border border-white/10 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-sm font-semibold text-cyan-400\">Leg {index + 1}</span>\n                <button\n                  onClick={() => removeLeg(leg.id)}\n                  className=\"px-2 py-1 bg-red-500/20 hover:bg-red-500/30 border border-red-500/30 text-red-400 text-xs rounded transition-all\"\n                >\n                  Remove\n                </button>\n              </div>\n\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                {/* Type */}\n                <div>\n                  <label className=\"block text-xs text-slate-400 mb-1\">Type</label>\n                  <select\n                    value={leg.type}\n                    onChange={(e) => updateLeg(leg.id, \"type\", e.target.value)}\n                    className=\"w-full px-3 py-2 bg-slate-900 border border-white/20 rounded text-white text-sm\"\n                  >\n                    <option value=\"STOCK\">STOCK</option>\n                    <option value=\"CALL\">CALL</option>\n                    <option value=\"PUT\">PUT</option>\n                  </select>\n                </div>\n\n                {/* Side */}\n                <div>\n                  <label className=\"block text-xs text-slate-400 mb-1\">Side</label>\n                  <select\n                    value={leg.side}\n                    onChange={(e) => updateLeg(leg.id, \"side\", e.target.value)}\n                    className=\"w-full px-3 py-2 bg-slate-900 border border-white/20 rounded text-white text-sm\"\n                  >\n                    <option value=\"BUY\">BUY</option>\n                    <option value=\"SELL\">SELL</option>\n                  </select>\n                </div>\n\n                {/* Quantity */}\n                <div>\n                  <label className=\"block text-xs text-slate-400 mb-1\">Quantity</label>\n                  <input\n                    type=\"number\"\n                    value={leg.quantity}\n                    onChange={(e) => updateLeg(leg.id, \"quantity\", Number(e.target.value))}\n                    className=\"w-full px-3 py-2 bg-slate-900 border border-white/20 rounded text-white text-sm\"\n                  />\n                </div>\n\n                {/* DTE (for options only) */}\n                {leg.type !== \"STOCK\" && (\n                  <div>\n                    <label className=\"block text-xs text-slate-400 mb-1\">DTE</label>\n                    <input\n                      type=\"number\"\n                      value={leg.dte || \"\"}\n                      onChange={(e) => updateLeg(leg.id, \"dte\", Number(e.target.value))}\n                      className=\"w-full px-3 py-2 bg-slate-900 border border-white/20 rounded text-white text-sm\"\n                    />\n                  </div>\n                )}\n\n                {/* Delta (for options only) */}\n                {leg.type !== \"STOCK\" && (\n                  <div>\n                    <label className=\"block text-xs text-slate-400 mb-1\">Delta</label>\n                    <input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={leg.delta || \"\"}\n                      onChange={(e) => updateLeg(leg.id, \"delta\", Number(e.target.value))}\n                      className=\"w-full px-3 py-2 bg-slate-900 border border-white/20 rounded text-white text-sm\"\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n\n          <button\n            onClick={addLeg}\n            className=\"w-full px-4 py-3 bg-cyan-500/20 hover:bg-cyan-500/30 border border-cyan-500/30 text-cyan-400 font-semibold rounded-lg transition-all\"\n          >\n            + Add Leg\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction SizingSection({\n  expanded,\n  onToggle,\n  formData,\n  updateField,\n  errors,\n}: {\n  expanded: boolean;\n  onToggle: () => void;\n  formData: StrategyFormData;\n  updateField: (field: keyof StrategyFormData, value: any) => void;\n  errors: ValidationErrors;\n}) {\n  return (\n    <div className=\"bg-slate-900/60 border border-white/10 rounded-xl overflow-hidden\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-5 py-4 flex items-center justify-between hover:bg-slate-800/50 transition-all\"\n      >\n        <div className=\"flex items-center gap-3\">\n          <span className=\"text-xl\">💰</span>\n          <span className=\"text-lg font-semibold text-white\">Sizing</span>\n        </div>\n        <span className=\"text-slate-400\">{expanded ? \"▼\" : \"►\"}</span>\n      </button>\n\n      {expanded && (\n        <div className=\"px-5 py-4 space-y-4 border-t border-white/10\">\n          {/* Allocation Type */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">Allocation Type</label>\n            <select\n              value={formData.allocationType}\n              onChange={(e) => updateField(\"allocationType\", e.target.value)}\n              className=\"w-full px-4 py-2 bg-slate-800 border border-white/20 rounded-lg text-white outline-none focus:ring-2 focus:ring-cyan-500/50 transition-all\"\n            >\n              <option value=\"cash\">Fixed Cash</option>\n              <option value=\"cash_max_loss\">Cash Based on Max Loss</option>\n              <option value=\"max_loss\">Risk-Based (% of Portfolio)</option>\n            </select>\n          </div>\n\n          {/* Per Trade Cash */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Per Trade Cash ($)\n            </label>\n            <input\n              type=\"number\"\n              value={formData.perTradeCash}\n              onChange={(e) => updateField(\"perTradeCash\", Number(e.target.value))}\n              className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                errors.perTradeCash ? \"border-red-500\" : \"border-white/20\"\n              }`}\n            />\n            {errors.perTradeCash && (\n              <p className=\"mt-1 text-sm text-red-400\">{errors.perTradeCash}</p>\n            )}\n          </div>\n\n          {/* Max Concurrent Positions */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Max Concurrent Positions\n            </label>\n            <input\n              type=\"number\"\n              value={formData.maxConcurrentPositions}\n              onChange={(e) => updateField(\"maxConcurrentPositions\", Number(e.target.value))}\n              className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                errors.maxConcurrentPositions ? \"border-red-500\" : \"border-white/20\"\n              }`}\n            />\n            {errors.maxConcurrentPositions && (\n              <p className=\"mt-1 text-sm text-red-400\">{errors.maxConcurrentPositions}</p>\n            )}\n          </div>\n\n          {/* Portfolio Heat Max */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Portfolio Heat Max (%)\n            </label>\n            <input\n              type=\"number\"\n              value={formData.portfolioHeatMax}\n              onChange={(e) => updateField(\"portfolioHeatMax\", Number(e.target.value))}\n              className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                errors.portfolioHeatMax ? \"border-red-500\" : \"border-white/20\"\n              }`}\n            />\n            {errors.portfolioHeatMax && (\n              <p className=\"mt-1 text-sm text-red-400\">{errors.portfolioHeatMax}</p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ExitsSection({\n  expanded,\n  onToggle,\n  formData,\n  updateField,\n  errors,\n}: {\n  expanded: boolean;\n  onToggle: () => void;\n  formData: StrategyFormData;\n  updateField: (field: keyof StrategyFormData, value: any) => void;\n  errors: ValidationErrors;\n}) {\n  return (\n    <div className=\"bg-slate-900/60 border border-white/10 rounded-xl overflow-hidden\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-5 py-4 flex items-center justify-between hover:bg-slate-800/50 transition-all\"\n      >\n        <div className=\"flex items-center gap-3\">\n          <span className=\"text-xl\">🚪</span>\n          <span className=\"text-lg font-semibold text-white\">Exits</span>\n        </div>\n        <span className=\"text-slate-400\">{expanded ? \"▼\" : \"►\"}</span>\n      </button>\n\n      {expanded && (\n        <div className=\"px-5 py-4 space-y-4 border-t border-white/10\">\n          {/* Profit Target */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Profit Target (%)\n            </label>\n            <input\n              type=\"number\"\n              value={formData.profitTargetPct}\n              onChange={(e) => updateField(\"profitTargetPct\", Number(e.target.value))}\n              className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                errors.profitTargetPct ? \"border-red-500\" : \"border-white/20\"\n              }`}\n            />\n            {errors.profitTargetPct && (\n              <p className=\"mt-1 text-sm text-red-400\">{errors.profitTargetPct}</p>\n            )}\n          </div>\n\n          {/* Max Loss */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">Max Loss (%)</label>\n            <input\n              type=\"number\"\n              value={formData.maxLossPct}\n              onChange={(e) => updateField(\"maxLossPct\", Number(e.target.value))}\n              className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                errors.maxLossPct ? \"border-red-500\" : \"border-white/20\"\n              }`}\n            />\n            {errors.maxLossPct && <p className=\"mt-1 text-sm text-red-400\">{errors.maxLossPct}</p>}\n          </div>\n\n          {/* Time Exit DTE */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">Time Exit (DTE)</label>\n            <input\n              type=\"number\"\n              value={formData.timeExitDTE}\n              onChange={(e) => updateField(\"timeExitDTE\", Number(e.target.value))}\n              className={`w-full px-4 py-2 bg-slate-800 border rounded-lg text-white outline-none focus:ring-2 transition-all ${\n                errors.timeExitDTE ? \"border-red-500\" : \"border-white/20\"\n              }`}\n            />\n            {errors.timeExitDTE && (\n              <p className=\"mt-1 text-sm text-red-400\">{errors.timeExitDTE}</p>\n            )}\n          </div>\n\n          {/* OCO Brackets */}\n          <div className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              checked={formData.useOCOBrackets}\n              onChange={(e) => updateField(\"useOCOBrackets\", e.target.checked)}\n              className=\"w-4 h-4 bg-slate-800 border-white/20 rounded\"\n            />\n            <label className=\"text-sm text-slate-300\">Use OCO Brackets (One-Cancels-Other)</label>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\trading\\StrategySuggestionsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\ui\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\MarketAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\MarketStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\PortfolioSummary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\PreMarketMovers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\TodaySchedule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\components\\workflows\\MorningRoutine\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\contexts\\AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\contexts\\GlowStyleContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\contexts\\ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\contexts\\WorkflowContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[940,943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[940,943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1285,1288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1285,1288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2067,2070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2067,2070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from \"react\";\n\n/**\n * WorkflowContext\n *\n * Manages workflow navigation and data passing between different workflows.\n * Enables components to navigate to other workflows with pre-filled data.\n *\n * Example: AI Analysis → Execute Trade with symbol, entry price, stop loss pre-filled\n */\n\nexport type WorkflowType =\n  | \"morning-routine\"\n  | \"active-positions\"\n  | \"execute-trade\"\n  | \"research\"\n  | \"ai-recommendations\"\n  | \"analytics\"\n  | \"news-review\"\n  | \"strategy-builder\"\n  | \"backtesting\"\n  | \"settings\";\n\nexport interface TradeData {\n  symbol: string;\n  side?: \"buy\" | \"sell\";\n  quantity?: number;\n  entryPrice?: number;\n  stopLoss?: number;\n  takeProfit?: number;\n  orderType?: \"market\" | \"limit\" | \"stop\" | \"stop_limit\";\n  timeInForce?: \"day\" | \"gtc\" | \"ioc\" | \"fok\";\n  notes?: string;\n}\n\nexport interface WorkflowNavigationData {\n  workflow: WorkflowType;\n  data?: any; // Flexible data payload\n  tradeData?: TradeData; // Specific for trade execution\n  timestamp: string;\n}\n\ninterface WorkflowContextType {\n  currentWorkflow: WorkflowType | null;\n  pendingNavigation: WorkflowNavigationData | null;\n  setCurrentWorkflow: (workflow: WorkflowType) => void;\n  navigateToWorkflow: (workflow: WorkflowType, data?: any) => void;\n  navigateToTrade: (tradeData: TradeData) => void;\n  clearPendingNavigation: () => void;\n}\n\nconst WorkflowContext = createContext<WorkflowContextType | undefined>(undefined);\n\nexport const useWorkflow = () => {\n  const context = useContext(WorkflowContext);\n  if (!context) {\n    throw new Error(\"useWorkflow must be used within a WorkflowProvider\");\n  }\n  return context;\n};\n\ninterface WorkflowProviderProps {\n  children: ReactNode;\n}\n\nexport const WorkflowProvider: React.FC<WorkflowProviderProps> = ({ children }) => {\n  const [currentWorkflow, setCurrentWorkflow] = useState<WorkflowType | null>(null);\n  const [pendingNavigation, setPendingNavigation] = useState<WorkflowNavigationData | null>(null);\n\n  const navigateToWorkflow = (workflow: WorkflowType, data?: any) => {\n    const navigationData: WorkflowNavigationData = {\n      workflow,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n\n    setPendingNavigation(navigationData);\n    setCurrentWorkflow(workflow);\n\n    // Dispatch custom event for components that listen\n    window.dispatchEvent(new CustomEvent(\"workflow-navigate\", { detail: navigationData }));\n\n    console.info(\"[WorkflowContext] Navigating to:\", workflow, data);\n  };\n\n  const navigateToTrade = (tradeData: TradeData) => {\n    const navigationData: WorkflowNavigationData = {\n      workflow: \"execute-trade\",\n      tradeData,\n      timestamp: new Date().toISOString(),\n    };\n\n    setPendingNavigation(navigationData);\n    setCurrentWorkflow(\"execute-trade\");\n\n    // Dispatch custom event\n    window.dispatchEvent(new CustomEvent(\"workflow-navigate\", { detail: navigationData }));\n\n    console.info(\"[WorkflowContext] Navigating to Execute Trade:\", tradeData);\n  };\n\n  const clearPendingNavigation = () => {\n    setPendingNavigation(null);\n  };\n\n  const value: WorkflowContextType = {\n    currentWorkflow,\n    pendingNavigation,\n    setCurrentWorkflow,\n    navigateToWorkflow,\n    navigateToTrade,\n    clearPendingNavigation,\n  };\n\n  return <WorkflowContext.Provider value={value}>{children}</WorkflowContext.Provider>;\n};\n\nexport default WorkflowContext;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useBreakpoint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useMarketStream.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2440,2443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2440,2443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7983,7986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7983,7986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'symbols.length'. Either include it or remove the dependency array.","line":299,"column":6,"nodeType":"ArrayExpression","endLine":299,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [connect, log, symbols.length]","fix":{"range":[9236,9269],"text":"[connect, log, symbols.length]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":299,"column":7,"nodeType":"CallExpression","endLine":299,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useMarketStream Hook\n *\n * React hook for real-time market data streaming via Server-Sent Events (SSE).\n *\n * Features:\n * - Subscribes to price updates for specified symbols\n * - Auto-reconnects on disconnect\n * - Provides connection status\n * - Returns latest prices for all subscribed symbols\n *\n * Phase 2.A - Real-Time Data Implementation\n */\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport interface PriceData {\n  price: number;\n  timestamp: string;\n  type: \"trade\" | \"quote\";\n  bid?: number;\n  ask?: number;\n  size?: number;\n}\n\nexport interface MarketStreamState {\n  prices: Record<string, PriceData>;\n  connected: boolean;\n  connecting: boolean;\n  error: string | null;\n  lastUpdate: Date | null;\n  lastHeartbeat: Date | null;\n}\n\nexport interface UseMarketStreamOptions {\n  /** Auto-reconnect on disconnect (default: true) */\n  autoReconnect?: boolean;\n  /** Max reconnect attempts (default: 5) */\n  maxReconnectAttempts?: number;\n  /** Heartbeat timeout in seconds (default: 45) - reconnect if no heartbeat received */\n  heartbeatTimeout?: number;\n  /** Enable debug logging (default: false) */\n  debug?: boolean;\n}\n\n/**\n * Hook for streaming real-time market prices via SSE\n *\n * @param symbols Array of stock symbols to subscribe to (e.g., ['AAPL', 'MSFT'])\n * @param options Configuration options\n * @returns Object with prices, connection status, and control methods\n *\n * @example\n * const { prices, connected, error } = useMarketStream(['AAPL', 'MSFT', 'TSLA']);\n *\n * // Use prices in component\n * const aaplPrice = prices['AAPL']?.price ?? 0;\n * console.info(`AAPL: $${aaplPrice.toFixed(2)}`);\n */\nexport function useMarketStream(\n  symbols: string[],\n  options: UseMarketStreamOptions = {}\n): MarketStreamState & { reconnect: () => void } {\n  const {\n    autoReconnect = true,\n    maxReconnectAttempts = 5,\n    heartbeatTimeout = 45, // 45 seconds default (3x heartbeat interval)\n    debug = false,\n  } = options;\n\n  const [state, setState] = useState<MarketStreamState>({\n    prices: {},\n    connected: false,\n    connecting: false,\n    error: null,\n    lastUpdate: null,\n    lastHeartbeat: null,\n  });\n\n  const eventSourceRef = useRef<EventSource | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const heartbeatCheckIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const log = useCallback(\n    (...args: any[]) => {\n      if (debug) {\n        console.info(\"[useMarketStream]\", ...args);\n      }\n    },\n    [debug]\n  );\n\n  const connect = useCallback(() => {\n    // Clean up existing connection\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n\n    // Clear any pending reconnect\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    // Clear heartbeat check interval\n    if (heartbeatCheckIntervalRef.current) {\n      clearInterval(heartbeatCheckIntervalRef.current);\n      heartbeatCheckIntervalRef.current = null;\n    }\n\n    // Don't connect if no symbols\n    if (symbols.length === 0) {\n      log(\"No symbols to subscribe to\");\n      return;\n    }\n\n    setState((prev) => ({ ...prev, connecting: true, error: null }));\n    log(\"Connecting to price stream:\", symbols);\n\n    try {\n      // Build SSE URL\n      const symbolsParam = symbols.join(\",\");\n      const url = `/api/proxy/api/stream/prices?symbols=${symbolsParam}`;\n\n      // Create EventSource\n      const eventSource = new EventSource(url);\n      eventSourceRef.current = eventSource;\n\n      // Handle connection open\n      eventSource.onopen = () => {\n        log(\"✅ Connected to price stream\");\n        const now = new Date();\n        setState((prev) => ({\n          ...prev,\n          connected: true,\n          connecting: false,\n          error: null,\n          lastHeartbeat: now, // Initialize heartbeat timestamp on connect\n        }));\n        reconnectAttemptsRef.current = 0; // Reset reconnect counter on success\n\n        // Start heartbeat timeout checker\n        heartbeatCheckIntervalRef.current = setInterval(() => {\n          setState((currentState) => {\n            if (!currentState.lastHeartbeat || !currentState.connected) {\n              return currentState;\n            }\n\n            const timeSinceHeartbeat = (Date.now() - currentState.lastHeartbeat.getTime()) / 1000;\n\n            if (timeSinceHeartbeat > heartbeatTimeout) {\n              log(`⚠️ Heartbeat timeout (${timeSinceHeartbeat.toFixed(0)}s since last heartbeat)`);\n\n              // Trigger reconnect\n              if (eventSourceRef.current) {\n                eventSourceRef.current.close();\n                eventSourceRef.current = null;\n              }\n\n              if (autoReconnect && reconnectAttemptsRef.current < maxReconnectAttempts) {\n                reconnectAttemptsRef.current++;\n                log(\n                  `🔄 Reconnecting due to heartbeat timeout (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`\n                );\n                connect();\n              }\n\n              return {\n                ...currentState,\n                connected: false,\n                error: \"Heartbeat timeout - reconnecting...\",\n              };\n            }\n\n            return currentState;\n          });\n        }, 10000); // Check every 10 seconds\n      };\n\n      // Handle price updates\n      eventSource.addEventListener(\"price_update\", (event) => {\n        try {\n          const newPrices = JSON.parse(event.data) as Record<string, PriceData>;\n          log(\"📈 Price update:\", Object.keys(newPrices).length, \"symbols\");\n\n          setState((prev) => ({\n            ...prev,\n            prices: { ...prev.prices, ...newPrices },\n            lastUpdate: new Date(),\n          }));\n        } catch (error) {\n          console.error(\"[useMarketStream] Error parsing price update:\", error);\n        }\n      });\n\n      // Handle heartbeat (keep-alive and timeout detection)\n      eventSource.addEventListener(\"heartbeat\", (_event) => {\n        const now = new Date();\n        log(\"💓 Heartbeat received\");\n        setState((prev) => ({\n          ...prev,\n          lastHeartbeat: now,\n        }));\n      });\n\n      // Handle errors\n      eventSource.addEventListener(\"error\", (event) => {\n        try {\n          const errorData = JSON.parse((event as MessageEvent).data);\n          console.error(\"[useMarketStream] Server error:\", errorData.error);\n          setState((prev) => ({\n            ...prev,\n            error: errorData.error,\n            connected: false,\n          }));\n        } catch {\n          // Not a formatted error event, just log it\n          log(\"Error event (likely connection issue)\");\n        }\n      });\n\n      // Handle connection errors/close\n      eventSource.onerror = (_error) => {\n        log(\"❌ Connection error or closed\");\n\n        setState((prev) => ({\n          ...prev,\n          connected: false,\n          connecting: false,\n          error: \"Connection lost\",\n        }));\n\n        // Close the connection\n        eventSource.close();\n        eventSourceRef.current = null;\n\n        // Attempt reconnect if enabled\n        if (autoReconnect && reconnectAttemptsRef.current < maxReconnectAttempts) {\n          reconnectAttemptsRef.current++;\n          const backoffTime = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current), 30000); // Max 30s\n\n          log(\n            `⏳ Reconnecting in ${backoffTime / 1000}s (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`\n          );\n\n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, backoffTime);\n        } else if (reconnectAttemptsRef.current >= maxReconnectAttempts) {\n          setState((prev) => ({\n            ...prev,\n            error: \"Max reconnect attempts reached. Please refresh the page.\",\n          }));\n        }\n      };\n    } catch (error: any) {\n      console.error(\"[useMarketStream] Connection error:\", error);\n      setState((prev) => ({\n        ...prev,\n        connected: false,\n        connecting: false,\n        error: error.message || \"Failed to connect\",\n      }));\n    }\n  }, [symbols, autoReconnect, maxReconnectAttempts, heartbeatTimeout, log]);\n\n  // Manual reconnect method\n  const reconnect = useCallback(() => {\n    log(\"🔄 Manual reconnect triggered\");\n    reconnectAttemptsRef.current = 0; // Reset counter on manual reconnect\n    connect();\n  }, [connect, log]);\n\n  // Connect on mount or when symbols change\n  useEffect(() => {\n    if (symbols.length > 0) {\n      connect();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      log(\"🧹 Cleaning up market stream\");\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n        reconnectTimeoutRef.current = null;\n      }\n      if (heartbeatCheckIntervalRef.current) {\n        clearInterval(heartbeatCheckIntervalRef.current);\n        heartbeatCheckIntervalRef.current = null;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [symbols.join(\",\"), connect, log]); // Re-connect when symbols change\n\n  return {\n    ...state,\n    reconnect,\n  };\n}\n\n/**\n * Hook for getting a single symbol's price\n *\n * @param symbol Single stock symbol\n * @returns Price data for that symbol\n *\n * @example\n * const { price, connected } = useSymbolPrice('AAPL');\n * console.info(`AAPL: $${(price ?? 0).toFixed(2)}`);\n */\nexport function useSymbolPrice(symbol: string) {\n  const { prices, connected, connecting, error } = useMarketStream([symbol]);\n  const priceData = prices[symbol];\n\n  return {\n    price: priceData?.price ?? null,\n    bid: priceData?.bid ?? null,\n    ask: priceData?.ask ?? null,\n    timestamp: priceData?.timestamp ?? null,\n    type: priceData?.type ?? null,\n    connected,\n    connecting,\n    error,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\usePositionUpdates.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2452,2455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2452,2455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7775,7778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7775,7778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * usePositionUpdates Hook\n *\n * React hook for real-time position updates via Server-Sent Events (SSE).\n *\n * Features:\n * - Subscribes to position updates from backend\n * - Auto-reconnects on disconnect\n * - Provides connection status\n * - Returns latest positions with P&L\n *\n * Phase 5.B.2 - Real-Time UI Updates\n */\n\nimport { useEffect, useState, useCallback, useRef } from \"react\";\n\nexport interface Position {\n  symbol: string;\n  qty: number;\n  avgEntryPrice: number;\n  currentPrice: number;\n  marketValue: number;\n  unrealizedPL: number;\n  unrealizedPLPercent: number;\n  side: \"long\" | \"short\";\n  dayChange: number;\n  dayChangePercent: number;\n}\n\nexport interface PositionStreamState {\n  positions: Position[];\n  connected: boolean;\n  connecting: boolean;\n  error: string | null;\n  lastUpdate: Date | null;\n  lastHeartbeat: Date | null;\n}\n\nexport interface UsePositionUpdatesOptions {\n  /** Auto-reconnect on disconnect (default: true) */\n  autoReconnect?: boolean;\n  /** Max reconnect attempts (default: 5) */\n  maxReconnectAttempts?: number;\n  /** Heartbeat timeout in seconds (default: 45) - reconnect if no heartbeat received */\n  heartbeatTimeout?: number;\n  /** Enable debug logging (default: false) */\n  debug?: boolean;\n}\n\n/**\n * Hook for streaming real-time position updates via SSE\n *\n * @param options Configuration options\n * @returns Object with positions, connection status, and control methods\n *\n * @example\n * const { positions, connected, error } = usePositionUpdates();\n *\n * // Use positions in component\n * const totalPL = positions.reduce((sum, p) => sum + p.unrealizedPL, 0);\n * console.info(`Total P&L: $${totalPL.toFixed(2)}`);\n */\nexport function usePositionUpdates(\n  options: UsePositionUpdatesOptions = {}\n): PositionStreamState & { reconnect: () => void } {\n  const {\n    autoReconnect = true,\n    maxReconnectAttempts = 5,\n    heartbeatTimeout = 45, // 45 seconds default (3x heartbeat interval)\n    debug = false,\n  } = options;\n\n  const [state, setState] = useState<PositionStreamState>({\n    positions: [],\n    connected: false,\n    connecting: false,\n    error: null,\n    lastUpdate: null,\n    lastHeartbeat: null,\n  });\n\n  const eventSourceRef = useRef<EventSource | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const heartbeatCheckIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const log = useCallback(\n    (...args: any[]) => {\n      if (debug) {\n        console.info(\"[usePositionUpdates]\", ...args);\n      }\n    },\n    [debug]\n  );\n\n  const connect = useCallback(() => {\n    // Clean up existing connection\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n\n    // Clear any pending reconnect\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    // Clear heartbeat check interval\n    if (heartbeatCheckIntervalRef.current) {\n      clearInterval(heartbeatCheckIntervalRef.current);\n      heartbeatCheckIntervalRef.current = null;\n    }\n\n    setState((prev) => ({ ...prev, connecting: true, error: null }));\n    log(\"Connecting to position stream\");\n\n    try {\n      // Build SSE URL\n      const url = `/api/proxy/stream/positions`;\n\n      // Create EventSource\n      const eventSource = new EventSource(url);\n      eventSourceRef.current = eventSource;\n\n      // Handle connection open\n      eventSource.onopen = () => {\n        log(\"✅ Connected to position stream\");\n        const now = new Date();\n        setState((prev) => ({\n          ...prev,\n          connected: true,\n          connecting: false,\n          error: null,\n          lastHeartbeat: now, // Initialize heartbeat timestamp on connect\n        }));\n        reconnectAttemptsRef.current = 0; // Reset reconnect counter on success\n\n        // Start heartbeat timeout checker\n        heartbeatCheckIntervalRef.current = setInterval(() => {\n          setState((currentState) => {\n            if (!currentState.lastHeartbeat || !currentState.connected) {\n              return currentState;\n            }\n\n            const timeSinceHeartbeat = (Date.now() - currentState.lastHeartbeat.getTime()) / 1000;\n\n            if (timeSinceHeartbeat > heartbeatTimeout) {\n              log(`⚠️ Heartbeat timeout (${timeSinceHeartbeat.toFixed(0)}s since last heartbeat)`);\n\n              // Trigger reconnect\n              if (eventSourceRef.current) {\n                eventSourceRef.current.close();\n                eventSourceRef.current = null;\n              }\n\n              if (autoReconnect && reconnectAttemptsRef.current < maxReconnectAttempts) {\n                reconnectAttemptsRef.current++;\n                log(\n                  `🔄 Reconnecting due to heartbeat timeout (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`\n                );\n                connect();\n              }\n\n              return {\n                ...currentState,\n                connected: false,\n                error: \"Heartbeat timeout - reconnecting...\",\n              };\n            }\n\n            return currentState;\n          });\n        }, 10000); // Check every 10 seconds\n      };\n\n      // Handle position updates\n      eventSource.addEventListener(\"position_update\", (event) => {\n        try {\n          const newPositions = JSON.parse(event.data) as Position[];\n          log(\"📊 Position update:\", newPositions.length, \"positions\");\n\n          setState((prev) => ({\n            ...prev,\n            positions: newPositions,\n            lastUpdate: new Date(),\n          }));\n        } catch (error) {\n          console.error(\"[usePositionUpdates] Error parsing position update:\", error);\n        }\n      });\n\n      // Handle heartbeat (keep-alive and timeout detection)\n      eventSource.addEventListener(\"heartbeat\", (_event) => {\n        const now = new Date();\n        log(\"💓 Heartbeat received\");\n        setState((prev) => ({\n          ...prev,\n          lastHeartbeat: now,\n        }));\n      });\n\n      // Handle errors\n      eventSource.addEventListener(\"error\", (event) => {\n        try {\n          const errorData = JSON.parse((event as MessageEvent).data);\n          console.error(\"[usePositionUpdates] Server error:\", errorData.error);\n          setState((prev) => ({\n            ...prev,\n            error: errorData.error,\n            connected: false,\n          }));\n        } catch {\n          // Not a formatted error event, just log it\n          log(\"Error event (likely connection issue)\");\n        }\n      });\n\n      // Handle connection errors/close\n      eventSource.onerror = (_error) => {\n        log(\"❌ Connection error or closed\");\n\n        setState((prev) => ({\n          ...prev,\n          connected: false,\n          connecting: false,\n          error: \"Connection lost\",\n        }));\n\n        // Close the connection\n        eventSource.close();\n        eventSourceRef.current = null;\n\n        // Attempt reconnect if enabled\n        if (autoReconnect && reconnectAttemptsRef.current < maxReconnectAttempts) {\n          reconnectAttemptsRef.current++;\n          const backoffTime = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current), 30000); // Max 30s\n\n          log(\n            `⏳ Reconnecting in ${backoffTime / 1000}s (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`\n          );\n\n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, backoffTime);\n        } else if (reconnectAttemptsRef.current >= maxReconnectAttempts) {\n          setState((prev) => ({\n            ...prev,\n            error: \"Max reconnect attempts reached. Please refresh the page.\",\n          }));\n        }\n      };\n    } catch (error: any) {\n      console.error(\"[usePositionUpdates] Connection error:\", error);\n      setState((prev) => ({\n        ...prev,\n        connected: false,\n        connecting: false,\n        error: error.message || \"Failed to connect\",\n      }));\n    }\n  }, [autoReconnect, maxReconnectAttempts, heartbeatTimeout, log]);\n\n  // Manual reconnect method\n  const reconnect = useCallback(() => {\n    log(\"🔄 Manual reconnect triggered\");\n    reconnectAttemptsRef.current = 0; // Reset counter on manual reconnect\n    connect();\n  }, [connect, log]);\n\n  // Connect on mount\n  useEffect(() => {\n    connect();\n\n    // Cleanup on unmount\n    return () => {\n      log(\"🧹 Cleaning up position stream\");\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n        reconnectTimeoutRef.current = null;\n      }\n      if (heartbeatCheckIntervalRef.current) {\n        clearInterval(heartbeatCheckIntervalRef.current);\n        heartbeatCheckIntervalRef.current = null;\n      }\n    };\n  }, [connect, log]);\n\n  return {\n    ...state,\n    reconnect,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\hooks\\useSWR.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\aiAdapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\alpaca.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\apiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\authApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\logger.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1675,1733],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"group"},"fix":{"range":[1862,1883],"text":""},"desc":"Remove the console.group()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[1958,1977],"text":""},"desc":"Remove the console.groupEnd()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"time"},"fix":{"range":[2104,2124],"text":""},"desc":"Remove the console.time()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"timeEnd"},"fix":{"range":[2211,2234],"text":""},"desc":"Remove the console.timeEnd()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\marketData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\sentry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\tradeHistory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\lib\\userManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\_app.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\_document.tsx","messages":[{"ruleId":"@next/next/no-title-in-document-head","severity":1,"message":"Do not use `<title>` element with `<Head />` component from `next/document`. Titles should defined at the page-level using `<Head />` from `next/head` instead. See: https://nextjs.org/docs/messages/no-title-in-document-head","line":8,"column":9,"nodeType":"JSXElement","endLine":8,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>PaiiD - Personal AI Investment Dashboard</title>\n        {/* Using Georgia serif font as fallback - no external font loading needed */}\n      </Head>\n      <body style={{ margin: 0, padding: 0, overflow: \"hidden\" }}>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\ai\\recommendations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\ai\\suggest-strategy.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[185,188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[185,188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from \"next\";\n// TODO: Re-enable when strategies module is implemented\n// import { Strategy } from \"@/strategies/schema\";\ntype Strategy = any;\n\n/**\n * AI Strategy Suggestion Endpoint\n *\n * Analyzes current market conditions and recommends optimal strategies\n * from the Allessandra library based on:\n * - Technical indicators alignment\n * - IV percentile and options liquidity\n * - Upcoming earnings and news sentiment\n * - Risk/reward profile\n */\n\ninterface TechnicalIndicators {\n  sma20?: number;\n  sma50?: number;\n  sma200?: number;\n  rsi?: number;\n  macd?: { macd: number; signal: number; histogram: number };\n  iv_percentile?: number;\n  hv_20?: number;\n}\n\ninterface OptionsMetrics {\n  avgCallIV?: number;\n  avgPutIV?: number;\n  atmCallOI?: number;\n  atmPutOI?: number;\n  avgSpread?: number;\n}\n\ninterface SuggestStrategyRequest {\n  symbol: string;\n  currentPrice: number;\n  technicals?: TechnicalIndicators;\n  optionsChain?: OptionsMetrics;\n  earningsDate?: string;\n}\n\ninterface StrategyLeg {\n  type: \"STOCK\" | \"CALL\" | \"PUT\";\n  side: \"BUY\" | \"SELL\";\n  qty?: number;\n  strike?: number;\n  dte?: number;\n  delta?: number;\n}\n\ninterface StrategySuggestion {\n  strategyId: string;\n  strategyName: string;\n  confidence: number; // 0-100\n  reasoning: string;\n  proposedLegs: StrategyLeg[];\n  maxRisk: number;\n  maxProfit: number;\n  breakevens: number[];\n  riskRewardRatio: number;\n}\n\ninterface SuggestStrategyResponse {\n  symbol: string;\n  currentPrice: number;\n  suggestions: StrategySuggestion[];\n  analysis: {\n    technicalSetup: string;\n    ivEnvironment: string;\n    riskLevel: \"low\" | \"medium\" | \"high\";\n  };\n}\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({ error: \"Method not allowed\" });\n  }\n\n  const { symbol, currentPrice, technicals, optionsChain, earningsDate }: SuggestStrategyRequest =\n    req.body;\n\n  if (!symbol || !currentPrice) {\n    return res.status(400).json({ error: \"Missing required parameters: symbol, currentPrice\" });\n  }\n\n  try {\n    // Load Allessandra seed strategies\n    const strategies = await loadSeedStrategies();\n\n    // Score each strategy based on current conditions\n    const scoredStrategies = strategies.map((strategy) => ({\n      strategy,\n      score: scoreStrategy(strategy, {\n        symbol,\n        currentPrice,\n        technicals,\n        optionsChain,\n        earningsDate,\n      }),\n    }));\n\n    // Sort by score and take top 3\n    const topStrategies = scoredStrategies\n      .sort((a, b) => b.score.confidence - a.score.confidence)\n      .slice(0, 3)\n      .map(({ strategy, score }) => {\n        const suggestion = generateStrategyProposal(strategy, currentPrice, score);\n        return suggestion;\n      });\n\n    // Generate analysis summary\n    const analysis = generateAnalysis(technicals, optionsChain);\n\n    res.status(200).json({\n      symbol,\n      currentPrice,\n      suggestions: topStrategies,\n      analysis,\n    } as SuggestStrategyResponse);\n  } catch (error) {\n    console.error(\"Strategy suggestion error:\", error);\n    res.status(500).json({\n      error: \"Failed to generate strategy suggestions\",\n      detail: String(error),\n    });\n  }\n}\n\n/**\n * Load seed strategies from the Allessandra library\n */\nasync function loadSeedStrategies(): Promise<Strategy[]> {\n  // In production, load from database or filesystem\n  // For now, return mock strategy definitions\n  return [\n    {\n      strategy_id: \"micro_collar_sub4_v1\",\n      name: \"Micro Protective Collar – Sub-$4\",\n      goal: \"Income with capped downside on cheap stocks\",\n    } as Strategy,\n    {\n      strategy_id: \"pc_spread_sub4_v1\",\n      name: \"Put Credit Spread – Sub-$4\",\n      goal: \"Defined-risk premium capture\",\n    } as Strategy,\n    {\n      strategy_id: \"csp_wheel_sub4_v1\",\n      name: \"Cash-Secured Put Wheel – Sub-$4\",\n      goal: \"Premium income willing-to-own\",\n    } as Strategy,\n    {\n      strategy_id: \"spy_iron_condor_v1\",\n      name: \"SPY Iron Condor – Range-bound\",\n      goal: \"High-probability income in low volatility\",\n    } as Strategy,\n  ];\n}\n\n/**\n * Score a strategy based on current market conditions\n */\nfunction scoreStrategy(\n  strategy: Strategy,\n  context: SuggestStrategyRequest\n): { confidence: number; reasoning: string[] } {\n  const reasons: string[] = [];\n  let score = 0;\n\n  const { currentPrice, technicals, optionsChain, earningsDate } = context;\n\n  // Check price range filter\n  if (strategy.universe?.filters?.price_between) {\n    const [min, max] = strategy.universe.filters.price_between;\n    if (currentPrice >= min && currentPrice <= max) {\n      score += 25;\n      reasons.push(\n        `Price $${currentPrice.toFixed(2)} fits ${strategy.name} target range ($${min}-$${max})`\n      );\n    } else {\n      score -= 30;\n      reasons.push(`Price $${currentPrice.toFixed(2)} outside target range ($${min}-$${max})`);\n      return { confidence: Math.max(0, score), reasoning: reasons };\n    }\n  }\n\n  // Check options liquidity\n  if (strategy.universe?.filters?.min_option_oi_per_strike && optionsChain?.atmCallOI) {\n    if (optionsChain.atmCallOI >= strategy.universe.filters.min_option_oi_per_strike) {\n      score += 20;\n      reasons.push(`Options liquidity sufficient (OI: ${optionsChain.atmCallOI.toLocaleString()})`);\n    } else {\n      score -= 20;\n      reasons.push(`Low options liquidity (OI: ${optionsChain.atmCallOI.toLocaleString()})`);\n    }\n  }\n\n  // Check spread tolerance\n  if (strategy.universe?.filters?.max_option_spread && optionsChain?.avgSpread) {\n    if (optionsChain.avgSpread <= strategy.universe.filters.max_option_spread) {\n      score += 15;\n      reasons.push(`Tight spreads (${(optionsChain.avgSpread * 100).toFixed(1)}%)`);\n    } else {\n      score -= 15;\n      reasons.push(`Wide spreads (${(optionsChain.avgSpread * 100).toFixed(1)}%)`);\n    }\n  }\n\n  // Check technical indicators\n  if (technicals?.rsi) {\n    if (strategy.strategy_id.includes(\"put\") && technicals.rsi < 40) {\n      score += 15;\n      reasons.push(`RSI oversold (${technicals.rsi.toFixed(1)}) - bullish setup for put selling`);\n    } else if (strategy.strategy_id.includes(\"call\") && technicals.rsi > 60) {\n      score += 15;\n      reasons.push(\n        `RSI overbought (${technicals.rsi.toFixed(1)}) - bearish setup for call selling`\n      );\n    }\n  }\n\n  // Check earnings proximity\n  if (earningsDate && strategy.exits?.time_exit_before_earnings_days) {\n    const daysToEarnings = Math.floor(\n      (new Date(earningsDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24)\n    );\n    if (daysToEarnings > strategy.exits.time_exit_before_earnings_days + 7) {\n      score += 10;\n      reasons.push(`Sufficient time before earnings (${daysToEarnings} days)`);\n    } else {\n      score -= 20;\n      reasons.push(`Too close to earnings (${daysToEarnings} days)`);\n    }\n  }\n\n  // IV environment check\n  if (technicals?.iv_percentile) {\n    if (strategy.strategy_id.includes(\"credit\") || strategy.strategy_id.includes(\"wheel\")) {\n      // Premium selling strategies prefer high IV\n      if (technicals.iv_percentile > 50) {\n        score += 15;\n        reasons.push(\n          `High IV environment (${technicals.iv_percentile.toFixed(0)}th percentile) - good for premium selling`\n        );\n      } else {\n        score -= 10;\n        reasons.push(\n          `Low IV environment (${technicals.iv_percentile.toFixed(0)}th percentile) - less attractive for premium selling`\n        );\n      }\n    }\n  }\n\n  return {\n    confidence: Math.max(0, Math.min(100, score)),\n    reasoning: reasons,\n  };\n}\n\n/**\n * Generate strategy proposal with specific legs and risk metrics\n */\nfunction generateStrategyProposal(\n  strategy: Strategy,\n  currentPrice: number,\n  scoreData: { confidence: number; reasoning: string[] }\n): StrategySuggestion {\n  const atmStrike = Math.round(currentPrice / 5) * 5;\n\n  let proposedLegs: StrategyLeg[] = [];\n  let maxRisk = 0;\n  let maxProfit = 0;\n  let breakevens: number[] = [];\n\n  // Generate legs based on strategy type\n  if (strategy.strategy_id.includes(\"collar\")) {\n    // Protective Collar: Long stock + Long put + Short call\n    proposedLegs = [\n      { type: \"STOCK\", side: \"BUY\", qty: 100 },\n      { type: \"PUT\", side: \"BUY\", strike: atmStrike - 5, dte: 35, delta: -0.2 },\n      { type: \"CALL\", side: \"SELL\", strike: atmStrike + 5, dte: 14, delta: 0.3 },\n    ];\n    maxRisk = 500; // Stock can drop $5 to put strike\n    maxProfit = 500; // Stock can rise $5 to call strike\n    breakevens = [currentPrice];\n  } else if (strategy.strategy_id.includes(\"pc_spread\")) {\n    // Put Credit Spread\n    const shortStrike = atmStrike - 5;\n    const longStrike = atmStrike - 10;\n    proposedLegs = [\n      { type: \"PUT\", side: \"SELL\", strike: shortStrike, dte: 28, delta: -0.25 },\n      { type: \"PUT\", side: \"BUY\", strike: longStrike, dte: 28, delta: -0.1 },\n    ];\n    maxRisk = (shortStrike - longStrike) * 100 - 150; // Width minus credit\n    maxProfit = 150; // Credit received\n    breakevens = [shortStrike - 1.5];\n  } else if (strategy.strategy_id.includes(\"csp\")) {\n    // Cash-Secured Put\n    const strike = atmStrike - 5;\n    proposedLegs = [{ type: \"PUT\", side: \"SELL\", strike, dte: 28, delta: -0.25 }];\n    maxRisk = strike * 100 - 150; // Strike minus credit\n    maxProfit = 150; // Credit received\n    breakevens = [strike - 1.5];\n  } else if (strategy.strategy_id.includes(\"condor\")) {\n    // Iron Condor\n    proposedLegs = [\n      { type: \"PUT\", side: \"SELL\", strike: atmStrike - 10, dte: 30, delta: -0.2 },\n      { type: \"PUT\", side: \"BUY\", strike: atmStrike - 15, dte: 30, delta: -0.1 },\n      { type: \"CALL\", side: \"SELL\", strike: atmStrike + 10, dte: 30, delta: 0.2 },\n      { type: \"CALL\", side: \"BUY\", strike: atmStrike + 15, dte: 30, delta: 0.1 },\n    ];\n    maxRisk = 350;\n    maxProfit = 150;\n    breakevens = [atmStrike - 8.5, atmStrike + 8.5];\n  }\n\n  return {\n    strategyId: strategy.strategy_id,\n    strategyName: strategy.name,\n    confidence: scoreData.confidence,\n    reasoning: scoreData.reasoning.join(\"\\n\"),\n    proposedLegs,\n    maxRisk,\n    maxProfit,\n    breakevens,\n    riskRewardRatio: maxProfit / Math.max(maxRisk, 1),\n  };\n}\n\n/**\n * Generate analysis summary\n */\nfunction generateAnalysis(\n  technicals?: TechnicalIndicators,\n  _optionsChain?: OptionsMetrics\n): { technicalSetup: string; ivEnvironment: string; riskLevel: \"low\" | \"medium\" | \"high\" } {\n  let technicalSetup = \"Neutral\";\n  let ivEnvironment = \"Normal\";\n  let riskLevel: \"low\" | \"medium\" | \"high\" = \"medium\";\n\n  // Technical setup\n  if (technicals?.rsi) {\n    if (technicals.rsi < 30) {\n      technicalSetup = \"Oversold - Bullish reversal potential\";\n      riskLevel = \"low\";\n    } else if (technicals.rsi > 70) {\n      technicalSetup = \"Overbought - Bearish reversal potential\";\n      riskLevel = \"high\";\n    } else if (technicals.sma20 && technicals.sma50) {\n      if (technicals.sma20 > technicals.sma50) {\n        technicalSetup = \"Uptrend - Bullish momentum\";\n      } else {\n        technicalSetup = \"Downtrend - Bearish momentum\";\n      }\n    }\n  }\n\n  // IV environment\n  if (technicals?.iv_percentile) {\n    if (technicals.iv_percentile > 75) {\n      ivEnvironment = \"Elevated IV - Favorable for premium selling\";\n      riskLevel = \"high\";\n    } else if (technicals.iv_percentile < 25) {\n      ivEnvironment = \"Low IV - Favorable for premium buying\";\n      riskLevel = \"low\";\n    } else {\n      ivEnvironment = `Moderate IV (${technicals.iv_percentile.toFixed(0)}th percentile)`;\n    }\n  }\n\n  return {\n    technicalSetup,\n    ivEnvironment,\n    riskLevel,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\chat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\market\\historical.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\market\\options-chain.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2926,2929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2926,2929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3347,3350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3347,3350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from \"next\";\n\nconst ALPACA_API_KEY = process.env.ALPACA_API_KEY!;\nconst ALPACA_API_SECRET = process.env.ALPACA_API_SECRET!;\nconst ALPACA_BASE_URL = process.env.ALPACA_BASE_URL || \"https://data.alpaca.markets\";\n\ninterface OptionQuote {\n  strike: number;\n  expiration: string;\n  type: \"call\" | \"put\";\n  last: number;\n  bid: number;\n  ask: number;\n  volume: number;\n  openInterest: number;\n  delta: number;\n  gamma: number;\n  theta: number;\n  vega: number;\n  impliedVolatility: number;\n}\n\ninterface OptionsChainResponse {\n  symbol: string;\n  underlyingPrice: number;\n  expirations: string[];\n  chains: {\n    strike: number;\n    call: OptionQuote | null;\n    put: OptionQuote | null;\n  }[];\n}\n\n/**\n * Options Chain API\n *\n * GET /api/market/options-chain?symbol=AAPL&expiration=2025-02-21\n *\n * Returns options chain data with greeks and IV\n */\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== \"GET\") {\n    return res.status(405).json({ error: \"Method not allowed\" });\n  }\n\n  const { symbol, expiration } = req.query;\n\n  if (!symbol || typeof symbol !== \"string\") {\n    return res.status(400).json({ error: \"Missing or invalid symbol parameter\" });\n  }\n\n  try {\n    // Fetch options snapshots from Alpaca\n    const url = new URL(`${ALPACA_BASE_URL}/v1beta1/options/snapshots/${symbol.toUpperCase()}`);\n    if (expiration && typeof expiration === \"string\") {\n      url.searchParams.set(\"expiration_date\", expiration);\n    }\n\n    const response = await fetch(url.toString(), {\n      headers: {\n        \"APCA-API-KEY-ID\": ALPACA_API_KEY,\n        \"APCA-API-SECRET-KEY\": ALPACA_API_SECRET,\n      },\n      cache: \"no-store\",\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Alpaca options API error:\", response.status, errorText);\n\n      // If no options data available, return mock data for demo\n      if (response.status === 404 || response.status === 422) {\n        return res\n          .status(200)\n          .json(generateMockOptionsChain(symbol.toUpperCase(), expiration as string | undefined));\n      }\n\n      return res.status(response.status).json({\n        error: \"Failed to fetch options data from Alpaca\",\n        detail: errorText,\n      });\n    }\n\n    const data = await response.json();\n\n    // Transform Alpaca data to our format\n    const result = transformAlpacaOptions(data, symbol.toUpperCase());\n\n    res.setHeader(\"Cache-Control\", \"public, s-maxage=30, stale-while-revalidate=60\");\n    res.status(200).json(result);\n  } catch (error) {\n    console.error(\"Options chain fetch error:\", error);\n\n    // Fallback to mock data on error\n    res\n      .status(200)\n      .json(generateMockOptionsChain(symbol.toUpperCase(), expiration as string | undefined));\n  }\n}\n\n/**\n * Transform Alpaca options data to our format\n */\nfunction transformAlpacaOptions(alpacaData: any, symbol: string): OptionsChainResponse {\n  // Parse Alpaca response and transform to our schema\n  // This is a placeholder - actual Alpaca response format may vary\n  const snapshots = alpacaData.snapshots || {};\n  const chains = new Map<number, { call: OptionQuote | null; put: OptionQuote | null }>();\n  const expirations = new Set<string>();\n\n  Object.entries(snapshots).forEach(([optionSymbol, snapshot]: [string, any]) => {\n    const quote = snapshot.latestQuote || {};\n    const greeks = snapshot.greeks || {};\n\n    // Parse option symbol (format: AAPL250221C00150000)\n    const match = optionSymbol.match(/([A-Z]+)(\\d{6})([CP])(\\d{8})/);\n    if (!match) return;\n\n    const [, , dateStr, type, strikeStr] = match;\n    const strike = parseInt(strikeStr) / 1000;\n    const expiration = `20${dateStr.slice(0, 2)}-${dateStr.slice(2, 4)}-${dateStr.slice(4, 6)}`;\n\n    expirations.add(expiration);\n\n    if (!chains.has(strike)) {\n      chains.set(strike, { call: null, put: null });\n    }\n\n    const optionQuote: OptionQuote = {\n      strike,\n      expiration,\n      type: type === \"C\" ? \"call\" : \"put\",\n      last: quote.ap || 0,\n      bid: quote.bp || 0,\n      ask: quote.ap || 0,\n      volume: snapshot.dailyVolume || 0,\n      openInterest: snapshot.openInterest || 0,\n      delta: greeks.delta || 0,\n      gamma: greeks.gamma || 0,\n      theta: greeks.theta || 0,\n      vega: greeks.vega || 0,\n      impliedVolatility: greeks.impliedVolatility || 0,\n    };\n\n    const chain = chains.get(strike)!;\n    if (type === \"C\") {\n      chain.call = optionQuote;\n    } else {\n      chain.put = optionQuote;\n    }\n  });\n\n  return {\n    symbol,\n    underlyingPrice: 184.1, // TODO: Get from quote API\n    expirations: Array.from(expirations).sort(),\n    chains: Array.from(chains.entries())\n      .map(([strike, { call, put }]) => ({ strike, call, put }))\n      .sort((a, b) => a.strike - b.strike),\n  };\n}\n\n/**\n * Generate mock options chain data for demo purposes\n */\nfunction generateMockOptionsChain(symbol: string, expiration?: string): OptionsChainResponse {\n  const underlyingPrice = 184.1;\n  const expirations = [\n    \"2025-01-17\",\n    \"2025-01-24\",\n    \"2025-02-21\",\n    \"2025-03-21\",\n    \"2025-06-20\",\n    \"2026-01-16\",\n  ];\n\n  const selectedExpiration = expiration || expirations[2];\n  const atmStrike = Math.round(underlyingPrice / 5) * 5;\n  const strikes = [];\n\n  // Generate strikes ATM ± 10 strikes ($5 intervals)\n  for (let i = -10; i <= 10; i++) {\n    strikes.push(atmStrike + i * 5);\n  }\n\n  const chains = strikes.map((strike) => {\n    const distanceFromATM = Math.abs(strike - underlyingPrice);\n\n    // Calculate mock greeks based on moneyness\n    const callDelta = Math.max(0.05, Math.min(0.95, 0.5 + (underlyingPrice - strike) / 100));\n    const putDelta = -Math.max(0.05, Math.min(0.95, 0.5 + (strike - underlyingPrice) / 100));\n    const gamma = 0.01 * Math.exp(-Math.pow(distanceFromATM / 20, 2));\n    const theta = -0.05 - 0.02 * Math.exp(-Math.pow(distanceFromATM / 20, 2));\n    const vega = 0.15 + 0.1 * Math.exp(-Math.pow(distanceFromATM / 20, 2));\n    const iv = 0.25 + 0.1 * Math.exp(-Math.pow(distanceFromATM / 30, 2));\n\n    // Calculate intrinsic and extrinsic value\n    const callIntrinsic = Math.max(0, underlyingPrice - strike);\n    const putIntrinsic = Math.max(0, strike - underlyingPrice);\n    const extrinsicValue = 2.0 + 5.0 * Math.exp(-Math.pow(distanceFromATM / 15, 2));\n\n    const callLast = callIntrinsic + extrinsicValue;\n    const putLast = putIntrinsic + extrinsicValue;\n\n    // Mock volume and OI (higher near ATM)\n    const volumeFactor = Math.exp(-Math.pow(distanceFromATM / 15, 2));\n    const callVolume = Math.floor(500 + 3000 * volumeFactor);\n    const putVolume = Math.floor(400 + 2500 * volumeFactor);\n    const callOI = Math.floor(1000 + 10000 * volumeFactor);\n    const putOI = Math.floor(800 + 8000 * volumeFactor);\n\n    const call: OptionQuote = {\n      strike,\n      expiration: selectedExpiration,\n      type: \"call\",\n      last: callLast,\n      bid: callLast * 0.98,\n      ask: callLast * 1.02,\n      volume: callVolume,\n      openInterest: callOI,\n      delta: callDelta,\n      gamma,\n      theta,\n      vega,\n      impliedVolatility: iv,\n    };\n\n    const put: OptionQuote = {\n      strike,\n      expiration: selectedExpiration,\n      type: \"put\",\n      last: putLast,\n      bid: putLast * 0.98,\n      ask: putLast * 1.02,\n      volume: putVolume,\n      openInterest: putOI,\n      delta: putDelta,\n      gamma,\n      theta,\n      vega,\n      impliedVolatility: iv,\n    };\n\n    return { strike, call, put };\n  });\n\n  return {\n    symbol,\n    underlyingPrice,\n    expirations,\n    chains,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\pnl\\calculate-theoretical.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\pnl\\comparison\\[positionId].ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\pnl\\track-position.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4362,4365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4362,4365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5179,5182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5179,5182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from \"next\";\nimport type { PositionTracking, Greeks } from \"@/types/pnl\";\n\n/**\n * Track Position P&L Endpoint\n *\n * POST /api/pnl/track-position\n *\n * Returns real-time P&L updates with variance from theoretical baseline\n * for an active position\n */\n\ninterface TrackPositionRequest {\n  positionId: string;\n}\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({ error: \"Method not allowed\" });\n  }\n\n  const { positionId }: TrackPositionRequest = req.body;\n\n  if (!positionId) {\n    return res.status(400).json({ error: \"Missing required parameter: positionId\" });\n  }\n\n  try {\n    // In production, fetch from database\n    const positionTracking = await fetchPositionTracking(positionId);\n\n    if (!positionTracking) {\n      return res.status(404).json({ error: \"Position not found\" });\n    }\n\n    // Update current prices and P&L\n    const updatedTracking = await updateRealTimePL(positionTracking);\n\n    res.status(200).json(updatedTracking);\n  } catch (error) {\n    console.error(\"Position tracking error:\", error);\n    res.status(500).json({\n      error: \"Failed to track position\",\n      detail: String(error),\n    });\n  }\n}\n\n/**\n * Fetch position tracking data from database (mock)\n */\nasync function fetchPositionTracking(positionId: string): Promise<PositionTracking | null> {\n  // Mock data - in production, query database\n  const mockPosition: PositionTracking = {\n    positionId,\n    symbol: \"AAPL\",\n    strategy: \"Iron Condor\",\n    legs: [\n      {\n        type: \"PUT\",\n        side: \"SELL\",\n        qty: 1,\n        strike: 175,\n        expiration: \"2025-02-21\",\n        theoreticalPrice: 2.5,\n        actualPrice: 2.45, // Slightly worse fill\n        currentPrice: 2.3,\n      },\n      {\n        type: \"PUT\",\n        side: \"BUY\",\n        qty: 1,\n        strike: 170,\n        expiration: \"2025-02-21\",\n        theoreticalPrice: 1.2,\n        actualPrice: 1.22,\n        currentPrice: 1.15,\n      },\n      {\n        type: \"CALL\",\n        side: \"SELL\",\n        qty: 1,\n        strike: 195,\n        expiration: \"2025-02-21\",\n        theoreticalPrice: 2.4,\n        actualPrice: 2.38,\n        currentPrice: 2.25,\n      },\n      {\n        type: \"CALL\",\n        side: \"BUY\",\n        qty: 1,\n        strike: 200,\n        expiration: \"2025-02-21\",\n        theoreticalPrice: 1.15,\n        actualPrice: 1.17,\n        currentPrice: 1.1,\n      },\n    ],\n    theoretical: {\n      maxProfit: 350,\n      maxLoss: 150,\n      breakevens: [176.5, 193.5],\n      pop: 67,\n      expectedValue: 235,\n      entryPrice: 3.55, // Net credit\n      greeks: {\n        delta: -2.5,\n        gamma: 0.015,\n        theta: 8.5,\n        vega: -15.2,\n      },\n    },\n    actual: {\n      entryPrice: 3.46, // Actual net credit (worse than theoretical)\n      entrySlippage: -9, // Lost $9 on entry\n      currentPL: 28, // Mark-to-market\n      unrealizedPL: 28,\n      realizedPL: 0,\n      greeks: {\n        delta: -2.3,\n        gamma: 0.014,\n        theta: 8.2,\n        vega: -14.8,\n      },\n    },\n    lastUpdated: new Date(),\n  };\n\n  return mockPosition;\n}\n\n/**\n * Update position with real-time market data\n */\nasync function updateRealTimePL(position: PositionTracking): Promise<PositionTracking> {\n  // In production, fetch current option prices from market data API\n  // For now, simulate price movement\n\n  let currentValue = 0;\n  let entryValue = 0;\n\n  for (const leg of position.legs) {\n    const legMultiplier = leg.side === \"BUY\" ? -1 : 1; // BUY = debit, SELL = credit\n\n    // Entry value\n    entryValue += legMultiplier * leg.actualPrice * leg.qty * 100;\n\n    // Current value\n    currentValue += legMultiplier * leg.currentPrice * leg.qty * 100;\n  }\n\n  // P&L = entry value - current value (for credit spreads)\n  // For debit spreads, P&L = current value - entry value\n  const unrealizedPL = entryValue - currentValue;\n\n  // Update actual metrics\n  position.actual.currentPL = unrealizedPL;\n  position.actual.unrealizedPL = unrealizedPL;\n  position.lastUpdated = new Date();\n\n  // Recalculate greeks (in production, fetch from options API)\n  position.actual.greeks = calculateCurrentGreeks(position.legs);\n\n  return position;\n}\n\n/**\n * Calculate current greeks based on leg prices (simplified)\n */\nfunction calculateCurrentGreeks(legs: any[]): Greeks {\n  // Mock calculation - in production, fetch actual greeks\n  let delta = 0;\n  let gamma = 0;\n  let theta = 0;\n  let vega = 0;\n\n  for (const leg of legs) {\n    const multiplier = leg.side === \"BUY\" ? 1 : -1;\n\n    // Estimate greeks based on option type\n    const legGreeks = estimateLegGreeks(leg);\n    delta += multiplier * legGreeks.delta * leg.qty * 100;\n    gamma += multiplier * legGreeks.gamma * leg.qty * 100;\n    theta += multiplier * legGreeks.theta * leg.qty * 100;\n    vega += multiplier * legGreeks.vega * leg.qty * 100;\n  }\n\n  return {\n    delta: Math.round(delta * 100) / 100,\n    gamma: Math.round(gamma * 1000) / 1000,\n    theta: Math.round(theta * 100) / 100,\n    vega: Math.round(vega * 100) / 100,\n  };\n}\n\n/**\n * Estimate greeks for a single leg\n */\nfunction estimateLegGreeks(leg: any): Greeks {\n  // Simplified - in production, use Black-Scholes or fetch from API\n  if (leg.type === \"CALL\") {\n    return {\n      delta: 0.48,\n      gamma: 0.018,\n      theta: -0.12,\n      vega: 0.14,\n    };\n  } else {\n    return {\n      delta: -0.48,\n      gamma: 0.018,\n      theta: -0.12,\n      vega: 0.14,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proposals\\[id]\\approve.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proposals\\[id]\\reject.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proposals\\[id]\\reprice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proposals\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\proxy\\[...path].ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\strategies\\[strategyId]\\versions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[190,193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[190,193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from \"next\";\n// TODO: Re-enable when strategies module is implemented\n// import type { Strategy } from \"@/strategies/schema\";\ntype Strategy = any;\n\n/**\n * Strategy Versions Endpoint\n *\n * GET /api/strategies/[strategyId]/versions\n *\n * Returns all versions of a strategy for version management\n */\n\ninterface StrategyVersion {\n  version: number;\n  updated_at: string;\n  updated_by: string;\n  changes_summary?: string;\n  strategy_json: Strategy;\n}\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== \"GET\") {\n    return res.status(405).json({ error: \"Method not allowed\" });\n  }\n\n  const { strategyId } = req.query;\n\n  if (!strategyId || typeof strategyId !== \"string\") {\n    return res.status(400).json({ error: \"Missing or invalid strategyId\" });\n  }\n\n  try {\n    const versions = await getStrategyVersions(strategyId);\n\n    if (versions.length === 0) {\n      return res.status(404).json({ error: \"Strategy not found\" });\n    }\n\n    res.status(200).json({\n      success: true,\n      strategyId,\n      versions,\n    });\n  } catch (error) {\n    console.error(\"Strategy versions fetch error:\", error);\n    res.status(500).json({\n      error: \"Failed to fetch strategy versions\",\n      detail: String(error),\n    });\n  }\n}\n\n/**\n * Fetch all versions of a strategy (mock)\n */\nasync function getStrategyVersions(strategyId: string): Promise<StrategyVersion[]> {\n  // Mock data - in production, query database:\n  // SELECT version, updated_at, updated_by, strategy_json\n  // FROM strategies\n  // WHERE strategy_id = $1\n  // ORDER BY version DESC\n\n  // Return empty if strategy doesn't exist\n  if (!strategyId.startsWith(\"micro_collar\")) {\n    return [];\n  }\n\n  return [\n    {\n      version: 3,\n      updated_at: \"2025-02-10T14:30:00Z\",\n      updated_by: \"mock_user_1\",\n      changes_summary: \"Increased max_concurrent_positions to 10\",\n      strategy_json: {\n        strategy_id: strategyId,\n        name: \"Micro Protective Collar – Sub-$4\",\n        goal: \"Income with capped downside on cheap stocks\",\n        // ... full strategy JSON (would be complete in production)\n      } as Strategy,\n    },\n    {\n      version: 2,\n      updated_at: \"2025-02-05T10:15:00Z\",\n      updated_by: \"mock_user_1\",\n      changes_summary: \"Tightened profit target to 8%\",\n      strategy_json: {\n        strategy_id: strategyId,\n        name: \"Micro Protective Collar – Sub-$4\",\n        goal: \"Income with capped downside on cheap stocks\",\n      } as Strategy,\n    },\n    {\n      version: 1,\n      updated_at: \"2025-01-15T10:00:00Z\",\n      updated_by: \"mock_user_1\",\n      changes_summary: \"Initial version\",\n      strategy_json: {\n        strategy_id: strategyId,\n        name: \"Micro Protective Collar – Sub-$4\",\n        goal: \"Income with capped downside on cheap stocks\",\n      } as Strategy,\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\api\\strategies\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[270,273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[270,273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from \"next\";\n// TODO: Re-enable when strategies module is implemented\n// import type { Strategy, ValidationResult } from \"@/strategies/schema\";\n// import { validateStrategy } from \"@/strategies/validator\";\ntype Strategy = any;\ninterface ValidationResult {\n  valid: boolean;\n  errors: Array<{ field: string; message: string }>;\n  warnings: Array<{ field: string; message: string }>;\n}\nconst validateStrategy = (_strategy: Strategy): ValidationResult => ({\n  valid: true,\n  errors: [],\n  warnings: [],\n});\n\n/**\n * Strategies API Endpoint\n *\n * POST /api/strategies - Create or update a strategy\n * GET /api/strategies - List all user strategies\n *\n * Validates strategy JSON, saves to database with version management\n */\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === \"POST\") {\n    return handleCreate(req, res);\n  } else if (req.method === \"GET\") {\n    return handleList(req, res);\n  } else {\n    return res.status(405).json({ error: \"Method not allowed\" });\n  }\n}\n\n/**\n * POST /api/strategies\n * Create or update a strategy with validation\n */\nasync function handleCreate(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    const strategyData = req.body;\n\n    // Server-side validation\n    const validation: ValidationResult = validateStrategy(strategyData);\n\n    // If there are errors, reject\n    if (!validation.valid) {\n      return res.status(400).json({\n        success: false,\n        errors: validation.errors,\n        warnings: validation.warnings,\n      });\n    }\n\n    // Check if this is an update (has strategy_id) or new strategy\n    const isUpdate = !!strategyData.strategy_id;\n\n    // In production, save to database\n    const savedStrategy = await saveStrategy(strategyData, isUpdate);\n\n    return res.status(200).json({\n      success: true,\n      strategyId: savedStrategy.strategy_id,\n      version: savedStrategy.version,\n      warnings: validation.warnings, // Include warnings even on success\n    });\n  } catch (error) {\n    console.error(\"Strategy save error:\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to save strategy\",\n      detail: String(error),\n    });\n  }\n}\n\n/**\n * GET /api/strategies\n * List all strategies for the user\n */\nasync function handleList(_req: NextApiRequest, res: NextApiResponse) {\n  try {\n    // In production, fetch from database filtered by user_id\n    const strategies = await listStrategies();\n\n    return res.status(200).json({\n      success: true,\n      strategies,\n    });\n  } catch (error) {\n    console.error(\"Strategy list error:\", error);\n    return res.status(500).json({\n      success: false,\n      error: \"Failed to list strategies\",\n      detail: String(error),\n    });\n  }\n}\n\n/**\n * Save strategy to database (mock)\n */\ninterface StrategyRecord {\n  strategy_id: string;\n  version: number;\n  user_id: string;\n  name: string;\n  strategy_json: Strategy;\n  created_at: string;\n  updated_at: string;\n  active: boolean;\n}\n\nasync function saveStrategy(strategy: Strategy, isUpdate: boolean): Promise<StrategyRecord> {\n  // Mock implementation - in production:\n  // 1. Check if strategy_id exists\n  // 2. If update, increment version\n  // 3. Store in strategies table with user_id, version, timestamp\n  // 4. Return saved record\n\n  const now = new Date().toISOString();\n\n  // Generate strategy_id if new\n  if (!isUpdate || !strategy.strategy_id) {\n    strategy.strategy_id = `strat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Mock version management\n  const currentVersion = await getCurrentVersion(strategy.strategy_id);\n  const newVersion = currentVersion + 1;\n\n  const record: StrategyRecord = {\n    strategy_id: strategy.strategy_id,\n    version: newVersion,\n    user_id: \"mock_user_1\", // In production, get from auth session\n    name: strategy.name,\n    strategy_json: strategy,\n    created_at: isUpdate ? await getCreatedAt(strategy.strategy_id) : now,\n    updated_at: now,\n    active: true,\n  };\n\n  // Mock: Store in database\n  console.info(\"Saving strategy:\", record.strategy_id, \"version:\", record.version);\n\n  return record;\n}\n\n/**\n * Get current version number for a strategy\n */\nasync function getCurrentVersion(_strategyId: string): Promise<number> {\n  // Mock - in production, query database:\n  // SELECT MAX(version) FROM strategies WHERE strategy_id = $1\n  return 0; // New strategy starts at version 1\n}\n\n/**\n * Get creation timestamp for existing strategy\n */\nasync function getCreatedAt(_strategyId: string): Promise<string> {\n  // Mock - in production, query database\n  return new Date().toISOString();\n}\n\n/**\n * List all strategies for user\n */\nasync function listStrategies(): Promise<StrategyRecord[]> {\n  // Mock - in production, query database:\n  // SELECT * FROM strategies WHERE user_id = $1 AND active = true\n  // GROUP BY strategy_id, version ORDER BY updated_at DESC\n\n  return [\n    {\n      strategy_id: \"micro_collar_sub4_v1\",\n      version: 1,\n      user_id: \"mock_user_1\",\n      name: \"Micro Protective Collar – Sub-$4\",\n      strategy_json: {} as Strategy, // Would include full JSON\n      created_at: \"2025-01-15T10:00:00Z\",\n      updated_at: \"2025-01-15T10:00:00Z\",\n      active: true,\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\pages\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\services\\telemetry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[236,239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[236,239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1802,1805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1802,1805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2258,2261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2258,2261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2475,2478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2475,2478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2541,2544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2541,2544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2810,2813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2810,2813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3176,3179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3176,3179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3242,3245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3242,3245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Telemetry Service\n// Tracks user interactions, errors, and performance metrics\n\ninterface TelemetryEvent {\n  userId: string;\n  sessionId: string;\n  component: string;\n  action: string;\n  timestamp: string;\n  metadata: Record<string, any>;\n  userRole: \"admin\" | \"beta\" | \"alpha\" | \"user\" | \"owner\";\n}\n\ninterface TelemetryConfig {\n  endpoint: string;\n  batchSize: number;\n  flushInterval: number;\n  enabled: boolean;\n}\n\nclass TelemetryService {\n  private config: TelemetryConfig;\n  private buffer: TelemetryEvent[] = [];\n  private flushTimer: NodeJS.Timeout | null = null;\n  private sessionId: string;\n\n  constructor(config: Partial<TelemetryConfig> = {}) {\n    const telemetryEnabled =\n      typeof window !== \"undefined\" && process.env.NEXT_PUBLIC_TELEMETRY_ENABLED !== \"false\";\n\n    this.config = {\n      endpoint: config.endpoint || \"/api/telemetry\",\n      batchSize: config.batchSize || 50,\n      flushInterval: config.flushInterval || 10000, // 10 seconds\n      enabled: config.enabled !== false && telemetryEnabled,\n    };\n\n    this.sessionId = this.generateSessionId();\n\n    if (this.config.enabled) {\n      this.startAutoFlush();\n      this.setupEventListeners();\n    }\n  }\n\n  /**\n   * Track a user action/event\n   */\n  track(event: Omit<TelemetryEvent, \"timestamp\" | \"sessionId\">) {\n    if (!this.config.enabled) return;\n\n    const telemetryEvent: TelemetryEvent = {\n      ...event,\n      sessionId: this.sessionId,\n      timestamp: new Date().toISOString(),\n    };\n\n    this.buffer.push(telemetryEvent);\n\n    // Auto-flush if buffer is full\n    if (this.buffer.length >= this.config.batchSize) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Track page view\n   */\n  trackPageView(userId: string, userRole: string, component: string) {\n    this.track({\n      userId,\n      userRole: userRole as any,\n      component,\n      action: \"page_view\",\n      metadata: {\n        path: typeof window !== \"undefined\" ? window.location.pathname : \"\",\n        referrer: typeof document !== \"undefined\" ? document.referrer : \"\",\n        timestamp: Date.now(),\n      },\n    });\n  }\n\n  /**\n   * Track button click\n   */\n  trackClick(userId: string, userRole: string, component: string, buttonName: string) {\n    this.track({\n      userId,\n      userRole: userRole as any,\n      component,\n      action: \"button_click\",\n      metadata: { buttonName },\n    });\n  }\n\n  /**\n   * Track form submission\n   */\n  trackFormSubmit(userId: string, userRole: string, component: string, formData: any) {\n    this.track({\n      userId,\n      userRole: userRole as any,\n      component,\n      action: \"form_submit\",\n      metadata: formData,\n    });\n  }\n\n  /**\n   * Track error\n   */\n  trackError(userId: string, userRole: string, component: string, error: Error | string) {\n    this.track({\n      userId,\n      userRole: userRole as any,\n      component,\n      action: \"error\",\n      metadata: {\n        message: typeof error === \"string\" ? error : error.message,\n        stack: typeof error === \"string\" ? undefined : error.stack,\n        timestamp: Date.now(),\n      },\n    });\n  }\n\n  /**\n   * Track feature usage\n   */\n  trackFeature(userId: string, userRole: string, feature: string, metadata?: any) {\n    this.track({\n      userId,\n      userRole: userRole as any,\n      component: \"App\",\n      action: \"feature_used\",\n      metadata: {\n        feature,\n        ...metadata,\n      },\n    });\n  }\n\n  /**\n   * Flush events to server\n   */\n  async flush() {\n    if (this.buffer.length === 0) return;\n\n    const events = [...this.buffer];\n    this.buffer = [];\n\n    try {\n      // Use the Next.js API proxy to avoid CORS and ensure proper routing in production\n      const response = await fetch(`/api/proxy${this.config.endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ events }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Telemetry flush failed: ${response.status}`);\n      }\n\n      console.info(`[Telemetry] Flushed ${events.length} events`);\n    } catch (error) {\n      console.error(\"[Telemetry] Flush error:\", error);\n      // Re-add failed events to buffer\n      this.buffer.unshift(...events);\n    }\n  }\n\n  /**\n   * Enable telemetry\n   */\n  enable() {\n    this.config.enabled = true;\n    this.startAutoFlush();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Disable telemetry\n   */\n  disable() {\n    this.config.enabled = false;\n    this.stopAutoFlush();\n  }\n\n  /**\n   * Export all buffered events as JSON\n   */\n  exportEvents(): TelemetryEvent[] {\n    return [...this.buffer];\n  }\n\n  /**\n   * Clear all buffered events\n   */\n  clear() {\n    this.buffer = [];\n  }\n\n  // Private methods\n\n  private generateSessionId(): string {\n    return `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private startAutoFlush() {\n    if (this.flushTimer) return;\n\n    this.flushTimer = setInterval(() => {\n      this.flush();\n    }, this.config.flushInterval);\n  }\n\n  private stopAutoFlush() {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n      this.flushTimer = null;\n    }\n  }\n\n  private setupEventListeners() {\n    if (typeof window === \"undefined\") return;\n\n    // Track page unload\n    window.addEventListener(\"beforeunload\", () => {\n      this.flush();\n    });\n\n    // Track errors\n    window.addEventListener(\"error\", (event) => {\n      // Get user from localStorage or context\n      const userId = localStorage.getItem(\"userId\") || \"anonymous\";\n      const userRole = localStorage.getItem(\"userRole\") || \"user\";\n\n      this.trackError(userId, userRole, \"Global\", event.error || event.message);\n    });\n\n    // Track unhandled promise rejections\n    window.addEventListener(\"unhandledrejection\", (event) => {\n      const userId = localStorage.getItem(\"userId\") || \"anonymous\";\n      const userRole = localStorage.getItem(\"userRole\") || \"user\";\n\n      this.trackError(userId, userRole, \"Global\", event.reason);\n    });\n  }\n}\n\n// Singleton instance\nexport const telemetry = new TelemetryService({\n  enabled:\n    process.env.NODE_ENV === \"production\" || process.env.NEXT_PUBLIC_ENABLE_TELEMETRY === \"true\",\n});\n\nexport default telemetry;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\styles\\logoConstants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\styles\\paiid-theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\styles\\theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\fixtures\\options.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2100,2103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2100,2103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3647,3650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3647,3650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4133,4136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4133,4136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4639,4642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4639,4642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4745,4748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4745,4748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4864,4867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4864,4867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4989,4992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4989,4992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5094,5097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5094,5097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5271,5274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5271,5274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Options Test Fixtures\n *\n * Shared test constants and data for Playwright tests.\n * Ensures deterministic testing across different environments.\n */\n\n// Test symbols available in backend fixtures\nexport const TEST_SYMBOLS = [\"OPTT\", \"SPY\"] as const;\n\n// Test expiration dates (must match backend fixtures)\nexport const TEST_EXPIRATIONS = [\"2025-11-15\", \"2025-11-22\", \"2025-11-29\"] as const;\n\n// Test configuration\nexport const TEST_CONFIG = {\n  // Backend URL for testing\n  BACKEND_URL: process.env.NEXT_PUBLIC_BACKEND_API_BASE_URL || \"http://localhost:8001\",\n\n  // API Token for testing\n  API_TOKEN: process.env.NEXT_PUBLIC_API_TOKEN || \"test-token\",\n\n  // Test timeouts\n  TIMEOUTS: {\n    API_REQUEST: 10000, // 10 seconds\n    PAGE_LOAD: 30000, // 30 seconds\n    ELEMENT_WAIT: 5000, // 5 seconds\n  },\n\n  // Test retry configuration\n  RETRIES: {\n    MAX_ATTEMPTS: 3,\n    DELAY_MS: 1000,\n  },\n} as const;\n\n// Expected data shapes for validation\nexport const EXPECTED_OPTIONS_CHAIN_SHAPE = {\n  symbol: \"string\",\n  expiration_date: \"string\",\n  underlying_price: \"number\",\n  calls: \"array\",\n  puts: \"array\",\n  total_contracts: \"number\",\n} as const;\n\nexport const EXPECTED_OPTION_CONTRACT_SHAPE = {\n  symbol: \"string\",\n  underlying_symbol: \"string\",\n  option_type: \"string\",\n  strike_price: \"number\",\n  expiration_date: \"string\",\n  bid: \"number\",\n  ask: \"number\",\n  last_price: \"number\",\n  volume: \"number\",\n  open_interest: \"number\",\n  delta: \"number\",\n  gamma: \"number\",\n  theta: \"number\",\n  vega: \"number\",\n  implied_volatility: \"number\",\n} as const;\n\n// Test data generators\nexport const generateTestOptionContract = (\n  overrides: Partial<typeof EXPECTED_OPTION_CONTRACT_SHAPE> = {}\n) => ({\n  symbol: \"TEST251115C00045000\",\n  underlying_symbol: \"SPY\",\n  option_type: \"call\",\n  strike_price: 450,\n  expiration_date: \"2025-11-15\",\n  bid: 1.5,\n  ask: 1.6,\n  last_price: 1.55,\n  volume: 100,\n  open_interest: 1000,\n  delta: 0.5,\n  gamma: 0.01,\n  theta: -0.05,\n  vega: 0.1,\n  implied_volatility: 0.2,\n  ...overrides,\n});\n\nexport const generateTestOptionsChain = (symbol: string = \"SPY\", overrides: any = {}) => ({\n  symbol,\n  expiration_date: \"2025-11-15\",\n  underlying_price: 450.0,\n  calls: [generateTestOptionContract({ underlying_symbol: symbol, option_type: \"call\" })],\n  puts: [generateTestOptionContract({ underlying_symbol: symbol, option_type: \"put\" })],\n  total_contracts: 2,\n  ...overrides,\n});\n\n// Error scenarios for testing\nexport const ERROR_SCENARIOS = {\n  INVALID_SYMBOL: \"INVALID\",\n  NETWORK_ERROR: \"NETWORK_ERROR\",\n  SERVER_ERROR: \"SERVER_ERROR\",\n  TIMEOUT: \"TIMEOUT\",\n} as const;\n\n// Test selectors (centralized for maintainability)\nexport const SELECTORS = {\n  // Options chain page\n  OPTIONS_CHAIN_PAGE: '[data-testid=\"options-chain-page\"]',\n  SYMBOL_INPUT: 'input[data-testid=\"symbol-input\"]',\n  EXPIRATION_SELECT: 'select[data-testid=\"expiration-select\"]',\n  LOAD_BUTTON: 'button[data-testid=\"load-options\"]',\n\n  // Options table\n  OPTIONS_TABLE: '[data-testid=\"options-table\"]',\n  CALLS_SECTION: '[data-testid=\"calls-section\"]',\n  PUTS_SECTION: '[data-testid=\"puts-section\"]',\n  OPTION_ROW: '[data-testid=\"option-row\"]',\n\n  // Greeks display\n  DELTA_CELL: '[data-testid=\"delta\"]',\n  GAMMA_CELL: '[data-testid=\"gamma\"]',\n  THETA_CELL: '[data-testid=\"theta\"]',\n  VEGA_CELL: '[data-testid=\"vega\"]',\n\n  // Loading states\n  LOADING_SPINNER: '[data-testid=\"loading-spinner\"]',\n  ERROR_MESSAGE: '[data-testid=\"error-message\"]',\n\n  // Navigation\n  RADIAL_MENU: '[data-testid=\"radial-menu\"]',\n  OPTIONS_WEDGE: '[data-testid=\"options-wedge\"]',\n} as const;\n\n// Test assertions helpers\nexport const assertValidOptionsChain = (data: any) => {\n  expect(data).toHaveProperty(\"symbol\");\n  expect(data).toHaveProperty(\"expiration_date\");\n  expect(data).toHaveProperty(\"underlying_price\");\n  expect(data).toHaveProperty(\"calls\");\n  expect(data).toHaveProperty(\"puts\");\n  expect(data).toHaveProperty(\"total_contracts\");\n  expect(Array.isArray(data.calls)).toBe(true);\n  expect(Array.isArray(data.puts)).toBe(true);\n  expect(typeof data.total_contracts).toBe(\"number\");\n};\n\nexport const assertValidOptionContract = (contract: any) => {\n  expect(contract).toHaveProperty(\"symbol\");\n  expect(contract).toHaveProperty(\"strike_price\");\n  expect(contract).toHaveProperty(\"option_type\");\n  expect(contract).toHaveProperty(\"delta\");\n  expect(contract).toHaveProperty(\"gamma\");\n  expect(contract).toHaveProperty(\"theta\");\n  expect(contract).toHaveProperty(\"vega\");\n  expect(typeof contract.strike_price).toBe(\"number\");\n  expect(typeof contract.delta).toBe(\"number\");\n};\n\n// Test utilities\nexport const waitForApiResponse = async (\n  page: any,\n  timeout: number = TEST_CONFIG.TIMEOUTS.API_REQUEST\n) => {\n  return page.waitForResponse((response: any) => response.url().includes(\"/api/options/\"), {\n    timeout,\n  });\n};\n\nexport const fillSymbolInput = async (page: any, symbol: string) => {\n  await page.fill(SELECTORS.SYMBOL_INPUT, symbol);\n};\n\nexport const clickLoadButton = async (page: any) => {\n  await page.click(SELECTORS.LOAD_BUTTON);\n};\n\nexport const waitForOptionsTable = async (page: any) => {\n  await page.waitForSelector(SELECTORS.OPTIONS_TABLE, {\n    timeout: TEST_CONFIG.TIMEOUTS.ELEMENT_WAIT,\n  });\n};\n\nexport const waitForLoadingToComplete = async (page: any) => {\n  // Wait for loading spinner to disappear\n  await page.waitForSelector(SELECTORS.LOADING_SPINNER, {\n    state: \"hidden\",\n    timeout: TEST_CONFIG.TIMEOUTS.ELEMENT_WAIT,\n  });\n};\n\n// Test data for specific scenarios\nexport const TEST_SCENARIOS = {\n  BASIC_OPTIONS_CHAIN: {\n    symbol: \"SPY\",\n    expectedExpirations: 3,\n    expectedContracts: 30,\n  },\n  SMALL_OPTIONS_CHAIN: {\n    symbol: \"OPTT\",\n    expectedExpirations: 1,\n    expectedContracts: 2,\n  },\n  INVALID_SYMBOL: {\n    symbol: \"INVALID\",\n    expectedError: \"No fixture data available\",\n  },\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\global-setup.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[350,408],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[891,929],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[997,1042],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1141,1196],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1753,1804],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1895,1951],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2423,2472],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2566,2594],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2597,2655],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2658,2686],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3087,3115],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3118,3183],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3186,3214],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3217,3233],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Playwright Global Setup\n * Runs once before all tests to ensure clean test environment\n * Version: 1.0.0\n */\n\nimport { execSync } from \"child_process\";\nimport { existsSync, readdirSync, unlinkSync } from \"fs\";\nimport { join } from \"path\";\n\n/**\n * Kill processes on specific ports (cross-platform)\n */\nfunction killPort(port: number): void {\n  console.log(`[Global Setup] Cleaning up port ${port}...`);\n\n  try {\n    if (process.platform === \"win32\") {\n      // Windows\n      const cmd = `powershell -Command \"Get-NetTCPConnection -LocalPort ${port} -State Listen -ErrorAction SilentlyContinue | ForEach-Object { Stop-Process -Id $_.OwningProcess -Force -ErrorAction SilentlyContinue }\"`;\n      execSync(cmd, { stdio: \"ignore\" });\n    } else {\n      // Unix/Linux/Mac\n      execSync(`lsof -ti:${port} | xargs kill -9 2>/dev/null || true`, {\n        stdio: \"ignore\",\n      });\n    }\n    console.log(`  Port ${port} cleared`);\n  } catch (error) {\n    // Ignore errors if port wasn't in use\n    console.log(`  Port ${port} was not in use`);\n  }\n}\n\n/**\n * Clean up PID files from previous test runs\n */\nfunction cleanupPidFiles(): void {\n  console.log(\"[Global Setup] Cleaning up PID files...\");\n\n  const pidDirs = [join(__dirname, \"..\", \"..\", \"backend\", \".run\"), join(__dirname, \"..\", \".run\")];\n\n  let cleaned = 0;\n\n  for (const pidDir of pidDirs) {\n    if (!existsSync(pidDir)) {\n      continue;\n    }\n\n    try {\n      const files = readdirSync(pidDir);\n      for (const file of files) {\n        if (file.endsWith(\".pid\")) {\n          const pidFile = join(pidDir, file);\n          unlinkSync(pidFile);\n          cleaned++;\n        }\n      }\n    } catch (error) {\n      console.warn(`  Warning: Could not clean PID directory ${pidDir}`);\n    }\n  }\n\n  console.log(`  Cleaned up ${cleaned} PID file(s)`);\n}\n\n/**\n * Validate environment configuration\n */\nfunction validateEnvironment(): void {\n  console.log(\"[Global Setup] Validating environment...\");\n\n  // Check critical environment variables\n  const requiredVars = [\"NEXT_PUBLIC_BACKEND_API_BASE_URL\", \"NEXT_PUBLIC_API_TOKEN\"];\n\n  const missing: string[] = [];\n\n  for (const varName of requiredVars) {\n    if (!process.env[varName]) {\n      missing.push(varName);\n    }\n  }\n\n  if (missing.length > 0) {\n    console.warn(`  Warning: Missing environment variables: ${missing.join(\", \")}`);\n    console.warn(\"  Tests may fail without proper configuration\");\n  } else {\n    console.log(\"  Environment configuration valid\");\n  }\n}\n\n/**\n * Main global setup function\n */\nasync function globalSetup(): Promise<void> {\n  console.log(\"=\".repeat(70));\n  console.log(\"Playwright Global Setup - Pre-Test Cleanup\");\n  console.log(\"=\".repeat(70));\n\n  // 1. Clean up test ports (3000, 3001, 3002, 3003, 8000, 8001, 8002)\n  const testPorts = [3000, 3001, 3002, 3003, 8000, 8001, 8002];\n  for (const port of testPorts) {\n    killPort(port);\n  }\n\n  // Wait for ports to fully release\n  await new Promise((resolve) => setTimeout(resolve, 2000));\n\n  // 2. Clean up PID files\n  cleanupPidFiles();\n\n  // 3. Validate environment\n  validateEnvironment();\n\n  console.log(\"=\".repeat(70));\n  console.log(\"Global Setup Complete - Test environment is clean\");\n  console.log(\"=\".repeat(70));\n  console.log(\"\");\n}\n\nexport default globalSetup;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\global-teardown.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[335,393],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[932,980],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1119,1174],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1659,1707],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1798,1857],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2125,2159],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2265,2293],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2296,2358],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2361,2389],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2654,2682],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2685,2757],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2760,2788],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2791,2807],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Playwright Global Teardown\n * Runs once after all tests to cleanup test servers and artifacts\n * Version: 1.0.0\n */\n\nimport { execSync } from \"child_process\";\nimport { existsSync, readdirSync, unlinkSync } from \"fs\";\nimport { join } from \"path\";\n\n/**\n * Stop all test servers gracefully\n */\nfunction stopTestServers(): void {\n  console.log(\"[Global Teardown] Stopping test servers...\");\n\n  const testPorts = [3000, 8002];\n\n  for (const port of testPorts) {\n    try {\n      if (process.platform === \"win32\") {\n        execSync(\n          `powershell -Command \"Get-NetTCPConnection -LocalPort ${port} -State Listen -ErrorAction SilentlyContinue | ForEach-Object { Stop-Process -Id $_.OwningProcess -Force -ErrorAction SilentlyContinue }\"`,\n          { stdio: \"ignore\" }\n        );\n      } else {\n        execSync(`lsof -ti:${port} | xargs kill -TERM 2>/dev/null || true`, {\n          stdio: \"ignore\",\n        });\n      }\n      console.log(`  Stopped server on port ${port}`);\n    } catch (error) {\n      // Ignore if already stopped\n    }\n  }\n}\n\n/**\n * Remove all PID files\n */\nfunction removePidFiles(): void {\n  console.log(\"[Global Teardown] Removing PID files...\");\n\n  const pidDirs = [join(__dirname, \"..\", \"..\", \"backend\", \".run\"), join(__dirname, \"..\", \".run\")];\n\n  let removed = 0;\n\n  for (const pidDir of pidDirs) {\n    if (!existsSync(pidDir)) continue;\n\n    try {\n      const files = readdirSync(pidDir);\n      for (const file of files) {\n        if (file.endsWith(\".pid\")) {\n          unlinkSync(join(pidDir, file));\n          removed++;\n        }\n      }\n    } catch (error) {\n      console.warn(`  Could not clean ${pidDir}`);\n    }\n  }\n\n  console.log(`  Removed ${removed} PID file(s)`);\n}\n\n/**\n * Archive test artifacts (optional)\n */\nfunction archiveTestArtifacts(): void {\n  console.log(\"[Global Teardown] Test artifacts available:\");\n\n  const artifactDirs = [\n    { path: join(__dirname, \"..\", \"test-results\"), name: \"Test Results\" },\n    { path: join(__dirname, \"..\", \"playwright-report\"), name: \"HTML Report\" },\n  ];\n\n  for (const { path, name } of artifactDirs) {\n    if (existsSync(path)) {\n      console.log(`  ${name}: ${path}`);\n    }\n  }\n}\n\n/**\n * Main global teardown function\n */\nasync function globalTeardown(): Promise<void> {\n  console.log(\"=\".repeat(70));\n  console.log(\"Playwright Global Teardown - Post-Test Cleanup\");\n  console.log(\"=\".repeat(70));\n\n  // 1. Stop test servers gracefully\n  stopTestServers();\n\n  // Wait for servers to shutdown\n  await new Promise((resolve) => setTimeout(resolve, 2000));\n\n  // 2. Remove PID files\n  removePidFiles();\n\n  // 3. Archive/report artifacts\n  archiveTestArtifacts();\n\n  console.log(\"=\".repeat(70));\n  console.log(\"Global Teardown Complete - All test resources cleaned up\");\n  console.log(\"=\".repeat(70));\n  console.log(\"\");\n}\n\nexport default globalTeardown;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\market-data.spec.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1015,1079],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1748,1829],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2579,2664],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3492,3556],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4242,4293],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { expect, test } from \"@playwright/test\";\n\n/**\n * E2E tests for Market Data with Fixtures\n * Tests deterministic market data loading when USE_TEST_FIXTURES=true\n */\n\ntest.describe(\"Market Data - Fixture Mode\", () => {\n  test.describe.configure({ retries: 2 });\n\n  test.beforeEach(async ({ page }) => {\n    // Navigate to test page\n    await page.goto(\"http://localhost:3000/test-options\");\n    await page.waitForLoadState(\"domcontentloaded\");\n  });\n\n  test(\"should load market quotes with fixture data\", async ({ page }) => {\n    // Test that market quotes endpoint returns fixture data\n    const response = await page.request.get(\"http://localhost:8002/api/market/quote/SPY\");\n    expect(response.status()).toBe(200);\n\n    const quoteData = await response.json();\n    expect(quoteData.symbol).toBe(\"SPY\");\n    expect(quoteData.test_fixture).toBe(true); // Verify fixture marker\n    expect(quoteData.bid).toBeDefined();\n    expect(quoteData.ask).toBeDefined();\n    expect(quoteData.last).toBeDefined();\n\n    console.log(\"✅ Market quote fixture data verified:\", quoteData);\n  });\n\n  test(\"should load multiple quotes with fixture data\", async ({ page }) => {\n    // Test multiple symbols endpoint\n    const response = await page.request.get(\n      \"http://localhost:8002/api/market/quotes?symbols=SPY,QQQ,AAPL\"\n    );\n    expect(response.status()).toBe(200);\n\n    const quotesData = await response.json();\n    expect(quotesData.SPY).toBeDefined();\n    expect(quotesData.QQQ).toBeDefined();\n    expect(quotesData.AAPL).toBeDefined();\n\n    // Verify all quotes have fixture markers\n    expect(quotesData.SPY.test_fixture).toBe(true);\n    expect(quotesData.QQQ.test_fixture).toBe(true);\n    expect(quotesData.AAPL.test_fixture).toBe(true);\n\n    console.log(\"✅ Multiple quotes fixture data verified:\", Object.keys(quotesData));\n  });\n\n  test(\"should load positions with fixture data\", async ({ page }) => {\n    // Test positions endpoint\n    const response = await page.request.get(\"http://localhost:8002/api/positions\");\n    expect(response.status()).toBe(200);\n\n    const positionsData = await response.json();\n    expect(Array.isArray(positionsData)).toBe(true);\n    expect(positionsData.length).toBeGreaterThan(0);\n\n    // Verify first position has fixture data\n    const firstPosition = positionsData[0];\n    expect(firstPosition.symbol).toBeDefined();\n    expect(firstPosition.quantity).toBeDefined();\n    expect(firstPosition.entry_price).toBeDefined();\n    expect(firstPosition.current_price).toBeDefined();\n    expect(firstPosition.unrealized_pnl).toBeDefined();\n\n    console.log(\"✅ Positions fixture data verified:\", positionsData.length, \"positions\");\n  });\n\n  test(\"should verify no external API calls during fixture mode\", async ({ page }) => {\n    // Listen for any external API calls (should be none in fixture mode)\n    const externalCalls: string[] = [];\n\n    page.on(\"request\", (request) => {\n      const url = request.url();\n      // Check for external API calls (not localhost)\n      if (!url.includes(\"localhost\") && !url.includes(\"127.0.0.1\")) {\n        externalCalls.push(url);\n      }\n    });\n\n    // Navigate and trigger options chain load\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"SPY\");\n    await page.click('button:has-text(\"Load Options Chain\")');\n\n    // Wait for data to load\n    await expect(page.locator(\"table\")).toBeVisible({ timeout: 15000 });\n\n    // Verify no external API calls were made\n    expect(externalCalls.length).toBe(0);\n    console.log(\"✅ No external API calls detected in fixture mode\");\n  });\n\n  test(\"should have consistent fixture data across requests\", async ({ page }) => {\n    // Make multiple requests to same endpoint\n    const response1 = await page.request.get(\"http://localhost:8002/api/market/quote/SPY\");\n    const response2 = await page.request.get(\"http://localhost:8002/api/market/quote/SPY\");\n\n    expect(response1.status()).toBe(200);\n    expect(response2.status()).toBe(200);\n\n    const data1 = await response1.json();\n    const data2 = await response2.json();\n\n    // Verify data is consistent (fixtures should be deterministic)\n    expect(data1.bid).toBe(data2.bid);\n    expect(data1.ask).toBe(data2.ask);\n    expect(data1.last).toBe(data2.last);\n\n    console.log(\"✅ Fixture data consistency verified\");\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\tests\\options-chain.spec.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2776,2824],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3571,3660],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6642,6690],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7377,7425],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8325,8365],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9214,9272],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10048,10101],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { expect, test } from \"@playwright/test\";\n\n/**\n * E2E tests for OptionsChain component\n * Tests Phase 1 implementation with SPY symbol\n */\n\ntest.describe(\"Options Chain - Phase 1\", () => {\n  // Configure retries for API-dependent tests\n  test.describe.configure({ retries: 2 });\n\n  test.beforeEach(async ({ page }) => {\n    // Navigate to test page\n    await page.goto(\"http://localhost:3000/test-options\");\n\n    // Wait for DOM to be ready (networkidle causes timeouts due to AI chat widget)\n    await page.waitForLoadState(\"domcontentloaded\");\n\n    // Wait for the main heading to ensure page content is rendered\n    await page.locator('h1:has-text(\"Options Chain Test\")').waitFor({ timeout: 10000 });\n  });\n\n  test(\"should load test page successfully\", async ({ page }) => {\n    await expect(page.locator(\"h1\")).toContainText(\"Options Chain Test\");\n    await expect(page.locator('input[placeholder*=\"Enter symbol\"]')).toBeVisible();\n    await expect(page.locator('button:has-text(\"Load Options Chain\")')).toBeVisible();\n  });\n\n  test(\"should load SPY options chain with Greeks\", async ({ page }) => {\n    // Fill symbol input (using SPY which has extensive options data)\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"SPY\");\n\n    // Click load button and wait for network activity\n    await page.click('button:has-text(\"Load Options Chain\")');\n\n    // Wait for modal to appear with increased timeout (API call + rendering)\n    await expect(page.locator('h2:has-text(\"Options Chain: SPY\")')).toBeVisible({\n      timeout: 20000,\n    });\n\n    // Verify expiration dropdown is visible\n    const expirationSelect = page.locator(\"select\");\n    await expect(expirationSelect).toBeVisible();\n\n    // Check that at least the default option exists\n    const optionCount = await expirationSelect.locator(\"option\").count();\n    expect(optionCount).toBeGreaterThanOrEqual(1); // At least the default \"Select Expiration\"\n\n    // Wait for options table to load\n    await expect(page.locator(\"table\")).toBeVisible({ timeout: 15000 });\n\n    // Verify Greeks column headers are present\n    await expect(page.locator('th:has-text(\"Delta\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"Gamma\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"Theta\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"Vega\")')).toBeVisible();\n\n    // Verify CALLS and PUTS headers\n    await expect(page.locator('th:has-text(\"CALLS\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"PUTS\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"STRIKE\")')).toBeVisible();\n\n    // Verify contracts are loaded (SPY has many contracts)\n    const rows = await page.locator(\"tbody tr\").count();\n    expect(rows).toBeGreaterThan(0);\n    console.log(`Loaded ${rows} options contracts`);\n\n    // Verify at least one strike price is visible\n    await expect(page.locator(\"tbody td\").first()).toBeVisible();\n  });\n\n  test(\"should display contract count and expiration info\", async ({ page }) => {\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"SPY\");\n    await page.click('button:has-text(\"Load Options Chain\")');\n\n    // Wait for modal\n    await expect(page.locator('h2:has-text(\"Options Chain: SPY\")')).toBeVisible({\n      timeout: 10000,\n    });\n\n    // Wait for data to load\n    await page.waitForTimeout(2000);\n\n    // Verify contract count is displayed\n    const contractInfo = page.locator('p:has-text(\"contracts\")');\n    const contractInfoCount = await contractInfo.count();\n    if (contractInfoCount === 0) {\n      console.log(\"⚠️ Contract info not found. Page content:\", await page.textContent(\"body\"));\n    }\n    await expect(contractInfo, \"Contract count should be visible\").toBeVisible({ timeout: 5000 });\n\n    // Verify expiration date is shown\n    const expirationInfo = page.locator('p:has-text(\"Expiration:\")');\n    await expect(expirationInfo, \"Expiration date should be visible\").toBeVisible({\n      timeout: 5000,\n    });\n  });\n\n  test(\"should support Call/Put/Both filter toggle\", async ({ page }) => {\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"SPY\");\n    await page.click('button:has-text(\"Load Options Chain\")');\n\n    // Wait for modal and table\n    await expect(page.locator(\"table\")).toBeVisible({ timeout: 15000 });\n\n    // Find filter buttons using exact text match\n    const allButton = page.getByRole(\"button\", { name: \"all\", exact: true });\n    const callsButton = page.getByRole(\"button\", { name: \"calls\", exact: true });\n    const putsButton = page.getByRole(\"button\", { name: \"puts\", exact: true });\n\n    // Verify all filter buttons exist\n    await expect(allButton).toBeVisible();\n    await expect(callsButton).toBeVisible();\n    await expect(putsButton).toBeVisible();\n\n    // Get initial row count\n    const initialRows = await page.locator(\"tbody tr\").count();\n\n    // Click \"calls\" filter\n    await callsButton.click();\n    await page.waitForTimeout(500);\n\n    // Verify rows potentially reduced (calls only)\n    const callsRows = await page.locator(\"tbody tr\").count();\n    expect(callsRows).toBeGreaterThan(0);\n\n    // Click \"puts\" filter\n    await putsButton.click();\n    await page.waitForTimeout(500);\n\n    // Verify rows potentially reduced (puts only)\n    const putsRows = await page.locator(\"tbody tr\").count();\n    expect(putsRows).toBeGreaterThan(0);\n\n    // Click \"all\" filter to return to full view\n    await allButton.click();\n    await page.waitForTimeout(500);\n\n    const finalRows = await page.locator(\"tbody tr\").count();\n    expect(finalRows).toBe(initialRows);\n  });\n\n  test(\"should close modal when clicking Close button\", async ({ page }) => {\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"SPY\");\n    await page.click('button:has-text(\"Load Options Chain\")');\n\n    // Wait for modal\n    await expect(page.locator('h2:has-text(\"Options Chain: SPY\")')).toBeVisible({\n      timeout: 10000,\n    });\n\n    // Click Close button\n    await page.click('button:has-text(\"Close\")');\n\n    // Verify modal is closed\n    await expect(page.locator('h2:has-text(\"Options Chain: SPY\")')).not.toBeVisible();\n  });\n\n  test(\"should handle invalid symbol gracefully\", async ({ page }) => {\n    // Enter invalid symbol\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"INVALID123\");\n    await page.click('button:has-text(\"Load Options Chain\")');\n\n    // Wait for potential error or empty state\n    await page.waitForTimeout(3000);\n\n    // Check if error message appears (component should show error state)\n    const errorDiv = page.locator('div:has-text(\"Error\")').first();\n    if (await errorDiv.isVisible()) {\n      console.log(\"Error handling working correctly\");\n    }\n  });\n\n  test(\"should display Greeks with proper formatting\", async ({ page }) => {\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"SPY\");\n    await page.click('button:has-text(\"Load Options Chain\")');\n\n    // Wait for table\n    await expect(page.locator(\"table\")).toBeVisible({ timeout: 15000 });\n\n    // Find first data cell with delta value\n    const deltaCell = page.locator(\"tbody tr\").first().locator(\"td\").nth(2); // Assuming delta is 3rd column\n\n    // Verify cell has content\n    await expect(deltaCell).not.toBeEmpty();\n\n    // Check if delta value is formatted (should be number with decimals or \"—\")\n    const deltaText = await deltaCell.textContent();\n    console.log(`Sample Delta value: ${deltaText}`);\n\n    // Verify it's either a number or dash\n    expect(deltaText).toMatch(/^[0-9.\\-—]+$/);\n  });\n});\n\ntest.describe(\"Options Chain - Network & Performance\", () => {\n  // Configure retries for network tests\n  test.describe.configure({ retries: 2 });\n\n  test(\"should make correct API calls\", async ({ page }) => {\n    // Listen for API calls\n    const expirationsRequest = page.waitForRequest((req) =>\n      req.url().includes(\"/api/proxy/options/expirations/SPY\")\n    );\n\n    const chainRequest = page.waitForRequest((req) =>\n      req.url().includes(\"/api/proxy/options/chain/SPY\")\n    );\n\n    // Navigate and trigger\n    await page.goto(\"http://localhost:3000/test-options\");\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"SPY\");\n    await page.click('button:has-text(\"Load Options Chain\")');\n\n    // Verify requests were made\n    await expirationsRequest;\n    await chainRequest;\n\n    console.log(\"✅ All API calls verified\");\n  });\n\n  test(\"should use fixture data when USE_TEST_FIXTURES=true\", async ({ page }) => {\n    // Navigate and trigger with fixture-enabled backend\n    await page.goto(\"http://localhost:3000/test-options\");\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"SPY\");\n    await page.click('button:has-text(\"Load Options Chain\")');\n\n    // Wait for modal and table\n    await expect(page.locator('h2:has-text(\"Options Chain: SPY\")')).toBeVisible({\n      timeout: 10000,\n    });\n    await expect(page.locator(\"table\")).toBeVisible({ timeout: 15000 });\n\n    // Verify fixture marker is present in response\n    // This would require checking the network response or component state\n    // For now, we verify the data loads successfully with fixtures\n    const rows = await page.locator(\"tbody tr\").count();\n    expect(rows).toBeGreaterThan(0);\n    console.log(`✅ Loaded ${rows} fixture contracts for SPY`);\n\n    // Verify Greeks are displayed (fixtures should have consistent data)\n    await expect(page.locator('th:has-text(\"Delta\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"Gamma\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"Theta\")')).toBeVisible();\n    await expect(page.locator('th:has-text(\"Vega\")')).toBeVisible();\n  });\n\n  test(\"should load within reasonable time\", async ({ page }) => {\n    await page.goto(\"http://localhost:3000/test-options\");\n\n    const startTime = Date.now();\n\n    await page.fill('input[placeholder*=\"Enter symbol\"]', \"SPY\");\n    await page.click('button:has-text(\"Load Options Chain\")');\n    await expect(page.locator(\"table\")).toBeVisible({ timeout: 15000 });\n\n    const loadTime = Date.now() - startTime;\n    console.log(`Options chain loaded in ${loadTime}ms`);\n\n    // Should load within 15 seconds\n    expect(loadTime).toBeLessThan(15000);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\types\\OptionsContract.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\types\\lightweight-charts.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[127,130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[127,130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[133,136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[133,136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[166,169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[166,169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[172,175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[172,175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[205,208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[205,208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[211,214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[211,214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[249,252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[249,252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[255,258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[255,258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"lightweight-charts\";\n\ndeclare module \"lightweight-charts\" {\n  interface IChartApi {\n    addCandlestickSeries(options?: any): any;\n    addLineSeries(options?: any): any;\n    addAreaSeries(options?: any): any;\n    addHistogramSeries(options?: any): any;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\types\\pnl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\types\\profile.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6909,6912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6909,6912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Profile Data Structure\n * Complete user profile system for PaiiD trading platform\n * Tracks investment capital, preferences, and portfolio state across all workflows\n */\n\nexport interface InvestmentSettings {\n  initialCapital: number; // Total starting capital\n  currentCapital: number; // Current available capital\n  allocatedCapital: number; // Capital in open positions\n  maxPositionSize: number; // Max $ per position\n  maxPortfolioRisk: number; // Max % of portfolio at risk\n  marginEnabled: boolean;\n  marginMultiplier?: number; // 2x, 4x, etc.\n}\n\nexport interface TradingPreferences {\n  riskTolerance: \"conservative\" | \"moderate\" | \"aggressive\";\n  tradingStyle: \"day\" | \"swing\" | \"long-term\" | \"mixed\";\n  preferredInstruments: (\"stocks\" | \"options\" | \"crypto\" | \"futures\")[];\n  preferredStrategies: string[]; // e.g., [\"momentum\", \"mean-reversion\", \"breakout\"]\n  priceRange?: {\n    min: number;\n    max: number;\n  };\n  minimumVolume?: number;\n  avoidEarnings?: boolean;\n}\n\nexport interface PersonalInfo {\n  name?: string;\n  email?: string;\n  timezone: string;\n  tradingHours?: {\n    start: string; // \"09:30\"\n    end: string; // \"16:00\"\n  };\n  notifications?: {\n    email: boolean;\n    push: boolean;\n    sms: boolean;\n  };\n}\n\nexport interface Position {\n  id: string;\n  symbol: string;\n  type: \"stock\" | \"option\" | \"crypto\";\n  quantity: number;\n  entryPrice: number;\n  currentPrice: number;\n  entryDate: string;\n  strategyId?: string;\n  stopLoss?: number;\n  takeProfit?: number;\n  unrealizedPnL: number;\n  unrealizedPnLPercent: number;\n}\n\nexport interface PortfolioState {\n  positions: Position[];\n  totalValue: number; // Current portfolio value\n  totalPnL: number; // All-time P&L\n  totalPnLPercent: number;\n  dayPnL: number;\n  dayPnLPercent: number;\n  winRate: number; // % of winning trades\n  averageWin: number;\n  averageLoss: number;\n  sharpeRatio?: number;\n  maxDrawdown: number;\n}\n\nexport interface Watchlist {\n  id: string;\n  name: string;\n  symbols: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface UserProfile {\n  id: string;\n  createdAt: string;\n  updatedAt: string;\n  personalInfo: PersonalInfo;\n  investmentSettings: InvestmentSettings;\n  tradingPreferences: TradingPreferences;\n  portfolio: PortfolioState;\n  watchlists: Watchlist[];\n  activeStrategies: string[]; // Strategy IDs\n  activeMorningRoutines: string[]; // Routine IDs\n  onboardingCompleted: boolean;\n  lastLogin?: string;\n}\n\n// Helper functions\n\nexport function createDefaultProfile(): UserProfile {\n  return {\n    id: `profile-${Date.now()}`,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    personalInfo: {\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      tradingHours: {\n        start: \"09:30\",\n        end: \"16:00\",\n      },\n      notifications: {\n        email: false,\n        push: true,\n        sms: false,\n      },\n    },\n    investmentSettings: {\n      initialCapital: 0,\n      currentCapital: 0,\n      allocatedCapital: 0,\n      maxPositionSize: 0,\n      maxPortfolioRisk: 0.02, // 2% default\n      marginEnabled: false,\n    },\n    tradingPreferences: {\n      riskTolerance: \"moderate\",\n      tradingStyle: \"mixed\",\n      preferredInstruments: [\"stocks\"],\n      preferredStrategies: [],\n      avoidEarnings: true,\n    },\n    portfolio: {\n      positions: [],\n      totalValue: 0,\n      totalPnL: 0,\n      totalPnLPercent: 0,\n      dayPnL: 0,\n      dayPnLPercent: 0,\n      winRate: 0,\n      averageWin: 0,\n      averageLoss: 0,\n      maxDrawdown: 0,\n    },\n    watchlists: [],\n    activeStrategies: [],\n    activeMorningRoutines: [],\n    onboardingCompleted: false,\n  };\n}\n\nexport function calculateDerivedValues(profile: UserProfile): UserProfile {\n  const { investmentSettings, portfolio } = profile;\n\n  // Calculate current capital (initial - allocated)\n  investmentSettings.currentCapital =\n    investmentSettings.initialCapital - investmentSettings.allocatedCapital;\n\n  // Calculate max position size (% of initial capital)\n  investmentSettings.maxPositionSize = investmentSettings.initialCapital * 0.1; // 10% default\n\n  // Calculate portfolio value\n  portfolio.totalValue =\n    investmentSettings.currentCapital +\n    portfolio.positions.reduce((sum, pos) => sum + pos.currentPrice * pos.quantity, 0);\n\n  // Calculate total P&L\n  portfolio.totalPnL = portfolio.totalValue - investmentSettings.initialCapital;\n  portfolio.totalPnLPercent =\n    investmentSettings.initialCapital > 0\n      ? (portfolio.totalPnL / investmentSettings.initialCapital) * 100\n      : 0;\n\n  return profile;\n}\n\nexport function saveProfile(profile: UserProfile): void {\n  profile.updatedAt = new Date().toISOString();\n  const calculated = calculateDerivedValues(profile);\n  localStorage.setItem(\"paid_user_profile\", JSON.stringify(calculated));\n\n  // Emit custom event for other components to listen\n  window.dispatchEvent(new CustomEvent(\"profile-updated\", { detail: calculated }));\n}\n\nexport function loadProfile(): UserProfile | null {\n  try {\n    const stored = localStorage.getItem(\"paid_user_profile\");\n    if (!stored) return null;\n\n    const profile = JSON.parse(stored) as UserProfile;\n    return calculateDerivedValues(profile);\n  } catch (error) {\n    console.error(\"[Profile] Failed to load profile:\", error);\n    return null;\n  }\n}\n\nexport function getOrCreateProfile(): UserProfile {\n  const existing = loadProfile();\n  if (existing) return existing;\n\n  const newProfile = createDefaultProfile();\n  saveProfile(newProfile);\n  return newProfile;\n}\n\nexport function updateInvestmentCapital(profile: UserProfile, newCapital: number): UserProfile {\n  profile.investmentSettings.initialCapital = newCapital;\n  return calculateDerivedValues(profile);\n}\n\nexport function addPosition(profile: UserProfile, position: Position): UserProfile {\n  profile.portfolio.positions.push(position);\n  profile.investmentSettings.allocatedCapital += position.entryPrice * position.quantity;\n  return calculateDerivedValues(profile);\n}\n\nexport function removePosition(profile: UserProfile, positionId: string): UserProfile {\n  const position = profile.portfolio.positions.find((p) => p.id === positionId);\n  if (position) {\n    profile.portfolio.positions = profile.portfolio.positions.filter((p) => p.id !== positionId);\n    profile.investmentSettings.allocatedCapital -= position.entryPrice * position.quantity;\n  }\n  return calculateDerivedValues(profile);\n}\n\nexport function addWatchlist(profile: UserProfile, watchlist: Watchlist): UserProfile {\n  profile.watchlists.push(watchlist);\n  profile.updatedAt = new Date().toISOString();\n  return profile;\n}\n\nexport function removeWatchlist(profile: UserProfile, watchlistId: string): UserProfile {\n  profile.watchlists = profile.watchlists.filter((w) => w.id !== watchlistId);\n  profile.updatedAt = new Date().toISOString();\n  return profile;\n}\n\n// Export type guards\nexport function isValidProfile(obj: any): obj is UserProfile {\n  return (\n    obj &&\n    typeof obj === \"object\" &&\n    \"id\" in obj &&\n    \"investmentSettings\" in obj &&\n    \"tradingPreferences\" in obj &&\n    \"portfolio\" in obj\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\SSaint-Cyr\\Documents\\GitHub\\PaiiD\\frontend\\utils\\indicators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]